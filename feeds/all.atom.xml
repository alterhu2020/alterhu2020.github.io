<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PingBook Blog</title><link href="https://pingbook.top/" rel="alternate"></link><link href="https://pingbook.top/feeds/all.atom.xml" rel="self"></link><id>https://pingbook.top/</id><updated>2018-09-10T20:21:38+08:00</updated><entry><title>千行代码入门Python(转载)</title><link href="https://pingbook.top/articles/1000-line-learn-python/" rel="alternate"></link><published>2018-09-10T20:21:38+08:00</published><updated>2018-09-10T20:21:38+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-10:/articles/1000-line-learn-python/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;作者：笑虎&lt;br&gt;
   链接：https://&amp;nbsp;zhuanlan.zhihu.com/p/22909144&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码如下 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;作者：笑虎&lt;br&gt;
   链接：https://&amp;nbsp;zhuanlan.zhihu.com/p/22909144&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码如下: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# _*_ coding: utf-8 _*_&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 寻求帮助:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;简单的列出对象obj所包含的方法名称，返回一个字符串列表&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;查询obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;func的具体介绍和用法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 测试类型的三种方法，推荐第三种&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;L is list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nn"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;L is list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="nf"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;L is list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python数据类型：哈希类型、不可哈希类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;哈希类型，即在原地不能改变的变量类型，不可变类型。可利用hash函数查看其hash值，也可以作为字典的key&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;数字类型：int, float, decimal.Decimal, fractions.Fraction, complex&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;字符串类型：str, bytes&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;元组：tuple&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;冻结集合：frozenset&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;布尔类型：True, False&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;None&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;不可hash类型：原地可变类型：list、dict和set。它们不可以作为字典的key。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 数字常量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999999&lt;/span&gt;                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;整数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mf"&gt;1.23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.14e-10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nv"&gt;E210&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0e+210&lt;/span&gt;          &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;浮点数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mo"&gt;0o177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x9ff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;X9FF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mb"&gt;0b101010&lt;/span&gt;                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;八进制、十六进制、二进制数字&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="s s-Atom"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="s s-Atom"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nv"&gt;J&lt;/span&gt;                           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;复数常量，也可以用complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;来创建&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;oct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;将十进制数转化为十六进制、八进制、二进制表示的“字符串”&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;将字符串转化为整数，base为进制数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="s s-Atom"&gt;x中，有两种整数类型：一般整数（32位）和长整数（无穷精度）。可以用l或L结尾，迫使一般整数成为长整数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;-inf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;nan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;无穷大&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;无穷小&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;非数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 数字的表达式操作符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;yield&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;                                      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;生成器函数发送协议&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lambda&lt;/span&gt; &lt;span class="nn"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;expression&lt;/span&gt;                      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;生成匿名函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;y&lt;/span&gt; &lt;span class="s s-Atom"&gt;else&lt;/span&gt; &lt;span class="s s-Atom"&gt;z&lt;/span&gt;                                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;三元选择表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;and&lt;/span&gt; &lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;or&lt;/span&gt; &lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;逻辑与、逻辑或、逻辑非&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;y&lt;/span&gt;                           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;成员对象测试&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;y&lt;/span&gt;                           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;对象实体测试&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&amp;lt;=y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt;             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;大小比较，集合子集或超集值相等性操作符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;                                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Python中允许连续比较&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&amp;amp;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x^y&lt;/span&gt;                                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;位或、位与、位异或&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&amp;lt;&amp;lt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&amp;gt;&amp;gt;y&lt;/span&gt;                                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;位操作：x左移、右移y位&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;+&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;//&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;%, **                        # 真除法、floor除法：返回不大于真除法结果的整数值、取余、幂运算&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;~x&lt;/span&gt;                                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;一元减法、识别、按位求补（取反）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nn"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;索引、分片、调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;强制类型转换&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 整数可以利用bit_length函数测试所占的位数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- repr和str显示格式的区别&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    repr格式：默认的交互模式回显，产生的结果看起来它们就像是代码。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str格式：打印语句，转化成一种对用户更加友好的格式。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 数字相关的模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;math模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Decimal模块&lt;/span&gt;&lt;span class="s s-Atom"&gt;：小数模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;decimal&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;decimal&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;Decimal&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;返回Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="s s-Atom"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;设置全局精度为4&lt;/span&gt; &lt;span class="s s-Atom"&gt;即小数点后边4位&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Fraction模块&lt;/span&gt;&lt;span class="s s-Atom"&gt;：分数模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;fractions&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;Fraction&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;分数类型&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.25&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;分数类型&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="s s-Atom"&gt;接收字符串类型的参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 集合set&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    set是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    set支持union(联合), intersection(交), difference(差)和symmetric difference(对称差集)等数学运算。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    set支持x in set, len(set), for x in set。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    set不记录元素位置或者插入点, 因此不支持indexing, slicing, 或其它类序列的操作&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;                          &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;创建一个数值集合，返回&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;创建一个唯一字符的集合返回&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;和&lt;/span&gt; &lt;span class="s s-Atom"&gt;s的并集&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;和&lt;/span&gt; &lt;span class="s s-Atom"&gt;s的交集&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;–&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;求差集（项在t中&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;但不在s中）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;^&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symmetric_difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;对称差集（项在t或s中&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;但不会同时出现在二者中）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;增加/删除一个item&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;                         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;利用&lt;/span&gt;&lt;span class="p"&gt;[......]&lt;/span&gt;&lt;span class="s s-Atom"&gt;更新s集合&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;                          &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;集合中是否存在某个值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;测试是否&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="s s-Atom"&gt;中的每一个元素都在&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;中&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;issuperset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;测试是否&lt;/span&gt; &lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;中的每一个元素都在&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="s s-Atom"&gt;中&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;该功能与set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;discard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;删除s中x&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;清空s&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;x**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;集合解析，结果：&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;                          &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;集合解析，结果：&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;一个冻结&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;不可变&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;的含有&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="s s-Atom"&gt;到4的个整型数的集合&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 集合frozenset，不可变对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    set是可变对象，即不存在hash值，不能作为字典的键值。同样的还有list等(tuple是可以作为字典key的)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    frozenset是不可变对象，即存在hash值，可作为字典的键值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    frozenset对象没有add、remove等方法，但有union/intersection/difference等方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;set是不可哈希类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;          &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;ok，将set变为frozenset，可哈希&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 布尔类型bool&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;bool&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;bool类型属于整型，所以返回True&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;True&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;True&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;输出&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 动态类型简介&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    变量名通过引用，指向对象。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    Python中的“类型”属于对象，而不是变量，每个对象都包含有头部信息，比如&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;类型标示符&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;引用计数器&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;等&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#共享引用及在原处修改：对于可变对象，要注意尽量不要共享引用！&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#共享引用和相等测试：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt;            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回False&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt;           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回True，共享引用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#增强赋值和共享引用：普通+号会生成新的对象，而增强赋值+=会在原处修改&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="s s-Atom"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 常见字符串常量和表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;&amp;#39;&lt;/span&gt;                                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;空字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;spam’s&amp;quot;&lt;/span&gt;                            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;双引号和单引号相同&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;s\np\ta\x00m&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;                      # 转义字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    S = &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;spam&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;                          # 三重引号字符串，一般用于函数说明&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    S = r&amp;#39;\temp&amp;#39;                            # Raw字符串，不会进行转义，抑制转义&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    S = b&amp;#39;Spam&amp;#39;                             # Python3中的字节字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    S = u&amp;#39;spam&amp;#39;                             # Python2.6中的Unicode字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    s1+s2, s1*3, s[i], s[i:j], len(s)       # 字符串操作&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;#39;a %s parrot&amp;#39; % &amp;#39;kind&amp;#39;                  # 字符串格式化表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;#39;a {1} {0} parrot&amp;#39;.format(&amp;#39;kind&amp;#39;, &amp;#39;red&amp;#39;)# 字符串格式化方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for x in s: print(x)                    # 字符串迭代，成员关系&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    [x*2 for x in s]                        # 字符串列表解析&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;#39;,&amp;#39;.join([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;])               # 字符串输出，结果：a,b,c&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 内置str处理函数：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1 = &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;stringobject&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.upper(); str1.lower(); str1.swapcase(); str1.capitalize(); str1.title()        # 全部大写，全部小写、大小写转换，首字母大写，每个单词的首字母都大写&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.ljust(width)                       # 获取固定长度，左对齐，右边不够用空格补齐&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.rjust(width)                       # 获取固定长度，右对齐，左边不够用空格补齐&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.center(width)                      # 获取固定长度，中间对齐，两边不够用空格补齐&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.zfill(width)                       # 获取固定长度，右对齐，左边不足用0补齐&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.find(&amp;#39;t&amp;#39;,start,end)                # 查找字符串，可以指定起始及结束位置搜索&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.rfind(&amp;#39;t&amp;#39;)                         # 从右边开始查找字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.count(&amp;#39;t&amp;#39;)                         # 查找字符串出现的次数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    #上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.replace(&amp;#39;old&amp;#39;,&amp;#39;new&amp;#39;)               # 替换函数，替换old为new，参数中可以指定maxReplaceTimes，即替换指定次数的old为new&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.strip();                           # 默认删除空白符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.strip(&amp;#39;d&amp;#39;);                        # 删除str1字符串中开头、结尾处，位于 d 删除序列的字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.lstrip();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.lstrip(&amp;#39;d&amp;#39;);                       # 删除str1字符串中开头处，位于 d 删除序列的字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.rstrip();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.rstrip(&amp;#39;d&amp;#39;)                        # 删除str1字符串中结尾处，位于 d 删除序列的字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.startswith(&amp;#39;start&amp;#39;)                # 是否以start开头&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.endswith(&amp;#39;end&amp;#39;)                    # 是否以end结尾&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str1.isalnum(); str1.isalpha(); str1.isdigit(); str1.islower(); str1.isupper()      # 判断字符串是否全为字符、数字、小写、大写&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 三重引号编写多行字符串块，并且在代码折行处嵌入换行字符\n&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    mantra = &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;hello&lt;/span&gt; &lt;span class="s s-Atom"&gt;world&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;hello&lt;/span&gt; &lt;span class="s s-Atom"&gt;python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;hello&lt;/span&gt; &lt;span class="s s-Atom"&gt;my&lt;/span&gt; &lt;span class="s s-Atom"&gt;friend&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # mantra为&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;hello&lt;/span&gt; &lt;span class="s s-Atom"&gt;world&lt;/span&gt; &lt;span class="s s-Atom"&gt;\n&lt;/span&gt; &lt;span class="s s-Atom"&gt;hello&lt;/span&gt; &lt;span class="s s-Atom"&gt;python&lt;/span&gt; &lt;span class="s s-Atom"&gt;\n&lt;/span&gt; &lt;span class="s s-Atom"&gt;hello&lt;/span&gt; &lt;span class="s s-Atom"&gt;my&lt;/span&gt; &lt;span class="s s-Atom"&gt;friend&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 索引和分片：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    S[0], S[len(S)–1], S[-1]                # 索引&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    S[1:3], S[1:], S[:-1], S[1:10:2]        # 分片，第三个参数指定步长，如`S[1:10:2]`是从1位到10位没隔2位获取一个字符。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 字符串转换工具：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    int(&amp;#39;42&amp;#39;), str(42)                      # 返回(42, &amp;#39;42&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    float(&amp;#39;4.13&amp;#39;), str(4.13)                # 返回(4.13, &amp;#39;4.13&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    ord(&amp;#39;s&amp;#39;), chr(115)                      # 返回(115, &amp;#39;s&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    int(&amp;#39;1001&amp;#39;, 2)                          # 将字符串作为二进制数字，转化为数字，返回9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    bin(13), oct(13), hex(13)               # 将整数转化为二进制/八进制/十六进制字符串，返回(&amp;#39;0b1101&amp;#39;, &amp;#39;015&amp;#39;, &amp;#39;0xd&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 另类字符串连接&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    name = &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;wang&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;hong&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;                    # 单行，name = &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;wanghong&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    name = &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;wang&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; \&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;hong&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;                          # 多行，name = &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;wanghong&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- Python中的字符串格式化实现1--字符串格式化表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;基于C语言的&amp;#39;print&amp;#39;模型，并且在大多数的现有的语言中使用。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;通用结构：&lt;/span&gt;&lt;span class="c1"&gt;%[(name)][flag][width].[precision]typecode&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nn"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;在括号中引用期望字典的一项&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;flag：可以是&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;空格（正数前加空白，负数前加-）&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;数字0（零填充）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;width：整个最小域宽度&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;使用*从值中取&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;：给定包括在&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;后面的数字个数（即精度）&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;使用*从值中取&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;typecode：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;this&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="c1"&gt;%d %s bird&amp;quot; % (1, &amp;#39;dead&amp;#39;)                          # 一般的格式化表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;%s---%s---%s&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;% (42, 3.14, [1, 2, 3])                      # 字符串输出：&amp;#39;42---3.14---[1, 2, 3]&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;%d...%6d...%-6d...%06d&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;% (1234, 1234, 1234, 1234)         # 对齐方式及填充：&amp;quot;1234...  1234...1234  ...001234&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.23456789&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;%e | %f | %g&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;% (x, x, x)                                  # 对齐方式：&amp;quot;1.234568e+00 | 1.234568 | 1.23457&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;%6.2f*%-6.2f*%06.2f*%+6.2f&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;% (x, x, x, x)                 # 对齐方式：&amp;#39;  1.23*1.23  *001.23* +1.23&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;%(name1)d---%(name2)s&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;% {&amp;quot;name1&amp;quot;:23, &amp;quot;name2&amp;quot;:&amp;quot;value2&amp;quot;}    # 基于字典的格式化表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;%(name)s is %(age)d&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;% vars()                              # vars()函数调用返回一个字典，包含了所有本函数调用时存在的变量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python中的字符串格式化实现2--字符串格式化调用方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;普通调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;{0}, {1} and {2}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;ham&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;基于位置的调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;{motto} and {pork}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;motto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;pork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;ham&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;基于Key的调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;{motto} and {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;ham&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;motto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;混合调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;添加键&lt;/span&gt; &lt;span class="s s-Atom"&gt;属性&lt;/span&gt; &lt;span class="nf"&gt;偏移量&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;my {1[spam]} runs {0.platform}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;:&amp;#39;laptop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;基于位置的键和属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;{config[spam]} {sys.platform}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;sys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;:&amp;#39;laptop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;基于Key的键和属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;first = {0[0]}, second = {0[1]}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;基于位置的偏移量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;具体格式化&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;{0:e}, {1:.3e}, {2:g}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.14159&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.14159&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.14159&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;输出&amp;#39;3.141590e+00, 3.142e+00, 3.14159&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;{fieldname:format_spec}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(......)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;说明:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        fieldname是指定参数的一个数字或关键字, 后边可跟可选的&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;或&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;成分引用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        format_spec ::=  [[fill]align][sign][#][0][width][][.precision][type]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        fill,        ::=  &amp;lt;any character&amp;gt;              #填充字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        align       ::=  &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;^&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;        #对齐方式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        sign        ::=  &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;-&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;              #符号说明&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        width       ::=  integer                      #字符串宽度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        precision   ::=  integer                      #浮点数精度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        type        ::=  &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;e&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;g&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;G&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;o&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; | &amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;%&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 例子:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;#39;={0:10} = {1:10}&amp;#39;.format(&amp;#39;spam&amp;#39;, 123.456)    # 输出&amp;#39;=spam       =    123.456&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;#39;={0:&amp;gt;10}=&amp;#39;.format(&amp;#39;test&amp;#39;)                    # 输出&amp;#39;=      test=&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;#39;={0:&amp;lt;10}=&amp;#39;.format(&amp;#39;test&amp;#39;)                    # 输出&amp;#39;=test      =&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;#39;={0:^10}=&amp;#39;.format(&amp;#39;test&amp;#39;)                    # 输出&amp;#39;=   test   =&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;#39;{0:X}, {1:o}, {2:b}&amp;#39;.format(255, 255, 255)   # 输出&amp;#39;FF, 377, 11111111&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;#39;My name is {0:{1}}.&amp;#39;.format(&amp;#39;Fred&amp;#39;, 8)       # 输出&amp;#39;My name is Fred    .&amp;#39;  动态指定参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 常用列表常量和操作&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L = [[1, 2], &amp;#39;string&amp;#39;, {}]                        # 嵌套列表&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L = list(&amp;#39;spam&amp;#39;)                                  # 列表初始化&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L = list(range(0, 4))                             # 列表初始化&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    list(map(ord, &amp;#39;spam&amp;#39;))                            # 列表解析&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    len(L)                                            # 求列表长度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.count(value)                                    # 求列表中某个值的个数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.append(obj)                                     # 向列表的尾部添加数据，比如append(2)，添加元素2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.insert(index, obj)                              # 向列表的指定index位置添加数据，index及其之后的数据后移&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.extend(interable)                               # 通过添加iterable中的元素来扩展列表，比如extend([2])，添加元素2，注意和append的区别&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.index(value, [start, [stop]])                   # 返回列表中值value的第一个索引&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.pop([index])                                    # 删除并返回index处的元素，默认为删除并返回最后一个元素&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.remove(value)                                   # 删除列表中的value值，只删除第一次出现的value的值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.reverse()                                       # 反转列表&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L.sort(cmp=None, key=None, reverse=False)         # 排序列表&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = [1, 2, 3], b = a[10:]                         # 注意，这里不会引发IndexError异常，只会返回一个空的列表[]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = [], a += [1]                                  # 这里实在原有列表的基础上进行操作，即列表的id没有改变&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = [], a = a + [1]                               # 这里最后的a要构建一个新的列表，即a的id发生了变化&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 用切片来删除序列的某一段&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = [1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a[1:4] = []                                       # a = [1, 5, 6, 7]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = [0, 1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    del a[::2]                                        # 去除偶数项(偶数索引的)，a = [1, 3, 5, 7]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 常用字典常量和操作&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = {}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = {&amp;#39;spam&amp;#39;:2, &amp;#39;tol&amp;#39;:{&amp;#39;ham&amp;#39;:1}}                   # 嵌套字典&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = dict.fromkeys([&amp;#39;s&amp;#39;, &amp;#39;d&amp;#39;], 8)                  # {&amp;#39;s&amp;#39;: 8, &amp;#39;d&amp;#39;: 8}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = dict(name = &amp;#39;tom&amp;#39;, age = 12)                  # {&amp;#39;age&amp;#39;: 12, &amp;#39;name&amp;#39;: &amp;#39;tom&amp;#39;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = dict([(&amp;#39;name&amp;#39;, &amp;#39;tom&amp;#39;), (&amp;#39;age&amp;#39;, 12)])          # {&amp;#39;age&amp;#39;: 12, &amp;#39;name&amp;#39;: &amp;#39;tom&amp;#39;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = dict(zip([&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;], [&amp;#39;tom&amp;#39;, 12]))       # {&amp;#39;age&amp;#39;: 12, &amp;#39;name&amp;#39;: &amp;#39;tom&amp;#39;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D.keys(); D.values(); D.items()                   # 字典键、值以及键值对&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D.get(key, default)                               # get函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D.update(D_other)                                 # 合并字典，如果存在相同的键值，D_other的数据会覆盖掉D的数据&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D.pop(key, [D])                                   # 删除字典中键值为key的项，返回键值为key的值，如果不存在，返回默认值D，否则异常&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D.popitem()                                       # pop字典中随机的一项（一个键值对）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D.setdefault(k[, d])                              # 设置D中某一项的默认值。如果k存在，则返回D[k]，否则设置D[k]=d，同时返回D[k]。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    del D                                             # 删除字典&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    del D[&amp;#39;key&amp;#39;]                                      # 删除字典的某一项&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    if key in D:   if key not in D:                   # 测试字典键是否存在&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 字典注意事项：（1）对新索引赋值会添加一项（2）字典键不一定非得是字符串，也可以为任何的不可变对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 不可变对象：调用对象自身的任意方法，也不会改变该对象自身的内容，这些方法会创建新的对象并返回。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 字符串、整数、tuple都是不可变对象，dict、set、list都是可变对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D[(1,2,3)] = 2                                    # tuple作为字典的key&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 字典解析&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = {k:8 for k in [&amp;#39;s&amp;#39;, &amp;#39;d&amp;#39;]}                     # {&amp;#39;s&amp;#39;: 8, &amp;#39;d&amp;#39;: 8}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = {k:v for (k, v) in zip([&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;], [&amp;#39;tom&amp;#39;, 12])}       # {&amp;#39;age&amp;#39;: 12, &amp;#39;name&amp;#39;: tom}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 字典的特殊方法__missing__：当查找找不到key时，会执行该方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    class Dict(dict):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        def __missing__(self, key):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            self[key] = []&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            return self[key]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    dct = Dict()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    dct[&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;foo&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;].append(1)    # 这有点类似于collections.defalutdict&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    dct[&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;foo&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]              # [1]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 元组和列表的唯一区别在于元组是不可变对象，列表时可变对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = [1, 2, 3]           # a[1] = 0, OK&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = (1, 2, 3)           # a[1] = 0, Error&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = ([1, 2])            # a[0][1] = 0, OK&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a = [(1, 2)]            # a[0][1] = 0, Error&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 元组的特殊语法: 逗号和圆括号&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = (12)                # 此时D为一个整数 即D = 12&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    D = (12, )              # 此时D为一个元组 即D = (12, )&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 文件基本操作&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    output = open(r&amp;#39;C:\spam&amp;#39;, &amp;#39;w&amp;#39;)          # 打开输出文件，用于写&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    input = open(&amp;#39;data&amp;#39;, &amp;#39;r&amp;#39;)               # 打开输入文件，用于读。打开的方式可以为&amp;#39;w&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;wb&amp;#39;, &amp;#39;rb&amp;#39;, &amp;#39;ab&amp;#39;等&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.read([size])                         # size为读取的长度，以byte为单位&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.readline([size])                     # 读一行，如果定义了size，有可能返回的只是一行的一部分&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.readlines([size])                    # 把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.readable()                           # 是否可读&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.write(str)                           # 把str写到文件中，write()并不会在str后加上一个换行符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.writelines(seq)                      # 把seq的内容全部写到文件中(多行一次性写入)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.writeable()                          # 是否可写&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.close()                              # 关闭文件。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.flush()                              # 把缓冲区的内容写入硬盘&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.fileno()                             # 返回一个长整型的”文件标签“&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.isatty()                             # 文件是否是一个终端设备文件（unix系统中的）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.tell()                               # 返回文件操作标记的当前位置，以文件的开头为原点&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.next()                               # 返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.seek(offset[,whence])                # 将文件打操作标记移到offset的位置。whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.seekable()                           # 是否可以seek&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    fp.truncate([size])                     # 把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for line in open(&amp;#39;data&amp;#39;): &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(line)                         # 使用for语句，比较适用于打开比较大的文件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    open(&amp;#39;f.txt&amp;#39;, encoding = &amp;#39;latin-1&amp;#39;)     # Python3.x Unicode文本文件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    open(&amp;#39;f.bin&amp;#39;, &amp;#39;rb&amp;#39;)                     # Python3.x 二进制bytes文件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 文件对象还有相应的属性：buffer closed encoding errors line_buffering name newlines等&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 其他&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # Python中的真假值含义：1. 数字如果非零，则为真，0为假。 2. 其他对象如果非空，则为真&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 通常意义下的类型分类：1. 数字、序列、映射。 2. 可变类型和不可变类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 赋值语句的形式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    spam = &amp;#39;spam&amp;#39;                          # 基本形式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    spam, ham = &amp;#39;spam&amp;#39;, &amp;#39;ham&amp;#39;              # 元组赋值形式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    [spam, ham] = [&amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;]               # 列表赋值形式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a, b, c, d = &amp;#39;abcd&amp;#39;                    # 序列赋值形式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a, *b, c = &amp;#39;spam&amp;#39;                      # 序列解包形式（Python3.x中才有）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    spam = ham = &amp;#39;no&amp;#39;                      # 多目标赋值运算，涉及到共享引用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    spam += 42                             # 增强赋值，涉及到共享引用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 序列赋值 序列解包&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    [a, b, c] = (1, 2, 3)                  # a = 1, b = 2, c = 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a, b, c, d = &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;spam&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;                    # a = &amp;#39;s&amp;#39;, b = &amp;#39;p&amp;#39;, c = &amp;#39;a&amp;#39;, d = &amp;#39;m&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a, b, c = range(3)                     # a = 0, b = 1, c = 2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a, *b = [1, 2, 3, 4]                   # a = 1, b = [2, 3, 4]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    *a, b = [1, 2, 3, 4]                   # a = [1, 2, 3], b = 4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a, *b, c = [1, 2, 3, 4]                # a = 1, b = [2, 3], c = 4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 带有*时 会优先匹配*之外的变量 如&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    a, *b, c = [1, 2]                      # a = 1, c = 2, b = []&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt; #-- print函数原型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    print(value, ..., sep=&amp;#39; &amp;#39;, end=&amp;#39;\n&amp;#39;, file=sys.stdout, flush=False)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 流的重定向&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    print(&amp;#39;hello world&amp;#39;)                   # 等于sys.stdout.write(&amp;#39;hello world&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    temp = sys.stdout                      # 原有流的保存&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.stdout = open(&amp;#39;log.log&amp;#39;, &amp;#39;a&amp;#39;)      # 流的重定向&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    print(&amp;#39;hello world&amp;#39;)                   # 写入到文件log.log&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.stdout.close()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.stdout = temp                      # 原有流的复原&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- Python中and或or总是返回对象(左边的对象或右边的对象) 且具有短路求值的特性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    1 or 2 or 3                            # 返回 1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    1 and 2 and 3                          # 返回 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- if/else三元表达符（if语句在行内）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    A = 1 if X else 2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    A = 1 if X else (2 if Y else 3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 也可以使用and-or语句（一条语句实现多个if-else）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    result = (a &amp;gt; 20 and &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;big&lt;/span&gt; &lt;span class="s s-Atom"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; or a &amp;gt; 10 and &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;big&lt;/span&gt; &lt;span class="s s-Atom"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; or a &amp;gt; 5 and &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;big&lt;/span&gt; &lt;span class="s s-Atom"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- Python的while语句或者for语句可以带else语句 当然也可以带continue/break/pass语句&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    while a &amp;gt; 1:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        anything&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    else:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        anything&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # else语句会在循环结束后执行，除非在循环中执行了break，同样的还有for语句&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for i in range(5):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        anything&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    else:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        anything&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- for循环的元组赋值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for (a, b) in [(1, 2), (3, 4)]:                   # 最简单的赋值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for ((a, b), c) in [((1, 2), 3), ((4, 5), 6)]:    # 自动解包赋值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for ((a, b), c) in [((1, 2), 3), (&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;XY&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, 6)]:      # 自动解包 a = X, b = Y, c = 6&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for (a, *b) in [(1, 2, 3), (4, 5, 6)]:            # 自动解包赋值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 列表解析语法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    M = [[1,2,3], [4,5,6], [7,8,9]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    res = [sum(row) for row in M]                     # G = [6, 15, 24] 一般的列表解析 生成一个列表&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    res = [c * 2 for c in &amp;#39;spam&amp;#39;]                     # [&amp;#39;ss&amp;#39;, &amp;#39;pp&amp;#39;, &amp;#39;aa&amp;#39;, &amp;#39;mm&amp;#39;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    res = [a * b for a in [1, 2] for b in [4, 5]]     # 多解析过程 返回[4, 5, 8, 10]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    res = [a for a in [1, 2, 3] if a &amp;lt; 2]             # 带判断条件的解析过程&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    res = [a if a &amp;gt; 0 else 0 for a in [-1, 0, 1]]     # 带判断条件的高级解析过程&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 两个列表同时解析：使用zip函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for teama, teamb in zip([&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;Packers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="s s-Atom"&gt;ers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;], [&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;Ravens&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;Patriots&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(teama + &amp;quot;&lt;/span&gt; &lt;span class="s s-Atom"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; + teamb)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 带索引的列表解析：使用enumerate函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for index, team in enumerate([&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;Packers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="s s-Atom"&gt;ers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;Ravens&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;Patriots&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(index, team)                            # 输出0, Packers \n 1, 49ers \n ......&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 生成器表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    G = (sum(row) for row in M)                       # 使用小括号可以创建所需结果的生成器generator object&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(G), next(G), next(G)                         # 输出(6, 15, 24)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    G = {sum(row) for row in M}                       # G = {6, 15, 24} 解析语法还可以生成集合和字典&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    G = {i:sum(M[i]) for i in range(3)}               # G = {0: 6, 1: 15, 2: 24}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 文档字符串:出现在Module的开端以及其中函数或类的开端 使用三重引号字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;module&lt;/span&gt; &lt;span class="s s-Atom"&gt;document&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def func():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;function&lt;/span&gt; &lt;span class="s s-Atom"&gt;document&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    class Employee:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="s s-Atom"&gt;document&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    print(func.__doc__)                # 输出函数文档字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    print(Employee.__doc__)            # 输出类的文档字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 命名惯例:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;以单一下划线开头的变量名&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;不会被from&lt;/span&gt; &lt;span class="s s-Atom"&gt;module&lt;/span&gt; &lt;span class="s s-Atom"&gt;import*等语句导入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;前后有两个下划线的变量名&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nv"&gt;X__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;是系统定义的变量名，对解释器有特殊意义&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;以两个下划线开头但不以下划线结尾的变量名&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;是类的本地&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;私有&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;变量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 列表解析 in成员关系测试 map sorted zip enumerate内置函数等都使用了迭代协议&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;#39;first line&amp;#39; in open(&amp;#39;test.txt&amp;#39;)   # in测试 返回True或False&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    list(map(str.upper, open(&amp;#39;t&amp;#39;)))    # map内置函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sorted(iter([2, 5, 8, 3, 1]))      # sorted内置函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    list(zip([1, 2], [3, 4]))          # zip内置函数 [(1, 3), (2, 4)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- del语句: 手动删除某个变量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    del X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 获取列表的子表的方法:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    x = [1,2,3,4,5,6]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    x[:3]                              # 前3个[1,2,3]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    x[1:5]                             # 中间4个[2,3,4,5]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    x[-3:]                             # 最后3个[4,5,6]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    x[::2]                             # 奇数项[1,3,5]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    x[1::2]                            # 偶数项[2,4,6]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 手动迭代：iter和next&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    L = [1, 2]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    I = iter(L)                        # I为L的迭代器&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    I.next()                           # 返回1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    I.next()                           # 返回2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    I.next()                           # Error:StopIteration&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- Python中的可迭代对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="s s-Atom"&gt;range迭代器&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="s s-Atom"&gt;map、zip和filter迭代器&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="s s-Atom"&gt;字典视图迭代器：D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s s-Atom"&gt;等&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="s s-Atom"&gt;文件类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 函数相关的语句和表达式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    myfunc(&amp;#39;spam&amp;#39;)                     # 函数调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def myfunc():                      # 函数定义&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    return None                        # 函数返回值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    global a                           # 全局变量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    nonlocal x                         # 在函数或其他作用域中使用外层（非全局）变量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    yield x                            # 生成器函数返回&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    lambda                             # 匿名函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- Python函数变量名解析:LEGB原则，即:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;functin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;encloseing&lt;/span&gt; &lt;span class="s s-Atom"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;locals&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;global&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;python&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;说明:以下边的函数maker为例&lt;/span&gt; &lt;span class="s s-Atom"&gt;则相对于action而言&lt;/span&gt; &lt;span class="nv"&gt;X为Local&lt;/span&gt; &lt;span class="nv"&gt;N为Encloseing&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 嵌套函数举例:工厂函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def maker(N):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        def action(X):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            return X ** N&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        return action&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f = maker(2)                       # pass 2 to N&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(3)                               # 9, pass 3 to X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 嵌套函数举例:lambda实例&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def maker(N):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        action = (lambda X: X**N)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        return action&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f = maker(2)                       # pass 2 to N&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(3)                               # 9, pass 3 to X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- nonlocal和global语句的区别&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # nonlocal应用于一个嵌套的函数的作用域中的一个名称 例如:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    start = 100&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def tester(start):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        def nested(label):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            nonlocal start             # 指定start为tester函数内的local变量 而不是global变量start&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            print(label, start)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            start += 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        return nested&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # global为全局的变量 即def之外的变量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def tester(start):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        def nested(label):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            global start               # 指定start为global变量start&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            print(label, start)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            start += 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        return nested    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 函数参数，不可变参数通过“值”传递，可变参数通过“引用”传递&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def f(a, b, c): print(a, b, c)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(1, 2, 3)                         # 参数位置匹配&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(1, c = 3, b = 2)                 # 参数关键字匹配&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def f(a, b=1, c=2): print(a, b, c)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(1)                               # 默认参数匹配&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(1, 2)                            # 默认参数匹配&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(a = 1, c = 3)                    # 关键字参数和默认参数的混合&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # Keyword-Only参数:出现在*args之后 必须用关键字进行匹配&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def keyOnly(a, *b, c): print(&amp;#39;&amp;#39;)   # c就为keyword-only匹配 必须使用关键字c = value匹配&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def keyOnly(a, *, b, c): ......    # b c为keyword-only匹配 必须使用关键字匹配&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def keyOnly(a, *, b = 1): ......   # b有默认值 或者省略 或者使用关键字参数b = value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 可变参数匹配: * 和 **&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def f(*args): print(args)          # 在元组中收集不匹配的位置参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(1, 2, 3)                         # 输出(1, 2, 3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def f(**args): print(args)         # 在字典中收集不匹配的关键字参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(a = 1, b = 2)                    # 输出{&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def f(a, *b, **c): print(a, b, c)  # 两者混合使用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f(1, 2, 3, x=4, y=5)               # 输出1, (2, 3), {&amp;#39;x&amp;#39;:4, &amp;#39;y&amp;#39;:5}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 函数调用时的参数解包: * 和 ** 分别解包元组和字典&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    func(1, *(2, 3))  &amp;lt;==&amp;gt;  func(1, 2, 3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    func(1, **{&amp;#39;c&amp;#39;:3, &amp;#39;b&amp;#39;:2})  &amp;lt;==&amp;gt;  func(1, b = 2, c = 3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    func(1, *(2, 3), **{&amp;#39;c&amp;#39;:3, &amp;#39;b&amp;#39;:2})  &amp;lt;==&amp;gt;  func(1, 2, 3, b = 2, c = 3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 函数属性:(自己定义的)函数可以添加属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def func():.....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    func.count = 1                     # 自定义函数添加属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    print.count = 1                    # Error 内置函数不可以添加属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 函数注解: 编写在def头部行 主要用于说明参数范围、参数类型、返回值类型等&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def func(a:&amp;#39;spam&amp;#39;, b:(1, 10), c:float) -&amp;gt; int :&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(a, b, c)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    func.__annotations__               # {&amp;#39;c&amp;#39;:&amp;lt;class &amp;#39;float&amp;#39;&amp;gt;, &amp;#39;b&amp;#39;:(1, 10), &amp;#39;a&amp;#39;:&amp;#39;spam&amp;#39;, &amp;#39;return&amp;#39;:&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 编写注解的同时 还是可以使用函数默认值 并且注解的位置位于=号的前边&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def func(a:&amp;#39;spam&amp;#39;=&amp;#39;a&amp;#39;, b:(1, 10)=2, c:float=3) -&amp;gt; int :&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(a, b, c)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 匿名函数:lambda&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f = lambda x, y, z : x + y + z     # 普通匿名函数，使用方法f(1, 2, 3)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f = lambda x = 1, y = 1: x + y     # 带默认参数的lambda函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def action(x):                     # 嵌套lambda函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        return (lambda y : x + y)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    f = lambda: a if xxx() else b      # 无参数的lambda函数，使用方法f()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- lambda函数与map filter reduce函数的结合&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    list(map((lambda x: x + 1), [1, 2, 3]))              # [2, 3, 4]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    list(filter((lambda x: x &amp;gt; 0), range(-4, 5)))        # [1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    functools.reduce((lambda x, y: x + y), [1, 2, 3])    # 6&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    functools.reduce((lambda x, y: x * y), [2, 3, 4])    # 24&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 生成器函数:yield VS return&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def gensquare(N):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        for i in range(N):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            yield i** 2                # 状态挂起 可以恢复到此时的状态&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    for i in gensquare(5):             # 使用方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(i, end = &amp;#39; &amp;#39;)            # [0, 1, 4, 9, 16]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    x = gensquare(2)                   # x是一个生成对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(x)                            # 等同于x.__next__() 返回0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(x)                            # 等同于x.__next__() 返回1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(x)                            # 等同于x.__next__() 抛出异常StopIteration&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 生成器表达式:小括号进行列表解析&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    G = (x ** 2 for x in range(3))     # 使用小括号可以创建所需结果的生成器generator object&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(G), next(G), next(G)          # 和上述中的生成器函数的返回值一致&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    #（1）生成器(生成器函数/生成器表达式)是单个迭代对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    G = (x ** 2 for x in range(4))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    I1 = iter(G)                       # 这里实际上iter(G) = G&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(I1)                           # 输出0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(G)                            # 输出1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(I1)                           # 输出4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    #（2）生成器不保留迭代后的结果&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    gen = (i for i in range(4))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    2 in gen                           # 返回True&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    3 in gen                           # 返回True&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    1 in gen                           # 返回False，其实检测2的时候，1已经就不在生成器中了，即1已经被迭代过了，同理2、3也不在了&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 本地变量是静态检测的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    X = 22                             # 全局变量X的声明和定义&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def test():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(X)                       # 如果没有下一语句 则该句合法 打印全局变量X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        X = 88                         # 这一语句使得上一语句非法 因为它使得X变成了本地变量 上一句变成了打印一个未定义的本地变量(局部变量)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        if False:                      # 即使这样的语句 也会把print语句视为非法语句 因为:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            X = 88                     # Python会无视if语句而仍然声明了局部变量X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def test():                        # 改进&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        global X                       # 声明变量X为全局变量&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(X)                       # 打印全局变量X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        X = 88                         # 改变全局变量X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 函数的默认值是在函数定义的时候实例化的 而不是在调用的时候 例子:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def foo(numbers=[]):               # 这里的[]是可变的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        numbers.append(9)    &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(numbers)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    foo()                              # first time, like before, [9]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    foo()                              # second time, not like before, [9, 9]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    foo()                              # third time, not like before too, [9, 9, 9]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 改进:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def foo(numbers=None):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        if numbers is None: numbers = []&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        numbers.append(9)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(numbers)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    # 另外一个例子 参数的默认值为不可变的:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    def foo(count=0):                  # 这里的0是数字, 是不可变的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        count += 1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        print(count)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    foo()                              # 输出1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    foo()                              # 还是输出1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    foo(3)                             # 输出4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    foo()                              # 还是输出1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;数学运算类&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    abs(x)                              # 求绝对值，参数可以是整型，也可以是复数，若参数是复数，则返回复数的模&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    complex([real[, imag]])             # 创建一个复数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    divmod(a, b)                        # 分别取商和余数，注意：整型、浮点型都可以&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    float([x])                          # 将一个字符串或数转换为浮点数。如果无参数将返回0.0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    int([x[, base]])                    # 将一个字符串或浮点数转换为int类型，base表示进制&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    long([x[, base]])                   # 将一个字符串或浮点数转换为long类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    pow(x, y)                           # 返回x的y次幂&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    range([start], stop[, step])        # 产生一个序列，默认从0开始&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    round(x[, n])                       # 四舍五入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sum(iterable[, start])              # 对集合求和&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    oct(x)                              # 将一个数字转化为8进制字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    hex(x)                              # 将一个数字转换为16进制字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    chr(i)                              # 返回给定int类型对应的ASCII字符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    unichr(i)                           # 返回给定int类型的unicode&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    ord(c)                              # 返回ASCII字符对应的整数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    bin(x)                              # 将整数x转换为二进制字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    bool([x])                           # 将x转换为Boolean类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;集合类操作&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    basestring()                        # str和unicode的超类，不能直接调用，可以用作isinstance判断&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    format(value [, format_spec])       # 格式化输出字符串，格式化的参数顺序从0开始，如“I am {0},I like {1}”&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    enumerate(sequence[, start=0])      # 返回一个可枚举的对象，注意它有第二个参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    iter(obj[, sentinel])               # 生成一个对象的迭代器，第二个参数表示分隔符&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    max(iterable[, args...][key])       # 返回集合中的最大值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    min(iterable[, args...][key])       # 返回集合中的最小值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    dict([arg])                         # 创建数据字典&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    list([iterable])                    # 将一个集合类转换为另外一个集合类&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    set()                               # set对象实例化&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    frozenset([iterable])               # 产生一个不可变的set&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    tuple([iterable])                   # 生成一个tuple类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    str([object])                       # 转换为string类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sorted(iterable[, cmp[, key[, reverse]]])             # 集合排序&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        L = [(&amp;#39;b&amp;#39;,2),(&amp;#39;a&amp;#39;,1),(&amp;#39;c&amp;#39;,3),(&amp;#39;d&amp;#39;,4)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        sorted(L, key=lambda x: x[1]), reverse=True)      # 使用Key参数和reverse参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        sorted(L, key=lambda x: (x[0], x[1]))             # 使用key参数进行多条件排序，即如果x[0]相同，则比较x[1]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;逻辑判断&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    all(iterable)                       # 集合中的元素都为真的时候为真，特别的，若为空串返回为True&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    any(iterable)                       # 集合中的元素有一个为真的时候为真，特别的，若为空串返回为False&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    cmp(x, y)                           # 如果x &amp;lt; y ,返回负数；x == y, 返回0；x &amp;gt; y,返回正数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;IO操作&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    file(filename [, mode [, bufsize]]) # file类型的构造函数。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    input([prompt])                     # 获取用户输入，推荐使用raw_input，因为该函数将不会捕获用户的错误输入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    raw_input([prompt])                 # 设置输入，输入都是作为字符串处理&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    open(name[, mode[, buffering]])     # 打开文件，与file有什么不同？推荐使用open&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;其他&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    callable(object)                    # 检查对象object是否可调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    classmethod(func)                   # 用来说明这个func是个类方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    staticmethod(func)                  # 用来说明这个func为静态方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    dir([object])                       # 不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    help(obj)                           # 返回obj的帮助信息&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    eval(expression)                    # 计算表达式expression的值，并返回&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    exec(str)                           # 将str作为Python语句执行&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    execfile(filename)                  # 用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    filter(function, iterable)          # 构造一个序列，等价于[item for item in iterable if function(item)]，function返回值为True或False的函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        list(filter(bool, range(-3, 4)))# 返回[-3, -2, -1, 1, 2, 3], 没有0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    hasattr(object, name)               # 判断对象object是否包含名为name的特性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    getattr(object, name [, defalut])   # 获取一个类的属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    setattr(object, name, value)        # 设置属性值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    delattr(object, name)               # 删除object对象名为name的属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    globals()                           # 返回一个描述当前全局符号表的字典&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    hash(object)                        # 如果对象object为哈希表类型，返回对象object的哈希值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    id(object)                          # 返回对象的唯一标识，一串数字&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    isinstance(object, classinfo)       # 判断object是否是class的实例&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        isinstance(1, int)              # 判断是不是int类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        isinstance(1, (int, float))     # isinstance的第二个参数接受一个元组类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    issubclass(class, classinfo)        # 判断class是否为classinfo的子类&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    locals()                            # 返回当前的变量列表&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    map(function, iterable, ...)        # 遍历每个元素，执行function操作&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        list(map(abs, range(-3, 4)))    # 返回[3, 2, 1, 0, 1, 2, 3]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    next(iterator[, default])           # 类似于iterator.next()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    property([fget[, fset[, fdel[, doc]]]])           # 属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    reduce(function, iterable[, initializer])         # 合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        def add(x,y):return x + y &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        reduce(add, range(1, 11))                     # 返回55 (注:1+2+3+4+5+6+7+8+9+10 = 55)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        reduce(add, range(1, 11), 20)                 # 返回75&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    reload(module)                      # 重新加载模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    repr(object)                        # 将一个对象变幻为可打印的格式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    slice(start, stop[, step])          # 产生分片对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    type(object)                        # 返回该object的类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    vars([object])                      # 返回对象的变量名、变量值得字典&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        a = Class();                    # Class为一个空类&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        a.name = &amp;#39;qi&amp;#39;, a.age = 9&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        vars(a)                         # {&amp;#39;name&amp;#39;:&amp;#39;qi&amp;#39;, &amp;#39;age&amp;#39;:9}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    zip([iterable, ...])                # 返回对应数组&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        list(zip([1, 2, 3], [4, 5, 6])) # [(1, 4), (2, 5), (3, 6)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        a = [1, 2, 3],  b = [&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        z = zip(a, b)                   # 压缩：[(1, &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;), (2, &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;), (3, &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        zip(*z)                         # 解压缩：[(1, 2, 3), (&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;c&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    unicode(string, encoding, errors)   # 将字符串string转化为unicode形式，string为encoded string。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- Python模块搜索路径:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;程序的主目录&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH目录&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;标准链接库目录&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;任何&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;pth文件的内容&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;#-- 查看全部的模块搜索路径&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    import sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.path&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.argv                            # 获得脚本的参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.builtin_module_names            # 查找内建模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.platform                        # 返回当前平台 出现如： &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;win32&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;linux&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;darwin&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;等&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.modules                         # 查找已导入的模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.modules.keys()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.stdout                          # stdout 和 stderr 都是类文件对象，但是它们都是只写的。它们都没有 read 方法，只有 write 方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    sys.stdout.write(&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;stderr&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;stdin&lt;/span&gt;   &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 模块的使用代码&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;module1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;module2&lt;/span&gt;             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;导入module1&lt;/span&gt; &lt;span class="s s-Atom"&gt;使用module1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;module1&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;printer&lt;/span&gt;         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;导入module1中的printer变量&lt;/span&gt; &lt;span class="nf"&gt;使用printer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;module1&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;导入module1中的全部变量&lt;/span&gt; &lt;span class="s s-Atom"&gt;使用不必添加module1前缀&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 重载模块reload: 这是一个内置函数 而不是一条语句&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;imp&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;reload&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 模块的包导入:使用点号(.)而不是路径(dir1\dir2)进行导入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;dir1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;dir2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;mod&lt;/span&gt;                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;d导入包&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;目录&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;dir1中的包dir2中的mod模块&lt;/span&gt; &lt;span class="s s-Atom"&gt;此时dir1必须在Python可搜索路径中&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;dir1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;dir2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;mod&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;from语法的包导入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- __init__.py包文件:每个导入的包中都应该包含这么一个文件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    该文件可以为空&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    首次进行包导入时 该文件会自动执行&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    高级功能:在该文件中使用__all__列表来定义包(目录)以from*的形式导入时 需要导入什么&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 包相对导入:使用点号(.) 只能使用from语句&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;spam&lt;/span&gt;                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;导入当前目录下的spam模块（错误:&lt;/span&gt; &lt;span class="s s-Atom"&gt;当前目录下的模块&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;直接导入即可）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;spam&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;              &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;导入当前目录下的spam模块的name属性（错误:&lt;/span&gt; &lt;span class="s s-Atom"&gt;当前目录下的模块&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;直接导入即可，不用加&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;spam&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;导入当前目录的父目录下的spam模块&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 包相对导入与普通导入的区别&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;string&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;这里导入的string模块为sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;path路径上的&lt;/span&gt; &lt;span class="nf"&gt;而不是本目录下的string模块&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;如果存在也不是&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;string&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;这里导入的string模块为本目录下的&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;不存在则导入失败&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;而不是sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;path路径上的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 模块数据隐藏:最小化from*的破坏&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;                                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;变量名前加下划线可以防止from*导入时该变量名被复制出去&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;x1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;x2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;使用__all__列表指定from*&lt;/span&gt;&lt;span class="nf"&gt;时复制出去的变量名&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;变量名在列表中为字符串形式&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 可以使用__name__进行模块的单元测试:当模块为顶层执行文件时值为&amp;#39;__main__&amp;#39; 当模块被导入时为模块名&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;__main__&amp;#39;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;doSomething&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;模块属性中还有其他属性，例如：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;doc__&lt;/span&gt;                             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;模块的说明文档&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;file__&lt;/span&gt;                            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;模块文件的文件名，包括全路径&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;name__&lt;/span&gt;                            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;主文件或者被导入文件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;package__&lt;/span&gt;                         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;模块所在的包&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- import语句from语句的as扩展&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;modulename&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;modulename&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;attrname&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 得到模块属性的几种方法 假设为了得到name属性的值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 最普通的类&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;C1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;C2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;C3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;数据属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;函数属性:构造函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;              &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;函数属性:析构函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;goodbey &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;I1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;C1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python的类没有基于参数的函数重载&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;FirstClass&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;此时类中只有一个test函数&lt;/span&gt; &lt;span class="nf"&gt;即后者test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;它覆盖掉前者带参数的test函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 子类扩展超类: 尽量调用超类的方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;giveRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;bonus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;.10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;pay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;pay*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s s-Atom"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s s-Atom"&gt;bonus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;不好的方式&lt;/span&gt; &lt;span class="s s-Atom"&gt;复制粘贴超类代码&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nv"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;giveRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s s-Atom"&gt;bonus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;好的方式&lt;/span&gt; &lt;span class="s s-Atom"&gt;尽量调用超类方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 类内省工具&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;bob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;bob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;class__&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;Person&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;bob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;class__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;name__&lt;/span&gt;              &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;Person&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;bob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;dict__&lt;/span&gt;                        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;pay&amp;#39;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;name&amp;#39;:&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;job&amp;#39;:&amp;#39;Manager&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 返回1中 数据属性spam是属于类 而不是对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;I1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;C1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nv"&gt;I2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;C2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;tom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;此时I1和I2的spam都为42&lt;/span&gt; &lt;span class="s s-Atom"&gt;但是都是返回的C1的spam属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;C1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;                        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;此时I1和I2的spam都为24&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;I1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;                         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;此时I1新增自有属性spam&lt;/span&gt; &lt;span class="s s-Atom"&gt;值为2&lt;/span&gt; &lt;span class="nv"&gt;I2和C1的spam还都为24&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 类方法调用的两种方式&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 抽象超类的实现方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;某个函数中调用未定义的函数&lt;/span&gt; &lt;span class="s s-Atom"&gt;子类中定义该函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;本类中不定义action函数&lt;/span&gt; &lt;span class="s s-Atom"&gt;所以使用delegate函数时就会出错&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;定义action函数&lt;/span&gt; &lt;span class="s s-Atom"&gt;但是返回异常&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;action must be defined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;上述的两种方法还都可以定义实例对象&lt;/span&gt; &lt;span class="s s-Atom"&gt;实际上可以利用@装饰器语法生成不能定义的抽象超类&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;abc&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;abstractmethod&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;metaclass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;@abstractmethod&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回&lt;/span&gt; &lt;span class="nv"&gt;TypeError&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Can&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;t instantiate abstract class Super with abstract methods action&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- # OOP和继承: &amp;quot;is-a&amp;quot;的关系&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class A(B):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    a = A()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    isinstance(a, B)                    # 返回True, A是B的子类 a也是B的一种&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # OOP和组合: &amp;quot;has-a&amp;quot;的关系&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # OOP和委托: &amp;quot;包装&amp;quot;对象 在Python中委托通常是以&amp;quot;__getattr__&amp;quot;钩子方法实现的, 这个方法会拦截对不存在属性的读取&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 包装类(或者称为代理类)可以使用__getattr__把任意读取转发给被包装的对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class wrapper:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __init__(self, object):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.wrapped = object&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __getattr(self, attrname):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            print(&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;Trace&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;, attrname)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            return getattr(self.wrapped, attrname)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 注:这里使用getattr(X, N)内置函数以变量名字符串N从包装对象X中取出属性 类似于X.__dict__[N]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    x = wrapper([1, 2, 3])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    x.append(4)                         # 返回 &amp;quot;Trace: append&amp;quot; [1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    x = wrapper({&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2})&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    list(x.keys())                      # 返回 &amp;quot;Trace: keys&amp;quot; [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- 类的伪私有属性:使用__attr&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class C1:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __init__(self, name):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.__name = name          # 此时类的__name属性为伪私有属性 原理 它会自动变成self._C1__name = name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __str__(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            return &amp;#39;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;%s&amp;#39; % self.__name&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;C1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;tom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回&lt;/span&gt; &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;tom&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;jeey&amp;#39;&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;这里无法访问&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;name为伪私有属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="nv"&gt;C1__name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;jeey&amp;#39;&lt;/span&gt;                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;这里可以修改成功&lt;/span&gt; &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;jeey&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 类方法是对象:无绑定类方法对象 / 绑定实例方法对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Spam&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;selfless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;doit&lt;/span&gt;                        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;类的绑定方法对象&lt;/span&gt; &lt;span class="s s-Atom"&gt;实例&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s s-Atom"&gt;函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Spam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;doit&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;类的无绑定方法对象&lt;/span&gt; &lt;span class="s s-Atom"&gt;类名&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s s-Atom"&gt;函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Spam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;selfless&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;类的无绑定方法是函数&lt;/span&gt; &lt;span class="s s-Atom"&gt;在3&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="s s-Atom"&gt;之前无效&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 获取对象信息: 属性和方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                              &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;使用dir函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;测试是否有x属性或方法&lt;/span&gt; &lt;span class="s s-Atom"&gt;即a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;x是否已经存在&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;设置属性或方法&lt;/span&gt; &lt;span class="s s-Atom"&gt;等同于a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;获取属性或方法&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果属性不存在&lt;/span&gt; &lt;span class="s s-Atom"&gt;则返回默认值0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#这里有个小技巧，setattr可以设置一个不能访问到的属性，即只能用getattr获取&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can&amp;#39;t touch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;这里的属性名带有空格，不能直接访问&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can&amp;#39;t touch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;但是可以用getattr获取&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 为类动态绑定属性或方法: MethodType方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;一般创建了一个class的实例后&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;可以给该实例绑定任何属性和方法&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;这就是动态语言的灵活性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;Michael&amp;#39;&lt;/span&gt;                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;动态给实例绑定一个属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;定义一个函数作为实例方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;types&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;MethodType&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;set_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;MethodType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;set_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;给实例绑定一个方法&lt;/span&gt; &lt;span class="s s-Atom"&gt;类的其他实例不受此影响&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;调用实例方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;set_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;MethodType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;set_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;为类绑定一个方法&lt;/span&gt; &lt;span class="s s-Atom"&gt;类的所有实例都拥有该方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 多重继承: &amp;quot;混合类&amp;quot;, 搜索方式&amp;quot;从下到上 从左到右 广度优先&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 类的继承和子类的初始化&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="s s-Atom"&gt;子类定义了__init__方法时，若未显示调用基类__init__方法，python不会帮你调用。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="s s-Atom"&gt;子类未定义__init__方法时，python会自动帮你调用首个基类的__init__方法，注意是首个。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="s s-Atom"&gt;子类显示调用基类的初始化函数：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;FooParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;I\&amp;#39;m&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            print(&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;Parent&lt;/span&gt;&lt;span class="s s-Atom"&gt;:a=&amp;#39; + str(a))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def bar(self, message):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            print(message + &amp;#39;&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;Parent&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class FooChild(FooParent):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __init__(self, a):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            FooParent.__init__(self, a)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            print(&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;Child&lt;/span&gt;&lt;span class="s s-Atom"&gt;:a=&amp;#39; + str(a))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def bar(self, message):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            FooParent.bar(self, message)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            print(message + &amp;#39;&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;Child&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    fooChild = FooChild(10)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    fooChild.bar(&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;HelloWorld&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- #实例方法 / 静态方法 / 类方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class Methods:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def imeth(self, x): print(self, x)      # 实例方法：传入的是实例和数据，操作的是实例的属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def smeth(x): print(x)                  # 静态方法：只传入数据 不传入实例，操作的是类的属性而不是实例的属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def cmeth(cls, x): print(cls, x)        # 类方法：传入的是类对象和数据&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        smeth = staticmethod(smeth)             # 调用内置函数，也可以使用@staticmethod&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        cmeth = classmethod(cmeth)              # 调用内置函数，也可以使用@classmethod&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    obj = Methods()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    obj.imeth(1)                                # 实例方法调用 &amp;lt;__main__.Methods object...&amp;gt; 1&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    Methods.imeth(obj, 2)                       # &amp;lt;__main__.Methods object...&amp;gt; 2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    Methods.smeth(3)                            # 静态方法调用 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    obj.smeth(4)                                # 这里可以使用实例进行调用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    Methods.cmeth(5)                            # 类方法调用 &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Methods&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;&amp;gt; 5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    obj.cmeth(6)                                # &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Methods&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;&amp;gt; 6&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- 函数装饰器:是它后边的函数的运行时的声明 由@符号以及后边紧跟的&amp;quot;元函数&amp;quot;(metafunction)组成&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        @staticmethod&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def smeth(x): print(x)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 等同于:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def smeth(x): print(x)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        smeth = staticmethod(smeth)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 同理&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        @classmethod&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def cmeth(cls, x): print(x)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 等同于&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def cmeth(cls, x): print(x)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        cmeth = classmethod(cmeth)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- 类修饰器:是它后边的类的运行时的声明 由@符号以及后边紧跟的&amp;quot;元函数&amp;quot;(metafunction)组成&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def decorator(aClass):.....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        @decorator&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        class C:....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 等同于:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        class C:....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        C = decorator(C)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- 限制class属性: __slots__属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class Student:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        __slots__ = (&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;)             # 限制Student及其实例只能拥有name和age属性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # __slots__属性只对当前类起作用, 对其子类不起作用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # __slots__属性能够节省内存&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # __slots__属性可以为列表list，或者元组tuple&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- 类属性高级话题: @property&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 假设定义了一个类:C，该类必须继承自object类，有一私有变量_x&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class C(object):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __init__(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.__x = None&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 第一种使用属性的方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def getx(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            return self.__x&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def setx(self, value):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.__x = value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def delx(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            del self.__x&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        x = property(getx, setx, delx, &amp;#39;&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # property函数原型为property(fget=None,fset=None,fdel=None,doc=None)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 使用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    c = C()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    c.x = 100                         # 自动调用setx方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    y = c.x                           # 自动调用getx方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    del c.x                           # 自动调用delx方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 第二种方法使用属性的方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        @property&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def x(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            return self.__x&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        @x.setter&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def x(self, value):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;           self.__x = value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        @x.deleter&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def x(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;           del self.__x&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 使用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    c = C()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    c.x = 100                         # 自动调用setter方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    y = c.x                           # 自动调用x方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    del c.x                           # 自动调用deleter方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;#-- 定制类: 重写类的方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # (1)__str__方法、__repr__方法: 定制类的输出字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # (2)__iter__方法、next方法: 定制类的可迭代性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class Fib(object):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __init__(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.a, self.b = 0, 1     # 初始化两个计数器a，b&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __iter__(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            return self               # 实例本身就是迭代对象，故返回自己&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def next(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.a, self.b = self.b, self.a + self.b&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            if self.a &amp;gt; 100000:       # 退出循环的条件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;                raise StopIteration()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            return self.a             # 返回下一个值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    for n in Fib():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        print(n)                      # 使用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # (3)__getitem__方法、__setitem__方法: 定制类的下标操作[] 或者切片操作slice&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class Indexer(object):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __init__(self):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.data = {}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __getitem__(self, n):             # 定义getitem方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            print(&amp;#39;&lt;/span&gt;&lt;span class="nn"&gt;getitem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;, n)                &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            return self.data[n]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __setitem__(self, key, value):    # 定义setitem方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            print(&amp;#39;&lt;/span&gt;&lt;span class="nn"&gt;setitem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s s-Atom"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;.format(key, value))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            self.data[key] = value&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    test = Indexer()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    test[0] = 1;   test[3] = &amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;              # 调用setitem方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    print(test[0])                            # 调用getitem方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # (4)__getattr__方法: 定制类的属性操作&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    class Student(object):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        def __getattr__(self, attr):          # 定义当获取类的属性时的返回值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;            if attr==&amp;#39;age&amp;#39;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;                return 25                     # 当获取age属性时返回25&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;        raise AttributeError(&amp;#39;object&lt;/span&gt; &lt;span class="s s-Atom"&gt;has&lt;/span&gt; &lt;span class="s s-Atom"&gt;no&lt;/span&gt; &lt;span class="nn"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;%s&amp;#39; % attr)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;注意:&lt;/span&gt; &lt;span class="s s-Atom"&gt;只有当属性不存在时&lt;/span&gt; &lt;span class="s s-Atom"&gt;才会调用该方法&lt;/span&gt; &lt;span class="s s-Atom"&gt;且该方法默认返回None&lt;/span&gt; &lt;span class="s s-Atom"&gt;需要在函数最后引发异常&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;age&lt;/span&gt;                                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;s中age属性不存在&lt;/span&gt; &lt;span class="s s-Atom"&gt;故调用__getattr__方法&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回25&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;call__方法:&lt;/span&gt; &lt;span class="s s-Atom"&gt;定制类的&amp;#39;可调用&amp;#39;性&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;也可以带参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;Calling......&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;s变成了可调用的&lt;/span&gt; &lt;span class="s s-Atom"&gt;也可以带参数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;测试s的可调用性&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回True&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s s-Atom"&gt;len__方法：求类的长度&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 动态创建类type()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;一般创建类&lt;/span&gt; &lt;span class="s s-Atom"&gt;需要在代码中提前定义&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;name=&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;Hello, %s.&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;% name)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;world&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Hello是一个type类型&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;h是一个Hello类型&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;动态类型语言中&lt;/span&gt; &lt;span class="s s-Atom"&gt;类可以动态创建&lt;/span&gt; &lt;span class="s s-Atom"&gt;type函数可用于创建新类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;name=&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;先定义函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;Hello, %s.&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;% name)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;Hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="nf"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;创建Hello类&lt;/span&gt; &lt;span class="s s-Atom"&gt;type原型:&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;此时的h和上边的h一致&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- #捕获异常: &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nn"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nn"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;捕获所有的异常&lt;/span&gt; &lt;span class="s s-Atom"&gt;等同于except&lt;/span&gt; &lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;except&lt;/span&gt; &lt;span class="nn"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                          &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;捕获指定的异常&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;except&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;捕获指定的异常和额外的数据&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;实例&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;except&lt;/span&gt; &lt;span class="s s-Atom"&gt;name4&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nn"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果没有发生异常&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nn"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                              &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;总会执行的部分&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;引发异常:&lt;/span&gt; &lt;span class="nf"&gt;raise子句&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="s s-Atom"&gt;instance&lt;/span&gt; &lt;span class="s s-Atom"&gt;of&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;make&lt;/span&gt; &lt;span class="s s-Atom"&gt;and&lt;/span&gt; &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="s s-Atom"&gt;instance&lt;/span&gt; &lt;span class="s s-Atom"&gt;of&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;IndexError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;raise&lt;/span&gt;                                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;reraise&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;most&lt;/span&gt; &lt;span class="s s-Atom"&gt;recent&lt;/span&gt; &lt;span class="s s-Atom"&gt;exception&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python3.x中的异常链: raise exception from otherException&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;except&lt;/span&gt; &lt;span class="nv"&gt;Exception&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;Bad&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- assert子句: assert &amp;lt;test&amp;gt;, &amp;lt;data&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;assert&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;x must be negative&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- with/as环境管理器:作为常见的try/finally用法模式的替代方案&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;with&lt;/span&gt; &lt;span class="s s-Atom"&gt;expression&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="s s-Atom"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;expression&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="s s-Atom"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;例子:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;with&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;line&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;等同于:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;myfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nn"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;line&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nn"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 用户自定义异常: class Bad(Exception):.....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    Exception超类 / except基类即可捕获到其所有子类&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    Exception超类有默认的打印消息和状态 当然也可以定制打印显示:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;MyBad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;定制的打印消息&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nn"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;MyBad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;except&lt;/span&gt; &lt;span class="nv"&gt;MyBad&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 用户定制异常数据&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;FormatError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;line&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;line&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nn"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;FormatError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;test.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;except&lt;/span&gt; &lt;span class="nv"&gt;FormatError&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;Error at &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;用户定制异常行为&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;方法&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:以记录日志为例&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;FormatError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;formaterror.txt&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;line&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;line&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;logfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;Error at &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nn"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;FormatError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;test.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;except&lt;/span&gt; &lt;span class="nv"&gt;FormatError&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 关于sys.exc_info:允许一个异常处理器获取对最近引发的异常的访问&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nn"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="p"&gt;......&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nn"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;此时sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;返回一个元组&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;正在处理的异常的异常类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;引发的异常的实例&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;堆栈信息&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 异常层次&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;BaseException&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;SystemExit&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;KeyboardInterrupt&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;GeneratorExit&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;StopIteration&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;ArithmeticError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;AssertionError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;AttributeError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;BufferError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;EOFError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;ImportError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;LookupError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;MemoryError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;NameError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;OSError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;ReferenceError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;RuntimeError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;SyntaxError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;SystemError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;TypeError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;ValueError&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;+--&lt;/span&gt; &lt;span class="nv"&gt;Warning&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Unicode和字节字符串---Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python的字符串类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Python2.x&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="s s-Atom"&gt;str表示8位文本和二进制数据&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="s s-Atom"&gt;unicode表示宽字符Unicode文本&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Python3.x&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="s s-Atom"&gt;str表示Unicode文本（8位或者更宽）&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="s s-Atom"&gt;bytes表示不可变的二进制数据&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="s s-Atom"&gt;bytearray是一种可变的bytes类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 字符编码方法&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;ASCII&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;一个字节，只包含英文字符，0到127，共128个字符，利用函数可以进行字符和数字的相互转换&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;字符a的ASCII码为97，所以这里返回97&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;和上边的过程相反，返回字符&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Latin-1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;一个字节，包含特殊字符，0到255，共256个字符，相当于对ASCII码的扩展&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;196&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回一个特殊字符：Ä&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Unicode&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;宽字符，一个字符包含多个字节，一般用于亚洲的字符集，比如中文有好几万字&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;UTF-8&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;                   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;可变字节数，小于128的字符表示为单个字节，128到0X7FF之间的代码转换为两个字节，0X7FF以上的代码转换为3或4个字节&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;注意：可以看出来，ASCII码是Latin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;和UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="s s-Atom"&gt;的一个子集&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;注意：utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="s s-Atom"&gt;是unicode的一种实现方式，unicode、gbk、gb2312是编码字符集&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 查看Python中的字符串编码名称，查看系统的编码&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;encodings&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;platform&lt;/span&gt;                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;win64&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回当前系统平台的编码类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回object占有的bytes的大小&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- 源文件字符集编码声明: 添加注释来指定想要的编码形式 从而改变默认值 注释必须出现在脚本的第一行或者第二行&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;说明：其实这里只会检查#和coding:utf-8，其余的字符都是为了美观加上的&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="s s-Atom"&gt;*&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="nn"&gt;coding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="s s-Atom"&gt;*&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;coding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- #编码: 字符串 --&amp;gt; 原始字节       #解码: 原始字节 --&amp;gt; 字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python3.x中的字符串应用&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;构建一个str对象，不可变对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;...&amp;#39;&lt;/span&gt;                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;构建一个bytes对象，不可变对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;返回&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;返回&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        xxxx&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        yyyy&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;\nxxxx\nyyyy\n&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;编码，将str字符串转化为其raw&lt;/span&gt; &lt;span class="s s-Atom"&gt;bytes形式：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;编码例子：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;egg&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;egg&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;egg&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;解码，将raw&lt;/span&gt; &lt;span class="s s-Atom"&gt;bytes字符串转化为str形式：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;bytes_or_buffer&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="s s-Atom"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;解码例子：&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;#39;spam&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;，不带编码的str调用，结果为打印该bytes对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;spam&amp;#39;，带编码的str调用，结果为转化该bytes对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python2.x的编码问题&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;u&amp;#39;汉&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;print&lt;/span&gt; &lt;span class="nf"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;u&amp;#39;\xba\xba&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;print&lt;/span&gt; &lt;span class="nf"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;\xc2\xba\xc2\xba&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;u2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;print&lt;/span&gt; &lt;span class="nf"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;u2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;u&amp;#39;\xba\xba&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;对unicode进行解码是错误的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; &lt;span class="s s-Atom"&gt;codec&lt;/span&gt; &lt;span class="s s-Atom"&gt;can&amp;#39;t encode characters in position 0-1: ordinal not in range(128)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    # 同样，对str进行编码也是错误的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s s-Atom"&gt;    u2 = s.encode(&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;)        # UnicodeDecodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;decode&lt;/span&gt; &lt;span class="s s-Atom"&gt;byte&lt;/span&gt; &lt;span class="mh"&gt;0xc2&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;ordinal&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- bytes对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;bytes对象的方法调用基本和str类型一致&lt;/span&gt; &lt;span class="s s-Atom"&gt;但:&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;返回的是ASCII码值97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;而不是b&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- #文本文件: 根据Unicode编码来解释文件内容，要么是平台的默认编码，要么是指定的编码类型&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;二进制文件：表示字节值的整数的一个序列&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;bin.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Unicode文件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;A\xc4B\xe8C&amp;#39;&lt;/span&gt;             &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;A?BèC&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#手动编码&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;latin-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;A\xc4B\xe8C&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;A\xc3\x84B\xc3\xa8C&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#文件输出编码&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;latindata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;latin-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;latindata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;A\xc4B\xe8C&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;uft8data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;uft8data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b&amp;#39;A\xc3\x84B\xc3\xa8C&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#文件输入编码&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;latindata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;latin-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;A?BèC&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;latindata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;latin-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;A?BèC&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;utf8data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;A?BèC&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;utf8data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;A?BèC&amp;#39;&lt;/span&gt;  &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python实现任意深度的赋值 例如a[0] = &amp;#39;value1&amp;#39;; a[1][2] = &amp;#39;value2&amp;#39;; a[3][4][5] = &amp;#39;value3&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;MyDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;                 &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;该函数不做任何改动&lt;/span&gt; &lt;span class="s s-Atom"&gt;这里只是为了输出&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;setitem:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;主要技巧在该函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;getitem:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;输出信息&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;基本思路:&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;赋值时&lt;/span&gt; &lt;span class="s s-Atom"&gt;需要先取出a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;然后给a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;的&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;赋值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;item&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;不存在&lt;/span&gt; &lt;span class="s s-Atom"&gt;则需要新建一个dict&lt;/span&gt; &lt;span class="s s-Atom"&gt;并使得a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;dict&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="s s-Atom"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;MyDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;新建的dict:&lt;/span&gt; &lt;span class="s s-Atom"&gt;temp&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="nf"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;赋值a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;temp&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="s s-Atom"&gt;temp&lt;/span&gt;                                &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回temp&lt;/span&gt; &lt;span class="s s-Atom"&gt;使得temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;value有效&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;存在&lt;/span&gt; &lt;span class="s s-Atom"&gt;则直接返回a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;例子:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;MyDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s s-Atom"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;test2&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;#-- Python中的多维数组&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;                                        &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;扩展list，结果为&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[]]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;                                       &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;多维数组，结果为&lt;/span&gt;&lt;span class="p"&gt;[[],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]]&lt;/span&gt;&lt;span class="s s-Atom"&gt;，但有问题，往下看&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;期望看到的结果&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]]&lt;/span&gt;&lt;span class="s s-Atom"&gt;，实际结果&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="s s-Atom"&gt;，原因：list&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s s-Atom"&gt;n操作，是浅拷贝，如何避免？往下看&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[]&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;                         &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;多维数组，结果为&lt;/span&gt;&lt;span class="p"&gt;[[],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;结果为&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;结果为&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;结果为&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s s-Atom"&gt;lists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[]&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;j&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;i&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;     &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s s-Atom"&gt;行4列，且每一个元素为&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>python中的urlencode与urldecode</title><link href="https://pingbook.top/articles/urlencode-quote/" rel="alternate"></link><published>2018-09-08T16:01:43+08:00</published><updated>2018-09-08T16:01:43+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-08:/articles/urlencode-quote/</id><summary type="html">&lt;p&gt;当url地址含有中文，或者参数有中文的时候，这个算是很正常了，但是把这样的url作为参数传递的时候（最常见的callback），需要把一些中文甚至&amp;rsquo;/&amp;rsquo;做一下编码转换。&lt;/p&gt;
&lt;p&gt;所以对于一些中文或者字符，url不识别的，则需要进行转换 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;当url地址含有中文，或者参数有中文的时候，这个算是很正常了，但是把这样的url作为参数传递的时候（最常见的callback），需要把一些中文甚至&amp;rsquo;/&amp;rsquo;做一下编码转换。&lt;/p&gt;
&lt;p&gt;所以对于一些中文或者字符，url不识别的，则需要进行转换，转换结果如下：&lt;/p&gt;
&lt;h3 id="0x01-urlencode"&gt;0x01 urlencode&lt;a class="headerlink" href="#0x01-urlencode" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;urllib库里面有个urlencode函数，可以把key-value这样的键值对转换成我们想要的格式，返回的是a=1&amp;amp;b=2这样的字符串，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;02蔡彩虹&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ddddd?&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.baidu.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果只想对一个字符串进行urlencode转换，怎么办？urllib提供另外一个函数：quote()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;长春&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="0x02-urldecode"&gt;0x02 urldecode&lt;a class="headerlink" href="#0x02-urldecode" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当urlencode之后的字符串传递过来之后，接受完毕就要解码了——urldecode。urllib提供了unquote()这个函数，可没有urldecode()！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;s=&amp;#39;%E5%B9%BF%E5%B7%9E&amp;#39;&lt;/span&gt;
&lt;span class="code-line"&gt;s=urllib.parse.unquote(s)&lt;/span&gt;
&lt;span class="code-line"&gt;print(s)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>datetime时间模块有用的函数整理笔记</title><link href="https://pingbook.top/articles/time-module/" rel="alternate"></link><published>2018-09-07T19:53:47+08:00</published><updated>2018-09-07T19:53:47+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-07:/articles/time-module/</id><summary type="html">&lt;h3 id="ox01-datetime"&gt;ox01 毫秒时间戳转换成&lt;code&gt;datetime&lt;/code&gt;时间对象&lt;a class="headerlink" href="#ox01-datetime" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;datetime.fromtimestamp(seconds)&lt;/code&gt;函数的时候需要注意:
1 …&lt;/p&gt;</summary><content type="html">&lt;h3 id="ox01-datetime"&gt;ox01 毫秒时间戳转换成&lt;code&gt;datetime&lt;/code&gt;时间对象&lt;a class="headerlink" href="#ox01-datetime" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;datetime.fromtimestamp(seconds)&lt;/code&gt;函数的时候需要注意:
1. 参数是秒不是毫秒
2. windows平台在Python 3.6版本的时候,如果时间在这个范围: 0 &amp;lt;= t &amp;lt;= 86399, 将会报
&lt;code&gt;OSError: [Errno 22] Invalid argument&lt;/code&gt;,这是一个已知的&lt;a href="https://bugs.python.org/issue29097"&gt;bug&lt;/a&gt;,目前已经在2018-07-27得到修复了.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;microSeconds_to_Datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unixTimestampMicroSeconds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    fromtimestamp 对应的参数是秒,而大部分情况我们用的都是毫秒,所以这里需要转换下&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    :param unixTimestampMicroSeconds: 毫秒数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    :return: datetime 对象&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    错误: https://bugs.python.org/issue29097 ,已经修复: 2018-07-27&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    datetime.fromtimestamp(t) when 0 &amp;lt;= t &amp;lt;= 86399 fails on Python 3.6 -&amp;gt; [Windows] datetime.fromtimestamp(t) when 0 &amp;lt;= t &amp;lt;= 86399 fails on Python 3.6&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    注意: OSError: [Errno 22] Invalid argument&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    On Windows platform, this range can sometimes be restricted to years in 1970 through 2038. I have never seen this problem on a Linux system.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    如果还是失败,尝试使用 fromutctimestamp 函数&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;unixTimestampSeconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;unixTimestampMicroSeconds&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;newDate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unixTimestampSeconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# otherStyleTime = time.strftime(&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;, timearr)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newDate&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ox02-datetime"&gt;ox02 &lt;code&gt;datetime&lt;/code&gt;对象转换成毫秒时间戳&lt;a class="headerlink" href="#ox02-datetime" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_timeMicroSeconds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# current_milli_time = lambda: int(round(time.time() * 1000))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;totalSeconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;totalMicroSeconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalSeconds&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;totalMicroSeconds&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ox03-datetime"&gt;ox03 计算两个时间datetime对象的间隔&lt;a class="headerlink" href="#ox03-datetime" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;直接进行符号计算两个时间的间隔,使用&lt;code&gt;dir&lt;/code&gt;发现有以下的几个属性,没有&lt;strong&gt;毫秒&lt;/strong&gt;的属性注意:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(end - start)&lt;/span&gt;
&lt;span class="code-line"&gt;[&amp;#39;__abs__&amp;#39;, &amp;#39;__add__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__div__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__floordiv__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__neg__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__nonzero__&amp;#39;, &amp;#39;__pos__&amp;#39;, &amp;#39;__radd__&amp;#39;, &amp;#39;__rdiv__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__rfloordiv__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__rsub__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__sub__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;days&amp;#39;, &amp;#39;max&amp;#39;, &amp;#39;microseconds&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;resolution&amp;#39;, &amp;#39;seconds&amp;#39;, &amp;#39;total_seconds&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以一般使用如下几个方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;1  diff.days  # 间隔的天数&lt;/span&gt;
&lt;span class="code-line"&gt;2. diff.seconds  # 间隔的秒数&lt;/span&gt;
&lt;span class="code-line"&gt;3. diff.microseconds # 间隔的秒数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以函数如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;def compare_two_date(firstdate,seconddate):&lt;/span&gt;
&lt;span class="code-line"&gt;    diff=seconddate-firstdate&lt;/span&gt;
&lt;span class="code-line"&gt;    # totalSeconds=diff.microseconds&lt;/span&gt;
&lt;span class="code-line"&gt;    totalSeconds=diff.seconds&lt;/span&gt;
&lt;span class="code-line"&gt;    return totalSeconds&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>MySQL 语句级避免重复插入—— Insert Select Not Exist</title><link href="https://pingbook.top/articles/insert-prevent-duplicate/" rel="alternate"></link><published>2018-09-07T16:19:23+08:00</published><updated>2018-09-07T16:19:23+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-07:/articles/insert-prevent-duplicate/</id><summary type="html">&lt;h3 id="_1"&gt;语法如下&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- 单条记录插入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;INSERT INTO table(column1,column2,column3 ...columnN)  &lt;/span&gt;
&lt;span class="code-line"&gt;SELECT …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="_1"&gt;语法如下&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- 单条记录插入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;INSERT INTO table(column1,column2,column3 ...columnN)  &lt;/span&gt;
&lt;span class="code-line"&gt;SELECT value1,value2,value3 ...valueN  &lt;/span&gt;
&lt;span class="code-line"&gt;FROM dual  &lt;/span&gt;
&lt;span class="code-line"&gt;WHERE NOT EXISTS(  &lt;/span&gt;
&lt;span class="code-line"&gt;      SELECT *  &lt;/span&gt;
&lt;span class="code-line"&gt;      FROM table  &lt;/span&gt;
&lt;span class="code-line"&gt;      WHERE value = ?  &lt;/span&gt;
&lt;span class="code-line"&gt;);  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gd"&gt;--- 多条记录插入&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;INSERT INTO table(column1,column2,column3 ...columnN)  &lt;/span&gt;
&lt;span class="code-line"&gt;SELECT value1,value2,value3 ...valueN  &lt;/span&gt;
&lt;span class="code-line"&gt;FROM anothertable  &lt;/span&gt;
&lt;span class="code-line"&gt;WHERE NOT EXISTS(  &lt;/span&gt;
&lt;span class="code-line"&gt;      SELECT *  &lt;/span&gt;
&lt;span class="code-line"&gt;      FROM table  &lt;/span&gt;
&lt;span class="code-line"&gt;      WHERE value = ?  &lt;/span&gt;
&lt;span class="code-line"&gt;);  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;dual&lt;/code&gt; 做表名可以让你在 select&amp;nbsp;语句后面直接跟上要插入字段的值，即使这些值还不存在当前表中&lt;/p&gt;</content><category term="MYSQL"></category></entry><entry><title>Selenium3笔记-WebDriver源码初探</title><link href="https://pingbook.top/articles/selenium-sourcecode/" rel="alternate"></link><published>2018-09-07T00:10:33+08:00</published><updated>2018-09-07T00:10:33+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-07:/articles/selenium-sourcecode/</id><summary type="html">&lt;h3 id="selenium3"&gt;Selenium3 有哪些变化？&lt;a class="headerlink" href="#selenium3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;其实相对于与Selenium2，Selenium3没有做太多的改动。下面给出官方的文档说明，供参考。&lt;/p&gt;
&lt;p&gt;参考文档：https://seleniumhq.wordpress …&lt;/p&gt;</summary><content type="html">&lt;h3 id="selenium3"&gt;Selenium3 有哪些变化？&lt;a class="headerlink" href="#selenium3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;其实相对于与Selenium2，Selenium3没有做太多的改动。下面给出官方的文档说明，供参考。&lt;/p&gt;
&lt;p&gt;参考文档：https://seleniumhq.wordpress.com/2013/08/28/the-road-to-selenium-3/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“We aim for Selenium 3 to be “a tool for user-focused automation of mobile and web apps”,Developers from projects such as Appium, ios-driver and selendroidwill be working on the suite of tests to enable this.”
“Selenium 3 will see the removal of the original Selenium Core implementations, and consequently we’ll be deprecating the &lt;span class="caps"&gt;RC&lt;/span&gt; APIs too，the original implementation will be available as a download, but it will no longer be actively developed once we release&amp;nbsp;3.0.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以对于Selenium3来说最大的变动可能就是更加专注于手机和web的测试，尤其是手机的支持，因为你晓得的，现在更多的是移动的时代。&lt;/p&gt;
&lt;p&gt;对于Selenium2中对于RemotControl的实现我看了下Selenium3的源码发现确实不在支持，而更多的转向了W3C standard，不是独成一套Selenium自己的WebDriver &lt;span class="caps"&gt;API&lt;/span&gt;.关于这个需要插如一下有关W3C&amp;nbsp;WebDriver的知识。&lt;/p&gt;
&lt;h3 id="w3c-webdriver"&gt;有关W3C WebDriver&lt;a class="headerlink" href="#w3c-webdriver" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;参考文档： https://www.w3.org/&lt;span class="caps"&gt;TR&lt;/span&gt;/webdriver/，https://www.w3.org/testing/Activity，https://github.com/w3c/webdriver&lt;/p&gt;
&lt;p&gt;W3C组织制定了一套浏览器自动化的规范叫做WebDriver，这套规范规定了所有的浏览器生产商都必须遵守这个规范。其实定义了好多的遵循的接口和WebDriver的概念。对于Chrome，Firefox，Opera,Safari.etc他们都需要遵守这个规范并且实现规范里面的接口，这些实现一般都是伴随浏览器的开发进行的。&lt;/p&gt;
&lt;p&gt;所以你应该明白了，Selenium不管是WebDriver还是RemoteWebDriver都是W3C WebDriver的一种实现而已。真正的核心浏览器的交互在对应的浏览器的WebDriver上，其实你有了对应的浏览器的WebDriver，参考W3C的标准接口文档HTTP-based wire&amp;nbsp;protocol你就可以单独实现浏览器的操作。就是Client-Server的沟通。所有支持的命令列表如下：&lt;/p&gt;
&lt;p&gt;举个ChromeDriver的例子。。。&lt;/p&gt;
&lt;p&gt;首先我们找到ChromeDriver ，这个自然到chromium项目上去下载就好了。
https://sites.google.com/a/chromium.org/chromedriver/这里也有很多详细的接口的说明，这里的接口说明跟上面的W3C的接口说明差不多。你需要针对不同的浏览器下载对应的版本。下面我以下载的一个win版本的为例（下载地址：http://chromedriver.storage.googleapis.com/2.23/chromedriver_win32.zip&amp;nbsp;）&lt;/p&gt;
&lt;h3 id="webdriver"&gt;WebDriver的使用&lt;a class="headerlink" href="#webdriver" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1.1&amp;nbsp;查看下chromedriver.exe提供给我们的一些可用的命令。&lt;/p&gt;
&lt;p&gt;&lt;img alt="测试图片" src="http://images2015.cnblogs.com/blog/345627/201608/345627-20160806093851965-36470757.png"&gt;&lt;/p&gt;
&lt;p&gt;里面的使用很详细，这里我们只需要使用一个参数来启动ChromeDriver的server， –port ,命令如下：chromedriver.exe –port&amp;nbsp;9514，或者直接不输入端口直接回车，界面命令如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="测试图片" src="http://images2015.cnblogs.com/blog/345627/201608/345627-20160806093859950-536009204.png"&gt;&lt;/p&gt;
&lt;p&gt;启动后chromedriver会在本地的9514端口号上进行监听通信，根据不同的命令发送到浏览器上，浏览器进行交互。比如启动一个chrome浏览器对应的命令是session，单独的ChromeDriver的HTTP通信URI是：http://localhost:9514/session,对于通过RemoteWebDriver的URL是：http://localhost:9514/wd/hub/session&lt;/p&gt;
&lt;h4 id="webdriver-new-session"&gt;WebDriver -New Session&lt;a class="headerlink" href="#webdriver-new-session" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;看一下这个说明： https://www.w3.org/&lt;span class="caps"&gt;TR&lt;/span&gt;/webdriver/#dfn-new-session，操作流程如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    The remote end steps are:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    If the remote end is an intermediary node, take implementation-defined steps that either result in returning an error with error code session not created, or in returning a success with data that is isomorphic to that returned by remote ends according to the rest of this algorithm.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    If the maximum active sessions is equal to the length of the list of active sessions, return error with error code session not created.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    If there is a current user prompt, return error with error code session not created.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Let capabilities be the result of getting a property named &amp;quot;capabilities&amp;quot; from the parameters argument.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Let capabilities result be the result of processing capabilities with capabilities as an argument.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    If capabilities result is an error, return error with error code session not created.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Let capabilities be capabilities result’s data.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Let session id be the result of generating a UUID.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Let session be a new session with the session ID of session id.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Set the current session to session.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Append session to active sessions.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的流程已经在最新的Selenium&amp;nbsp;WebDriver中实现了。所有启动一个浏览器做的session操作可以参考如下核心Selenium代码逻辑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一步设置chromeDriver的路径后面代码用到：&lt;code&gt;System.setProperty("webdriver.chrome.driver", "chromedriver.exe");&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二步构建一个命令行对象用于执行chromedriver.exe的命令：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;org.openqa.selenium.remote.service.DriverService.Builder.build()&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;public DS build() {&lt;/span&gt;
&lt;span class="code-line"&gt;     if (port == 0) {&lt;/span&gt;
&lt;span class="code-line"&gt;       port = PortProber.findFreePort(); //可用的端口号，例如232323,那么后面用到的命令就是:chromedriver.exe –port 232323&lt;/span&gt;
&lt;span class="code-line"&gt;     }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     if (exe == null) {&lt;/span&gt;
&lt;span class="code-line"&gt;       exe = findDefaultExecutable();&lt;/span&gt;
&lt;span class="code-line"&gt;     }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     ImmutableList&amp;lt;String&amp;gt; args = createArgs();&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     return createDriverService(exe, port, args, environment);&lt;/span&gt;
&lt;span class="code-line"&gt;   }&lt;/span&gt;
&lt;span class="code-line"&gt;   ```&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;1. 核心selenium命令执行类：`org.openqa.selenium.remote.RemoteWebDriver.RemoteWebDriver(CommandExecutor, Capabilities, Capabilities)`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;public RemoteWebDriver(CommandExecutor executor, Capabilities desiredCapabilities,
      Capabilities requiredCapabilities) {
    this.executor =&amp;nbsp;executor;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;init(desiredCapabilities, requiredCapabilities);&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;if (executor instanceof NeedsLocalLogs) {&lt;/span&gt;
&lt;span class="code-line"&gt;  ((NeedsLocalLogs)executor).setLocalLogs(localLogs);&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;try {&lt;/span&gt;
&lt;span class="code-line"&gt;  startClient(desiredCapabilities, requiredCapabilities);&lt;/span&gt;
&lt;span class="code-line"&gt;} catch (RuntimeException e) {&lt;/span&gt;
&lt;span class="code-line"&gt;  try {&lt;/span&gt;
&lt;span class="code-line"&gt;    stopClient(desiredCapabilities, requiredCapabilities);&lt;/span&gt;
&lt;span class="code-line"&gt;  } catch (Exception ignored) {&lt;/span&gt;
&lt;span class="code-line"&gt;    // Ignore the clean-up exception. We&amp;#39;ll propagate the original failure.&lt;/span&gt;
&lt;span class="code-line"&gt;  }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  throw e;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;try {&lt;/span&gt;
&lt;span class="code-line"&gt;  startSession(desiredCapabilities, requiredCapabilities);&lt;/span&gt;
&lt;span class="code-line"&gt;} catch (RuntimeException e) {&lt;/span&gt;
&lt;span class="code-line"&gt;  try {&lt;/span&gt;
&lt;span class="code-line"&gt;    quit();&lt;/span&gt;
&lt;span class="code-line"&gt;  } catch (Exception ignored) {&lt;/span&gt;
&lt;span class="code-line"&gt;    // Ignore the clean-up exception. We&amp;#39;ll propagate the original failure.&lt;/span&gt;
&lt;span class="code-line"&gt;  }&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  throw e;&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;`&lt;/p&gt;
&lt;p&gt;以上的代码完成了如下的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始化desiredCapabilities对象，这是发送到客户端的JSON&amp;nbsp;数据，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动一个session，这里包含一个判断，如果这是一个NEW_SESSION，那么会在上面构建的chromedriver上启动chromedriver然后在发送session命令。后台操作HTTP请求用到的是Apache&amp;nbsp;HttpClient的API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面说明下WebDriver的通信是HTTP的协议，因此这里所有的通信都是通过JSON&amp;nbsp;Wired进行沟通的RESTFul格式。也就是说所有的沟通都是一次RESTFul的request和response的过程。&lt;/p&gt;
&lt;p&gt;参考如下Selenium的说明： &lt;a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#command-summary"&gt;https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#command-summary&lt;/a&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;Request:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="http://images2015.cnblogs.com/blog/345627/201608/345627-20160807113920403-1198533879.png" src="http://images2015.cnblogs.com/blog/345627/201608/345627-20160807113920403-1198533879.png"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;Response:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="http://images2015.cnblogs.com/blog/345627/201608/345627-20160807113921700-1847416761.png" src="http://images2015.cnblogs.com/blog/345627/201608/345627-20160807113921700-1847416761.png"&gt;&lt;/p&gt;
&lt;h5 id="_1"&gt;未完待续&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h5&gt;</content><category term="软件测试"></category><category term="Selenium"></category></entry><entry><title>Selenium得到当前页面的URL</title><link href="https://pingbook.top/articles/selenium-currenturl/" rel="alternate"></link><published>2018-09-07T00:00:10+08:00</published><updated>2018-09-07T00:00:10+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-07:/articles/selenium-currenturl/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;       &lt;span class="c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * getCurrentURL:(get the current page URL address). &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * @author huchan&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * @param …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;       &lt;span class="c"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * getCurrentURL:(get the current page URL address). &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * @author huchan&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * @param driver  --- the web driver instance&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * @return String ---the url of current page&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         * @since JDK 1.6&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c"&gt;         */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;String&lt;/span&gt; &lt;span class="nt"&gt;getCurrentPageURL&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="err"&gt;String&lt;/span&gt; &lt;span class="err"&gt;pageurl=&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="err"&gt;JavascriptExecutor&lt;/span&gt; &lt;span class="err"&gt;je=(JavascriptExecutor)&lt;/span&gt; &lt;span class="err"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="err"&gt;final&lt;/span&gt; &lt;span class="err"&gt;String&lt;/span&gt; &lt;span class="err"&gt;docstate=(String)&lt;/span&gt; &lt;span class="err"&gt;je.executeScript(&amp;quot;return&lt;/span&gt; &lt;span class="err"&gt;document.readyState&amp;quot;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="err"&gt;logger.info(&amp;quot;Current&lt;/span&gt; &lt;span class="err"&gt;loading&lt;/span&gt; &lt;span class="err"&gt;page&lt;/span&gt; &lt;span class="err"&gt;state&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+docstate);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            WebDriverWait wait=new WebDriverWait(driver,120);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            ExpectedCondition&amp;lt;Boolean&amp;gt; ec = new ExpectedCondition&amp;lt;Boolean&amp;gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                  @Override&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                public Boolean apply(WebDriver d) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                    return (docstate.equals(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                };&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            try{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;               logger.info(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="kc"&gt;wait&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="kc"&gt;page&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;correctly&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;               wait.until(ec);           &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;               pageurl=driver.getCurrentUrl();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;               logger.info(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+pageurl);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            catch(TimeoutException e){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                pageurl=&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                logger.error(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;Sorry&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="kc"&gt;page&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt; &lt;span class="n"&gt;correctly&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getCurrentUrl&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nt"&gt;return&lt;/span&gt; &lt;span class="nt"&gt;pageurl&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不多说，代码如上。关键点是一定要等待页面加载完成了再使用driver.getCurrentUrl()方法，否则的话可能得到的页面URL&amp;nbsp;不正确。&lt;/p&gt;</content><category term="软件测试"></category><category term="Selenium"></category></entry><entry><title>PL Developer 使用技巧整理</title><link href="https://pingbook.top/articles/pldeveloper-tips/" rel="alternate"></link><published>2018-09-06T23:52:43+08:00</published><updated>2018-09-06T23:52:43+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-06:/articles/pldeveloper-tips/</id><summary type="html">&lt;p&gt;Shortcut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Edit/Undo     Ctrl+Z&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Redo     Shift+Ctrl+Z …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Shortcut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Edit/Undo     Ctrl+Z&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Redo     Shift+Ctrl+Z&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/PL/SQL Beautifier  Ctrl+W   (自定义)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;       Shift+Home  选择光标位置到行首&lt;/span&gt;
&lt;span class="code-line"&gt;       Shift+End  选择光标位置到行尾&lt;/span&gt;
&lt;span class="code-line"&gt;       Ctrl+Shift+Home 选择光标位置到首行行首&lt;/span&gt;
&lt;span class="code-line"&gt;       Ctrl+Shift+End 选择光标位置到尾行行尾&lt;/span&gt;
&lt;span class="code-line"&gt;Object:View     Shift+Ctrl+V 查看 (自定义)&lt;/span&gt;
&lt;span class="code-line"&gt;Object:Describe    Shift+Ctrl+D 结构 (自定义)&lt;/span&gt;
&lt;span class="code-line"&gt;Object:Properties   Shift+Ctrl+P 属性 (自定义)&lt;/span&gt;
&lt;span class="code-line"&gt;Object:Browse    Shift+Ctrl+B 浏览 (自定义)&lt;/span&gt;
&lt;span class="code-line"&gt;Object:Edit Data   Shift+Ctrl+E 编辑数据(自定义)&lt;/span&gt;
&lt;span class="code-line"&gt;Object:Standard Query  Shift+Ctrl+S 标准查询(自定义)&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Find Replace   Ctrl+F&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Find Next    Ctrl+L&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Find Previous   Shift+Ctrl+L&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Replace Next   Ctrl+P&lt;/span&gt;
&lt;span class="code-line"&gt;EDIT/Full Screen   Ctrl+F11&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Go to Line    Ctrl+G&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Next Tab Page   Ctrl+H&lt;/span&gt;
&lt;span class="code-line"&gt;Edit/Previous Tab Page  Shift+Ctrl+H&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Session/Execute    F8&lt;/span&gt;
&lt;span class="code-line"&gt;Session/Break    Shift+Esc&lt;/span&gt;
&lt;span class="code-line"&gt;Session/Commit    F10&lt;/span&gt;
&lt;span class="code-line"&gt;Session/Rollback   Shift+F10&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Debug/Toggle Breakpoint  Ctrl+B&lt;/span&gt;
&lt;span class="code-line"&gt;Debug/Start     F9&lt;/span&gt;
&lt;span class="code-line"&gt;Debug/Run     Ctrl+R&lt;/span&gt;
&lt;span class="code-line"&gt;Debug/Step Into    Ctrl+N&lt;/span&gt;
&lt;span class="code-line"&gt;Debug/Step Over    Ctrl+O&lt;/span&gt;
&lt;span class="code-line"&gt;Debug/Step Out    Ctrl+T&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Tools/Explain Plan   F5&lt;/span&gt;
&lt;span class="code-line"&gt;Tools/Code Assistant  F6&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Editor: Start of Document Ctrl+PgUp OR Ctrl+Home&lt;/span&gt;
&lt;span class="code-line"&gt;Editor: End of Document  Ctrl+PgDn OR Ctrl+End&lt;/span&gt;
&lt;span class="code-line"&gt;Editor: Delete Line   Ctrl+Y&lt;/span&gt;
&lt;span class="code-line"&gt;Editor: Navigate Back  Alt+Left&lt;/span&gt;
&lt;span class="code-line"&gt;Editor: Navigate Forward Alt+Right&lt;/span&gt;
&lt;span class="code-line"&gt;SQL Window: Previous SQL Ctrl+Up&lt;/span&gt;
&lt;span class="code-line"&gt;SQL Window: Next SQL  Ctrl+Down&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer记住登陆密码&lt;br&gt;
在使用PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer时,
为了工作方便希望PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer记住登录Oracle的用户名和密码;
设置方法:&lt;br&gt;
  &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer-&amp;gt;tools-&amp;gt;Preferences-&amp;gt;Oracle-&amp;gt;Logon History,
  在右边界面的&amp;rdquo;Definition&amp;rdquo;中,&amp;rdquo;Store history&amp;rdquo;是默认勾选的,
  再勾选上&amp;rdquo;Store with password&amp;rdquo;,即可.
上述方法若不好用,使用下面的方式:
在上面所说的界面中的&amp;rdquo;Fixed Users&amp;rdquo;中,
添加需要直接选择后就可登录的用户名/密码@ORACLE_SID,
  如:
cbsdb/cbsdb@cbsdb
  重新登录的时候,从Oracle Logon的登录界面的Username后面的&amp;hellip;按钮处,&amp;nbsp;选择需要登录的用户即可。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行单条SQL语句(&lt;span class="caps"&gt;SQL&lt;/span&gt; Window中根据光标位置自动选择语句)
在使用PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer的SQL Window时,按F8键,&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer默认是执行该窗口的所
有SQL语句,需要设置为鼠标所在的那条SQL语句,即执行当前SQL语句;
设置方法:&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer-&amp;gt;tools-&amp;gt;Preferences-&amp;gt;&lt;span class="caps"&gt;SQL&lt;/span&gt; Window-&amp;gt;Window types,
勾上&amp;rdquo;AutoSelect Statement&amp;rdquo; 即可。&amp;nbsp;注意,每条语句后面要加分号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;格式化SQL语句
在使用PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer的SQL Window时,有时候输入的SQL语句太长或太乱,
希望能用比较通用的写法格式话一下,这样看起来会好看些,也好分析;
使用方法:
  选中需要格式化的SQL语句,然后点击工具栏的PL/&lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;beautifier按钮即可.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看执行计划
在使用PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer的SQL Window时,有时候输入的SQL语句执行的效率,分析下表结构,
如何可以提高查询的效率,可以通过查看Oracle提供的执行计划;
使用方法:
  选中需要分析的SQL语句,然后点击工具栏的Explain plan按钮(即执行计划),&amp;nbsp;或者直接按F5即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调试存储过程
在使用PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer操作Oracle时,有时候调用某些存储过程,或者调试存储过程;
调用存储过程的方法:
  首先,在PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer左边的Browser中选择Procedures,
  查找需要调用的存储过程;然后,选中调试的存储过程,点击右键,
  选择Test,在弹出来的Test script窗口中,
  对于定义为in类型的参数,需要给该参数的Value输入值;
  最后点击上面的条数按钮:Start debugger或者按F9;
  最后点击:RUN或者Ctrl+R。&amp;nbsp;(具体要调式一个存储过程,请参照操作手册,这个大概说明下应用)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;oralce精简客户端的使用
要想PL/SQL连接oracle数据库,除了PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer 之外还需要Oracle客户端,
有一个更方便的方法就是使用Oracle精简客户端,很多地方可以下载,文件很小,耗资源也少。
安装完成后修改安装目录下的\Oracle\ora90\network\&lt;span class="caps"&gt;ADMIN&lt;/span&gt;\tnsnames.ora文件:
格式如下:
  DATABASE_NAME =
   (&lt;span class="caps"&gt;DESCRIPTION&lt;/span&gt; =
    (ADDRESS_LIST =
     (&lt;span class="caps"&gt;ADDRESS&lt;/span&gt; = (&lt;span class="caps"&gt;PROTOCOL&lt;/span&gt; = &lt;span class="caps"&gt;TCP&lt;/span&gt;)(&lt;span class="caps"&gt;HOST&lt;/span&gt; = 127.0.0.1)(&lt;span class="caps"&gt;PORT&lt;/span&gt; = 1521))
    )
    (CONNECT_DATA =
     #(SERVICE_NAME = dealer)
     (&lt;span class="caps"&gt;SID&lt;/span&gt; = SID_NAME)
     #(&lt;span class="caps"&gt;SERVER&lt;/span&gt; = &lt;span class="caps"&gt;DEDICATED&lt;/span&gt;)
    )&amp;nbsp;)&lt;/li&gt;
&lt;li&gt;关键字自动大写:
了解一点编程的常识的人都知道,编码风格很重要。
在阅读代码方面,保持一致的编码风格,阅读起来比较容易;
在执行效率方面,保持一致的编码风格,更有可能被放到共享SQL区中,&amp;nbsp;这样就提供了执行的效率。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外,信息系统的核心是数据库,系统出问题时最先要查的就是SQL语句,
怎样在浩瀚的日志中快速找到那条SQL语句是件比较痛苦的事情。
SQL语句全部大写并不能彻底解决这一问题,
但在一堆代码中间找一行全部大写的字符相对容易些,你的眼睛会感谢你。
设置也很简单:
  Tools-&amp;gt;Preferences-&amp;gt;Editor,将Keyword case选择Uppercase。
我一般是让关键字大写,其他比如表名,字段名等都是小写。&amp;nbsp;大家都应该养成一种自己的编码习惯,并保持下去。&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;
&lt;p&gt;右键菜单
在PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer(下面简称PLD)中的每一个文本编辑窗口,
如SQL Window,Command Window和Porgram Window,
右键点击某个对象名称,会弹出一个包含操作对象命令的菜单,我们这里称之为右键菜单。
对象类型可以是表,视图,同义词,存储过程和函数等。
根据对象类型的不同,弹出的菜单也有区别。
表和视图有View, Edit, Rename, Drop, Query data 和Edit data等功能。
View和Edit分别是查看和修改表的结构信息,如字段,主键,索引和约束等。
Query data相当于新打开一个窗口,并执行select * from 表。
Edit data相当于新打开一个窗口,并执行select * from 表 for update。
存储过程和函数有Test功能,选中后可以进入调试状态。
有时由于PLD识别错误,右键点击对象并不能出来正确的菜单,&amp;nbsp;可以在对象所在的DDL或DML语句的前面,加上分号,这样PLD就能正确的判断出对象的类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select for Update
有时我们需要把一些数据导入数据库中,如果用UE拼Insert语句,会比较麻烦,而且操作性不强。
PLD的SQL Window可以查询,新增,修改和删除表的内容。
查询自不必说,而新增,删除和修改,只需在select语句后加入for update,
对表进行行级锁定,然后点击窗口的锁型图标,即可进入编辑状态。
下面介绍一下如何从Excel中提取文本插入到数据库中,
我们的Excel文件中有三列,在数据库中建立临时表:
  &lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt; t1(
   cino varchar2(100),
   contno varchar2(100),
   loanno varchar2(100)
  )
然后在SQL Window中输入select t1 for update,并点击锁型鼠标,进入编辑状态,
用鼠标点击第一行的输入窗口,这时PLD会死锁几秒钟,
然后可以见到光标在第一行的输入框中闪动,
用鼠标把CINO, &lt;span class="caps"&gt;CONTNO&lt;/span&gt;, LOANNO选中,进入Excel中,把需要插入数据库的内容选中,
然后切换到PLD,按Ctrl + V,点击√,然后再点击Commit按钮,
则数据提交到表t1中,执行select * from&amp;nbsp;t1可以看到内容.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Beautifier(&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; 美化器)
&lt;span class="caps"&gt;PLD&lt;/span&gt; 6以上版本有对DML代码格式化的功能。
在SQL Window或Program Window中选中部分代码(如果不选则对整个窗口的代码操作),
在菜单中选Edit -&amp;gt; &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Beautifier,得到格式化的代码。
对于非法的DML语句或DDL语句,PLD将会在下方状态栏提示:
&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Beautifier could not parse text。
在缺省的状态下,PLD会把DML语句的每一个字段都排在单独的一行,这样不方便查看。
在菜单中选Edit à &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Beautifier Options,进入Preferences窗口,
选择Edit,进入配置文件编辑界面,在标签栏选DML,
在窗口中部的Select, Insert和Update组框中把Fit选中,然后点击Save,
把配置文件保存到PLD的安装目录下,点击Close关闭。
在Rules file中输入配置文件所在位置,点击OK,完成配置文件切换。&amp;nbsp;这时再对代码进行格式化,就可以使每一个字段尽可能的在一行上了。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;TNS&lt;/span&gt; Names
菜单Help-&amp;gt;Support Info-&amp;gt;&lt;span class="caps"&gt;TNS&lt;/span&gt;&amp;nbsp;Names,可以查看Oracle的tnsnames.ora。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy to Excel
在SQL Window中执行Select语句,在结果出来以后,右键点击下面的数据区,
选择Copy to Excel,可以把数据区的记录原样拷贝到Excel中。
但有两点需要注意:
(1) field中不能以=开始,否则Excel会误认为是函数;
(2) 数字不要超过17位,否则后面的位数将会置为0,
  但可以通过在数字前加&amp;rsquo;来使Excel认为该field是文本,&amp;nbsp;同时对于数据库中Numbe类型的字段,最好用to_char输出,不然可能会显示不正常;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持上次打开的SQL脚本
重新进入PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer时,Window List能打开上次退出时的文档:
(1) 将菜单Tools-&amp;gt;Window list选项勾上;
(2) Tools-&amp;gt;Perferences-&amp;gt;User Interface-&amp;gt;Options的右边,
  将&amp;rdquo;Autosave desktop&amp;rdquo;勾选.
(3) 退出PL/&lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;Developer重新进入.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速找到已知表名的表或其他对象:
在Tools菜单中,勾选上Object Browser,将对象浏览器打开,
双击对象浏览器中的某个对象所处的文件夹,
比如表都是在Tables文件夹中,&amp;nbsp;然后以尽快的速度输入表名,即可找到以你输入的几个字母开头的对象了.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速关闭打开于Windows List中的文档窗口:&amp;nbsp;按住Shift键,左键点击需要关闭的文档窗口.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; DEVELOPER中的专用复制(Special Copy)
如果你正在用 &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer 写 &lt;span class="caps"&gt;SQL&lt;/span&gt; 和 &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; 代码,
随后你又要在其它工具里使用代码,例如象 &lt;span class="caps"&gt;3GL&lt;/span&gt; 这样的程序设计语言,
那么你可能需要把这些代码转换为稍微不同的格式。
让我们假设你已经在 &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer 里写了并测试了这样一个SQL 语句:
  select  deptno, sum(sal) mgr_sal
  from  emp
  where  job = &amp;lsquo;&lt;span class="caps"&gt;MANAGER&lt;/span&gt;&amp;rsquo;
  group by deptno
  order by mgr_sal&amp;nbsp;desc&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如,如果你要在Borland Delphi 里使用这个语句,你可能需要象这样的格式:
  &lt;span class="caps"&gt;SQL&lt;/span&gt; := &amp;lsquo;select deptno, sum(sal) mgr_sal from emp&amp;rsquo; + #13#10 +
    &amp;lsquo;where job = &amp;lsquo;&amp;rsquo;&lt;span class="caps"&gt;MANAGER&lt;/span&gt;&amp;rsquo;&amp;lsquo;&amp;rsquo; + #13#10 +
    &amp;lsquo;group by deptno&amp;rsquo; + #13#10 +
    &amp;lsquo;order by mgr_sal&amp;nbsp;desc&amp;rsquo;;&lt;/p&gt;
&lt;p&gt;为了这个目的,在PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; DEVELOPER中选中已写好的SQL语句,鼠标右键,
在弹出的菜单中找到 Special Copy。这个功能有一个子菜单,它显示了所有被定义的专用复制格式。
在选择了格式之后,被转换的代码就被储存在剪贴板上了,
这样你就可以粘贴它到相应工具的编辑器里了。
专用复制格式被定义在 &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer 安装目录下的 SpecialCopy 子目录里。
你可以改变预先确定的复制格式或者添加新的复制格式。
仅仅简单地添加一个带有 .copy 扩展名的文本文件就可以了,
它包含了一个针对 &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; 代码第一行的变量
(&lt;line_1&gt;)、一个针对 &lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; 代码最后一行的变量(&lt;line_N&gt;)
和一个针对所有其它行的变量(&lt;line_*&gt;)。下面是一个针对 Borland Delphi&amp;nbsp;的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;  ;PL/SQL Developer SpecialCopy definition for Borland Delphi&lt;/span&gt;
&lt;span class="code-line"&gt;  ;&amp;lt;line_1&amp;gt; for first line&lt;/span&gt;
&lt;span class="code-line"&gt;  ;&amp;lt;line_*&amp;gt; for all other lines&lt;/span&gt;
&lt;span class="code-line"&gt;  ;&amp;lt;line_N&amp;gt; for last line&lt;/span&gt;
&lt;span class="code-line"&gt;  ;&lt;/span&gt;
&lt;span class="code-line"&gt;  SQL := &amp;#39;&amp;lt;line_1&amp;gt;&amp;#39; + #13#10 +&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;#39;&amp;lt;line_*&amp;gt;&amp;#39; + #13#10 +&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;#39;&amp;lt;line_n&amp;gt;&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行需要为指派到 &lt;span class="caps"&gt;SQL&lt;/span&gt; 的变量加上前言,接下来需要有一个 &lt;span class="caps"&gt;CR&lt;/span&gt;/&lt;span class="caps"&gt;LF&lt;/span&gt; 对。
最后一行不需要有CR/&lt;span class="caps"&gt;LF&lt;/span&gt; 对,但需要用分号来终止。所有其它行仅仅需要 &lt;span class="caps"&gt;CR&lt;/span&gt;/&lt;span class="caps"&gt;LF&lt;/span&gt; 接在后面。
如果 &lt;line_1&gt; 和 &lt;line_n&gt; 都与 &lt;line_*&gt; 一样,你可以忽略它们。
在一些语言里,你需要对特定的字符使用换码序列。
例如,在 C++ 里,你要对 tab字符(&lt;span class="caps"&gt;ASCII&lt;/span&gt; 码为 9)使用 \t 。
要定义这些换码序列,请使用 #define 关键词:
&lt;code&gt;#define char(9) = \t
  #define \ = \\
  String("&amp;lt;line_1&amp;gt;\n") +
  String("&amp;lt;line_*&amp;gt;\n") +
  String("&amp;lt;line_n&amp;gt;");&lt;/code&gt;
你还可以使用 &amp;ldquo;#define compress&amp;rdquo;来指出你要从结果里移除所有多余的空字符(空格、制表符和换行)。
注意,.copy&amp;nbsp;文件的名字将被包括在菜单里,所以你应该使用描述性的文件名。&lt;/p&gt;
&lt;ol start="17"&gt;
&lt;li&gt;
&lt;p&gt;在PL/&lt;span class="caps"&gt;SQL&lt;/span&gt; DEVELOPER中复制行记录的简便方法
(1) 单击要拷贝的行记录左边的黑色小三角,该行被选中,右键复制。
(2) 粘贴至记事本里,然后复制刚才粘贴的内容。(该步骤不知何故不能缺)
(3)&amp;nbsp;单击新记录左边的黑色小三角,右键粘贴即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快捷键定义的位置:
Tools-&amp;gt;Preferences-&amp;gt;User Interface-&amp;gt;Key configuration
选中需要定义的Item,然后按一个快捷键组合即可,
如果所按的快捷键已有定义,会有提示,这时候Cancel,另外选择快捷键组合即可;
通常情况下,打开PLSQL Developer后,最经常干的事就是打开SQL Window和Command Window,
就给这两个操作定义了快捷键, &lt;span class="caps"&gt;ALT&lt;/span&gt;+S 和 &lt;span class="caps"&gt;ALT&lt;/span&gt; + C,这样拿鼠标点三下的事情只需要按一下键。
设置方法:
  菜单Tools -&amp;gt; Preferences -&amp;gt; Key&amp;nbsp;Configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意:
  如果设置了快捷键不起作用,
  回到Tools -&amp;gt; Preferences -&amp;gt; Key Configuration界面,
  点击最上方的&amp;rdquo;Default Administrator&amp;rdquo;右边的&amp;rdquo;&amp;hellip;&amp;rdquo;按钮,
  在弹出的&amp;rdquo;Preference Set&amp;rdquo;界面中,对&amp;rdquo;Personal Preferences&amp;rdquo;&amp;nbsp;以及下面的&amp;rdquo;Definition&amp;rdquo;-&amp;gt;&amp;rdquo;Description&amp;rdquo;进行一下设置.&lt;/p&gt;
&lt;ol start="19"&gt;
&lt;li&gt;
&lt;p&gt;在窗口标题栏内显示文件的完全路径
Tools-&amp;gt;Preferences-&amp;gt;User Interface-&amp;gt;Options
勾选&amp;rdquo;Show complete file path in windows&amp;nbsp;titles&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object Brower中自定义Object的顺序以及登录后默认自动选中My Objects&lt;br&gt;
默认情况下,&lt;span class="caps"&gt;PL&lt;/span&gt;/&lt;span class="caps"&gt;SQL&lt;/span&gt; Developer登录后,Brower里会选择All objects,
如果你登录的用户是dba,要展开tables目录,正常情况都需要Wait几秒钟,
而选择My Objects后响应速率则是以毫秒计算的。
设置方法:
  Tools菜单 -&amp;gt; Object Brower Filters,会打开Define Browser Filters界面,
  选中&amp;rdquo;My Objects&amp;rdquo;,并勾选 &amp;ldquo;Default&amp;rdquo; 设为默认即可。
  Tools菜单 -&amp;gt; Object Brower Folders,会打开Define Browser Folders界面,
  这里可以把经常用到的几个目录(比如:Tables Views Seq Functions Procedures)&amp;nbsp;移得靠上一点,并加上颜色区分,这样你的平均寻表时间会大大缩短,试试看。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击即显示表数据
鼠标双击表或者视图时的默认响应实在让我感到失望,因为我最关心的是表结构和数据,
但是双击后这两件事情都没有发生,也许默认响应是高手们需要的,
但对我来说查看数据和表结构是最主要的,其他的我不关心。
不过好的是这是可以设置的,你可以给鼠标双击和拖放绑定需要的事件,
比如:双击编辑数据,拖放显示表结构,Yeah！
设置方法:
  菜单Tools -&amp;gt; Preferences -&amp;gt; Object Browser,
  在右侧,为不同的Object&amp;nbsp;Type绑定双击和拖放操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;去掉注释的斜体样式:
  菜单Tools -&amp;gt; Preferences -&amp;gt; User Interface-&amp;gt;Editor
  在右边的界面中&amp;rdquo;Syntax&amp;nbsp;Highlighting&amp;rdquo;下,去掉&amp;rdquo;Comment&amp;rdquo;右边的&amp;rdquo;Italic&amp;rdquo;的勾选.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Oracle"></category></entry><entry><title>“ORA-28547：connection to server failed,probable Oracle Net admin error”的解决步骤（navicat,toad,plsql developer工具通用）</title><link href="https://pingbook.top/articles/oracle-ora-28547/" rel="alternate"></link><published>2018-09-06T23:47:51+08:00</published><updated>2018-09-06T23:47:51+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-06:/articles/oracle-ora-28547/</id><summary type="html">&lt;h3 id="_1"&gt;错误&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;连接oracle 11g突然蹦出了一个错误“&lt;strong&gt;&lt;span class="caps"&gt;ORA&lt;/span&gt;-28547：connection to server failed,probable …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;h3 id="_1"&gt;错误&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;连接oracle 11g突然蹦出了一个错误“&lt;strong&gt;&lt;span class="caps"&gt;ORA&lt;/span&gt;-28547：connection to server failed,probable Oracle Net admin error&lt;/strong&gt;”，见下图，我勒个去，真是郁闷死了，无奈在网上搜索了好久找到了解决方法，写下来了以便以后参考。
&lt;img alt="测试图片显示" src="http://images.cnblogs.com/cnblogs_com/juddhu/201203/201203072158367496.png"&gt;&lt;/p&gt;
&lt;h4 id="1"&gt;1. 第一个方法解决方案&lt;a class="headerlink" href="#1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;listener.ora是服务器端的配置oracle的文件。&lt;/p&gt;
&lt;p&gt;后来将listener.ora的这一行注释掉，就行了，， (&lt;span class="caps"&gt;PROGRAM&lt;/span&gt; = extproc)&amp;nbsp;修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;SID_LIST_LISTENER =&lt;/span&gt;
&lt;span class="code-line"&gt;  (SID_LIST =&lt;/span&gt;
&lt;span class="code-line"&gt;  (SID_DESC =&lt;/span&gt;
&lt;span class="code-line"&gt;  (SID_NAME = prod)&lt;/span&gt;
&lt;span class="code-line"&gt;  (ORACLE_HOME = /u01/app/oracle/product/10.2.0/db_1)&lt;/span&gt;
&lt;span class="code-line"&gt; # (PROGRAM = extproc)&lt;/span&gt;
&lt;span class="code-line"&gt;  )&lt;/span&gt;
&lt;span class="code-line"&gt;  )&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;LISTENER =&lt;/span&gt;
&lt;span class="code-line"&gt;  (DESCRIPTION_LIST =&lt;/span&gt;
&lt;span class="code-line"&gt;  (DESCRIPTION =&lt;/span&gt;
&lt;span class="code-line"&gt;  (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.8)(PORT = 1522))&lt;/span&gt;
&lt;span class="code-line"&gt;  (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC0))&lt;/span&gt;
&lt;span class="code-line"&gt;  )&lt;/span&gt;
&lt;span class="code-line"&gt;  )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_2"&gt;第二种解决方案&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;参考文章：&lt;a href="https://forums.oracle.com/forums/message.jspa?messageID=693607"&gt;https://forums.oracle.com/forums/message.jspa?messageID=693607&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整理如下：&lt;/p&gt;
&lt;p&gt;客户端的配置文件sqlnet.ora中配置如下：&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;#SQLNET.AUTHENTICATION_SERVICES= (NTS)&lt;/code&gt;注释掉，改成如下即可！&lt;/p&gt;
&lt;p&gt;如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;SQLNET.AUTHENTICATION_SERVICES= (NONE)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时修改监听器配置文件，具体做法是： 在oracle安装目录下搜索listener.ora文件，一般在$/&lt;span class="caps"&gt;NETWORK&lt;/span&gt;/ADMIN目录下，把主机名用ip地址代替，例如(&lt;span class="caps"&gt;ADDRESS&lt;/span&gt; = (&lt;span class="caps"&gt;PROTOCOL&lt;/span&gt; = &lt;span class="caps"&gt;TCP&lt;/span&gt;)(&lt;span class="caps"&gt;HOST&lt;/span&gt; = &lt;span class="caps"&gt;HBONLINE1&lt;/span&gt;)(&lt;span class="caps"&gt;PORT&lt;/span&gt; = 1523))改为(&lt;span class="caps"&gt;ADDRESS&lt;/span&gt; = (&lt;span class="caps"&gt;PROTOCOL&lt;/span&gt; = &lt;span class="caps"&gt;TCP&lt;/span&gt;)(&lt;span class="caps"&gt;HOST&lt;/span&gt; = 168.168.168.42)(&lt;span class="caps"&gt;PORT&lt;/span&gt; =&amp;nbsp;1523))。&lt;/p&gt;
&lt;h4 id="_3"&gt;第三种解决方案&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;如果你以上使用的是plsql&amp;nbsp;developer工具或者是toad工具，应该以上的操作就绝对可以解决你的问题，&lt;/p&gt;
&lt;p&gt;但是如果你使用的是navicat工具，以上怕是还不能解决你的问题。具体的如果在navicat工具上使用就是如下的问题：&lt;/p&gt;
&lt;p&gt;Oracle基本是默认安装，安装过程没出现过任何异常
Oracle开启了两个服务：OracleServiceORCL和OracleOraDb11g_home1TNSListener
Navicat一直都连接不上本地的Oracle
网上搜了一大堆资料，大都是改那3个配置文件的
最终还是没能解决这个问题
最终的问题是：
Navicat主机那里如果填本机IP地址（192.168.18.8），错误代码是：&lt;span class="caps"&gt;ORA&lt;/span&gt;-12541：&lt;span class="caps"&gt;TNS&lt;/span&gt;：no listener
如果填localhost，错误代码是：&lt;strong&gt;&lt;span class="caps"&gt;ORA&lt;/span&gt;-28547：connection to server failed，probable Oracle Net admin error&lt;/strong&gt;
tnsping localhost 是通的，tnsping 192.168.18.8 则出错 &lt;span class="caps"&gt;TNS&lt;/span&gt;-12541: &lt;span class="caps"&gt;TNS&lt;/span&gt;:&amp;nbsp;无监听程序&lt;/p&gt;
&lt;p&gt;解决的方案是：&lt;/p&gt;
&lt;p&gt;oci.dll的版本不对&lt;br&gt;
 从 &lt;a href="http://www.oracle.com/technology/software/tech/oci/instantclient/index.html"&gt;http://www.oracle.com/technology/software/tech/oci/instantclient/index.html&lt;/a&gt; 下载client. 里面很多，根据你的版本来下，我下载的是instantclient_11_1。&lt;br&gt;
在navicat的 工具-选项-其他-&lt;span class="caps"&gt;OCI&lt;/span&gt; ,选择刚下的client中的 oci.dll&lt;br&gt;&amp;nbsp;设置环境变量：  &lt;/p&gt;
&lt;p&gt;1)在环境变量PATH中开头增加C:\Instantclient10_2;&lt;br&gt;
  2)增加用户环境变量SQLPATH，值为C:\Instantclient10_2&lt;br&gt;
  3)增加用户环境变量NLS_LANG，值为AMERICAN_AMERICA.&lt;span class="caps"&gt;UTF8&lt;/span&gt;&lt;br&gt;
  选择 Basic&amp;nbsp;连接，就大概能连接上了  &lt;/p&gt;
&lt;p&gt;以上的操作可以通过如下进行查找：&lt;/p&gt;
&lt;p&gt;1、首先确认你的数据库已经启动了，可以用net start OracleServiceORCL&lt;br&gt;
2、其次确认你的侦听启动了否，用lsnrctl status查看，如果没有启动，用lsnrctl start启动.   &lt;br&gt;&amp;nbsp;3、以上启动后，直接打开sqlplus，输入用户名密码，无需输入服务名，直接登录即可。  &lt;/p&gt;</content><category term="Oracle"></category></entry><entry><title>Oracle中的decode的使用</title><link href="https://pingbook.top/articles/oracle-decode/" rel="alternate"></link><published>2018-09-06T23:34:45+08:00</published><updated>2018-09-06T23:34:45+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-06:/articles/oracle-decode/</id><summary type="html">&lt;p&gt;Oracle 中 decode&amp;nbsp;函数用法&lt;/p&gt;
&lt;h3 id="_1"&gt;含义解释&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;decode(条件,值1,返回值1,值2 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Oracle 中 decode&amp;nbsp;函数用法&lt;/p&gt;
&lt;h3 id="_1"&gt;含义解释&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;decode(条件,值1,返回值1,值2,返回值2,&amp;hellip;值n,返回值n,缺省值)&lt;/p&gt;
&lt;p&gt;该函数的含义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;IF 条件=值1 THEN &lt;/span&gt;
&lt;span class="code-line"&gt;　　　　RETURN(翻译值1) &lt;/span&gt;
&lt;span class="code-line"&gt;ELSIF 条件=值2 THEN &lt;/span&gt;
&lt;span class="code-line"&gt;　　　　RETURN(翻译值2)  &lt;/span&gt;
&lt;span class="code-line"&gt;　　　　......&lt;/span&gt;
&lt;span class="code-line"&gt;ELSIF 条件=值n THEN&lt;/span&gt;
&lt;span class="code-line"&gt;　　　　RETURN(翻译值n)&lt;/span&gt;
&lt;span class="code-line"&gt;ELSE&lt;/span&gt;
&lt;span class="code-line"&gt;　　　　RETURN(缺省值)&lt;/span&gt;
&lt;span class="code-line"&gt;END IF&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;decode(字段或字段的运算，值1，值2，值3）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回值3&amp;nbsp;当然值1，值2，值3也可以是表达式，这个函数使得某些sql语句简单了许多&lt;/p&gt;
&lt;h3 id="_2"&gt;使用方法&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1、&lt;strong&gt;比较大小&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;select decode(sign(变量1-变量2),-1,变量1,变量2) from dual; --取较小值  &lt;/span&gt;
&lt;span class="code-line"&gt;sign()函数根据某个值是0、正数还是负数，分别返回0、1、-1  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如：&lt;br&gt;
变量1=10，变量2=20&lt;br&gt;&amp;nbsp;则sign(变量1-变量2)返回-1，decode解码结果为“变量1”，达到了取较小值的目的。  &lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;此函数用在SQL语句中，功能介绍如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Decode函数与一系列嵌套的 &lt;span class="caps"&gt;IF&lt;/span&gt;-&lt;span class="caps"&gt;THEN&lt;/span&gt;-ELSE语句相似。base_exp与compare1,compare2等等依次进行比较。如果base_exp和 第i 个compare项匹配，就返回第i 个对应的value 。如果base_exp与任何的compare值都不匹配，则返回default。每个compare值顺次求值，如果发现一个匹配，则剩下的compare值（如果还有的话）就都不再求值。一个为NULL的base_exp被认为和NULL compare值等价。如果需要的话，每一个compare值都被转换成和第一个compare&amp;nbsp;值相同的数据类型，这个数据类型也是返回值的类型。&lt;/p&gt;
&lt;p&gt;Decode函数在实际开发中非常的有用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结合Lpad函数，如何使主键的值自动加1并在前面补0&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;select LPAD(decode(count(记录编号),0,1,max(to_number(记录编号)+1)),14,&amp;#39;0&amp;#39;) 记录编号 from tetdmis&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;select decode(dir,1,0,1) from a1_interval&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;dir 的值是1变为0，是0则变为1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如我要查询某班男生和女生的数量分别是多少?&lt;/p&gt;
&lt;p&gt;通常我们这么写:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;select count(*) from 表 where 性别 ＝ 男；&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;select count(*) from 表 where 性别 ＝ 女；&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要想显示到一起还要union一下，太麻烦了&lt;/p&gt;
&lt;p&gt;用decode呢，只需要一句话&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;select decode(性别，男，1，0），decode(性别，女，1，0） from 表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、order&amp;nbsp;by对字符列进行特定的排序&lt;/p&gt;
&lt;p&gt;大家还可以在Order&amp;nbsp;by中使用Decode。&lt;/p&gt;
&lt;p&gt;例：表table_subject，有subject_name列。要求按照：语、数、外的顺序进行排序。这时，就可以非常轻松的使用Decode完成要求了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;select * from table_subject order by decode(subject_name, &amp;#39;语文&amp;#39;, 1, &amp;#39;数学&amp;#39;, 2, , &amp;#39;外语&amp;#39;,3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Oracle"></category></entry><entry><title>mybatis connection error Cannot create PoolableConnectionFactory (Access denied for user ‘root ‘@’local</title><link href="https://pingbook.top/articles/mybatis-poolableconnectionfactory/" rel="alternate"></link><published>2018-09-06T23:26:35+08:00</published><updated>2018-09-06T23:26:35+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-06:/articles/mybatis-poolableconnectionfactory/</id><summary type="html">&lt;h3 id="_1"&gt;异常错误&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;org.mybatis.spring.MyBatisSystemException: nested exception is org.apache …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="_1"&gt;异常错误&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: &lt;/span&gt;
&lt;span class="code-line"&gt;### Error querying database. Cause: org.springframework.jdbc.CannotGetJdbcConnectionException:&lt;/span&gt;
&lt;span class="code-line"&gt;Could not get JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException:&lt;/span&gt;
&lt;span class="code-line"&gt;Cannot create PoolableConnectionFactory (Access denied for user &amp;#39;root &amp;#39;@&amp;#39;localhost&amp;#39; (using password: YES))&lt;/span&gt;
&lt;span class="code-line"&gt;### The error may exist in com/sample/mappers/EmployeeMapper.xml&lt;/span&gt;
&lt;span class="code-line"&gt;### The error may involve com.sample.dao.EmployeeDao.listall&lt;/span&gt;
&lt;span class="code-line"&gt;### The error occurred while executing a query&lt;/span&gt;
&lt;span class="code-line"&gt;### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException:&lt;/span&gt;
&lt;span class="code-line"&gt;Could not get JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException:&lt;/span&gt;
&lt;span class="code-line"&gt;Cannot create PoolableConnectionFactory (Access denied for user &amp;#39;root &amp;#39;@&amp;#39;localhost&amp;#39; (using password: YES))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;解决方法&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个问题大致就是需要检查你的数据源配置即Resource中的：url,username,password&lt;/p&gt;
&lt;p&gt;url这个一般是&amp;rdquo;jdbc:mysql://localhost:3306/test&amp;rdquo;,一定要注意3306，这个是你数据库连接用的端口,可以把它改成别的，但是如果你用的tomcat容器，别把它写成8080，这样就会产生Cannot create PoolableConnectionFactory (Communications link failure问题，还有就是url=jdbc:mysql://localhost:3306/test中的localhost，也不是随便配置的，要看你的数据库中的from&amp;nbsp;host&lt;/p&gt;
&lt;p&gt;我当时实在MySql Workbench5.2 CE中的 Users and Privileges中，有个Server Access&amp;nbsp;Management&lt;/p&gt;
&lt;p&gt;User  From Host 你看From Host中有没有localhost，如果有你就能写成url=jdbc:mysql://localhost:3306/test，要是from&amp;nbsp;host有127.0.0.1的话，也可以写成url=jdbc:mysql://127.0.0.1:3306/test&lt;/p&gt;
&lt;p&gt;还有就是 username=  这个一定要写正确，我当时写的是name= ，结果mysql找不到username，然后他自动把username设为&amp;rdquo;&amp;ldquo;，以至于错误提示： java.sql.SQLException: Access denied for user ‘’ @&amp;rsquo;localhost&amp;rsquo; (using password: &lt;span class="caps"&gt;YES&lt;/span&gt;)&amp;nbsp;你看到@前面是两个单引号了吗，那就是我没输入username而导致默认的默认username，其实这个错误也可以用设置权限改，但是那是mysql内容，就不说了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总结起来就是：url端口要写对，不能写其他程序被占用的，127.0.01还是localhost要看数据库里面有哪个，还要就是把对的驱动放入项目中的WEB-&lt;span class="caps"&gt;INF&lt;/span&gt;/lib里，这里提一下不用再放到tomcat的lib中。&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Mybatis"></category></entry><entry><title>VirtualBox安装苹果虚拟机镜像MacOS 10.13/10.14 Beta6(2018-09-05更新)</title><link href="https://pingbook.top/articles/install-mac-virtuabox/" rel="alternate"></link><published>2018-09-06T20:24:45+08:00</published><updated>2018-09-06T20:24:45+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-06:/articles/install-mac-virtuabox/</id><summary type="html">&lt;h3 id="_1"&gt;准备工作&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;测试时间:&amp;nbsp;2018.09.05&lt;/li&gt;
&lt;li&gt;VirtualBox版本:&amp;nbsp;5.2.18&lt;/li&gt;
&lt;li&gt;MacOS镜像版本 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3 id="_1"&gt;准备工作&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;测试时间:&amp;nbsp;2018.09.05&lt;/li&gt;
&lt;li&gt;VirtualBox版本:&amp;nbsp;5.2.18&lt;/li&gt;
&lt;li&gt;MacOS镜像版本：MacOS High Sierra&amp;nbsp;10.13&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;下载地址:   &lt;a href="https://blog.csdn.net/icarus666/article/details/79536388"&gt;https://blog.csdn.net/icarus666/article/details/79536388&lt;/a&gt;中下载的镜像&lt;/li&gt;
&lt;li&gt;网盘下载: &lt;a href="https://pan.baidu.com/s/1QJmfh9iV273bDA-fy9UfCg"&gt;macOS High Sierra&amp;nbsp;10.13.iso&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;MacOS vmdk镜像版本: MacOS Mojave 10.14 Beta&amp;nbsp;6&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;百度网盘下载地址: &lt;a href="https://pan.baidu.com/s/1XX-m7VG02_NL0rDmtuW7hQ"&gt;百度网盘 Mac &lt;span class="caps"&gt;OS&lt;/span&gt; 10.14 Beta6&lt;/a&gt;&amp;nbsp;,密码：ni2b&lt;/li&gt;
&lt;li&gt;Google Driver下载地址: &lt;a href="https://drive.google.com/drive/folders/11YdpDxm32Odk9lBeBj7HLeN4XEZP59sd?usp=sharing"&gt;Google Driver for Mac 10.14&amp;nbsp;Beta6&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;测试结果: VirtualBox中&lt;strong&gt;成功安装MacOS 10.13/10.14 Beta&amp;nbsp;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;参考地址&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://techsviewer.com/install-macos-10-14-mojave-virtualbox-windows/"&gt;MacOS 10.14 beta 6安装步骤博客,更新日期 2018-09-04(&lt;strong&gt;推荐&lt;/strong&gt;)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://techsviewer.com/install-macos-high-sierra-virtualbox-windows/"&gt;MacOS 10.13.6安装步骤博客,更新日期&amp;nbsp;2018-09-04&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/xiangyuecn/article/details/79867173"&gt;MacOS&amp;nbsp;10.13安装步骤博客&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/ios9/p/7519302.html"&gt;MacOS&amp;nbsp;10.13镜像下载地址&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/249d4998aa0c"&gt;Cordova安装配置&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mac-os"&gt;创建Mac OS虚拟机镜像&lt;a class="headerlink" href="#mac-os" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在VirtualBox中新建一个虚拟机,名称需要跟下面的命令行中的一样,例如本例中的:&lt;strong&gt;MacOS10.14Beta6&lt;/strong&gt;,虚拟机类型为: &lt;strong&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X&lt;/strong&gt;, 版本为: &lt;strong&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X(64 bit)&lt;/strong&gt;, 设置一个内存,最好大于3G,在虚拟硬盘中选择&amp;rdquo;使用已有的虚拟硬盘&amp;rdquo;,然后选择上面提供的vmdk虚拟机文件,如下截图:
&lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_install.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;镜像安装前用到的修改命令&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;关闭虚拟机在命令行对新建的虚拟机进行如下配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;----- For Mac OS 10.14 Beta 6&lt;/span&gt;
&lt;span class="code-line"&gt;cd &amp;quot;C:\Program Files\Oracle\VirtualBox\&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage.exe modifyvm &amp;quot;MacOS10.14Beta6&amp;quot; --cpuidset 00000001 000106e5 00100800 0098e3fd bfebfbff&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.14Beta6&amp;quot; &amp;quot;VBoxInternal/Devices/efi/0/Config/DmiSystemProduct&amp;quot; &amp;quot;iMac11,3&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.14Beta6&amp;quot; &amp;quot;VBoxInternal/Devices/efi/0/Config/DmiSystemVersion&amp;quot; &amp;quot;1.0&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.14Beta6&amp;quot; &amp;quot;VBoxInternal/Devices/efi/0/Config/DmiBoardProduct&amp;quot; &amp;quot;Iloveapple&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.14Beta6&amp;quot; &amp;quot;VBoxInternal/Devices/smc/0/Config/DeviceKey&amp;quot; &amp;quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.14Beta6&amp;quot; &amp;quot;VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC&amp;quot; 1&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;---- For Mac OS 10.13.6&lt;/span&gt;
&lt;span class="code-line"&gt;cd &amp;quot;C:\Program Files\Oracle\VirtualBox\&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage.exe modifyvm &amp;quot;MacOS10.13.6&amp;quot; --cpuidset 00000001 000106e5 00100800 0098e3fd bfebfbff&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.13.6&amp;quot; &amp;quot;VBoxInternal/Devices/efi/0/Config/DmiSystemProduct&amp;quot; &amp;quot;iMac11,3&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.13.6&amp;quot; &amp;quot;VBoxInternal/Devices/efi/0/Config/DmiSystemVersion&amp;quot; &amp;quot;1.0&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.13.6&amp;quot; &amp;quot;VBoxInternal/Devices/efi/0/Config/DmiBoardProduct&amp;quot; &amp;quot;Iloveapple&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.13.6&amp;quot; &amp;quot;VBoxInternal/Devices/smc/0/Config/DeviceKey&amp;quot; &amp;quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata &amp;quot;MacOS10.13.6&amp;quot; &amp;quot;VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC&amp;quot; 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="mac-os_1"&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt; 安装遇到的问题&lt;a class="headerlink" href="#mac-os_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;错误提示 `Querying &amp;ldquo;&lt;span class="caps"&gt;UUID&lt;/span&gt;&amp;rdquo; failed&amp;nbsp;(VERR_CFGM_VALUE_NOT_FOUND)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Solution: because of &lt;span class="caps"&gt;EFI&lt;/span&gt; settings. If you already tried all combinations of &lt;span class="caps"&gt;EFI&lt;/span&gt; and Chipset (4 cases) and it still doesn’t help then just give up. The &lt;span class="caps"&gt;VM&lt;/span&gt; won’t work on your machine. 只需要在如下设置里面勾选&amp;rdquo;&lt;strong&gt;启用EFI&lt;/strong&gt;&amp;ldquo;即可.如下截图:
&lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_error.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;When install &amp;rdquo; there is no enough free space on sierra custom installer to install&amp;nbsp;&amp;ldquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Solution: From the top menu, choose &amp;ldquo;Utilities&amp;rdquo;=&amp;gt; &amp;ldquo;Disk Utility&amp;rdquo;,and open the dialog, see below screnenshot:
&lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_error_2.png"&gt;
  then from the right check the virtualbox&amp;rsquo;s disk and select &amp;ldquo;Erasing&amp;rdquo;,and input the new disk name and format.etc. see below screenshot:
  &lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_error_3.png"&gt;
  Go back the install screenshot, or restart the virtualmachine, then you could see &amp;ldquo;&lt;span class="caps"&gt;YOUR&lt;/span&gt; &lt;span class="caps"&gt;DISK&lt;/span&gt; &lt;span class="caps"&gt;NAME&lt;/span&gt;&amp;rdquo; as an option on &amp;ldquo;Install &lt;span class="caps"&gt;OS&lt;/span&gt; X&amp;rdquo; screen as shown&amp;nbsp;above.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stuck at first screen: Open virtualbox, change Guest Version to Other 64bit, select tab &amp;ldquo;Storage&amp;rdquo; and enable &lt;strong&gt;&amp;ldquo;Use Host I/O Cache&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mouse and Keyboard not working: Install &amp;ldquo;Oracle &lt;span class="caps"&gt;VM&lt;/span&gt; VirtualBox Extension Pack&amp;rdquo; download from virtualbox website. Open VirtualBox, select tab &amp;ldquo;&lt;span class="caps"&gt;USB&lt;/span&gt;&amp;rdquo;, click enable &lt;span class="caps"&gt;USB&lt;/span&gt; 3.0 Controller and add your Mouse to VirtualBox or in the &lt;span class="caps"&gt;USB&lt;/span&gt; 3.0 Controller Device Filters leave &lt;strong&gt;Empty&lt;/strong&gt;.
&lt;img alt="测试图片显示" src="https://i1.wp.com/techsviewer.com/wp-content/uploads/2018/06/Enable-USB-3.0-in-VirtualBox.jpg?w=647&amp;amp;ssl=1"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="mac-os-nodejs"&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt; 安装nodejs&lt;a class="headerlink" href="#mac-os-nodejs" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;control + space&amp;nbsp;打开spotlight,输入“终端”，就打开了终端，类似win下的cmd;&lt;/li&gt;
&lt;li&gt;输入 node -v ,&amp;nbsp;回车;&lt;/li&gt;
&lt;li&gt;输入 npm -v ,&amp;nbsp;回车;&lt;/li&gt;
&lt;li&gt;若无错，则显示版本号;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="mac-os-cordova"&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt; 安装cordova&lt;a class="headerlink" href="#mac-os-cordova" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; sudo npm install -g cordova   &lt;/span&gt;
&lt;span class="code-line"&gt;1. cordova  create VRPanoApp com.yitieyilu.app VRPanoApp&lt;/span&gt;
&lt;span class="code-line"&gt;# 参数名称对应的是: 文件夹名称 包名称 和app名称&lt;/span&gt;
&lt;span class="code-line"&gt;2. cordova platforms add android&lt;/span&gt;
&lt;span class="code-line"&gt;   cordova platforms add ios&lt;/span&gt;
&lt;span class="code-line"&gt;   cordova plugin add cordova-plugin-splashscreen --save&lt;/span&gt;
&lt;span class="code-line"&gt;   cordova plugin add cordova-plugin-console --save&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;如果没有sudo则会报错，原因：由于 root 用户在 &lt;span class="caps"&gt;OS&lt;/span&gt; X 中具有特殊权限，因此对于特定的管理或故障诊断任务可能非常有用，但不适合日常使用。如果使用不慎，root 用户作出的更改可能只有通过重装 &lt;span class="caps"&gt;OS&lt;/span&gt; X 才能修复。考虑使用其他方式（如 sudo 命令）来代替启用 root&amp;nbsp;用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="mac-os-cordova_1"&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt; 安装cordova依赖&lt;a class="headerlink" href="#mac-os-cordova_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo npm install -g ios-deploy - -unsafe-perm=t    //代表真机运行环境  &lt;/span&gt;
&lt;span class="code-line"&gt;sudo npm install -g ios-sim                       //代表模拟器运行环境  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="virtualboxmac-os-x"&gt;virtualbox设置MAC &lt;span class="caps"&gt;OS&lt;/span&gt; X虚拟机共享剪切板&lt;a class="headerlink" href="#virtualboxmac-os-x" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;设置-&amp;gt;高级-&amp;gt;共享剪切板 双向，拖拽&amp;nbsp;双向 &lt;/li&gt;
&lt;li&gt;虚拟机设置-存储-控制器SATA-勾选”使用主机输入输出(I/O)缓存” &lt;/li&gt;
&lt;li&gt;存储-控制器SATA-点击*.vdi-勾选”固态驱动器” &lt;/li&gt;
&lt;li&gt;启动虚拟机-&amp;gt;左上角divices-&amp;gt;insert additional&amp;nbsp;… &lt;/li&gt;
&lt;li&gt;重启虚拟机&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="mac-os_2"&gt;Mac OS虚拟机大小写切换，中英文切换&lt;a class="headerlink" href="#mac-os_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中文小写英文切换：  &lt;/p&gt;
&lt;p&gt;&amp;ndash;按一下caps lock键就可以实现中文小写英文切换
*&amp;nbsp;大小写切换：&lt;/p&gt;
&lt;p&gt;&amp;ndash;不管是在中文状态下还是小写英文状态下，只要按住&lt;strong&gt;shift&lt;/strong&gt;键就可以实现大写输入
*&amp;nbsp;大小写切换其他方式：  &lt;/p&gt;
&lt;p&gt;&amp;ndash;长按住caps lock键2s，caps lock灯亮即可切换到大写输入状态，这种情况适合于连续输入好多大写字母。输完了轻点一下caps&amp;nbsp;lock就可以切换到非大写状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-update-macos-x"&gt;How to update MacOS X&lt;a class="headerlink" href="#how-to-update-macos-x" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;发现使用过iphone的就知道了,直接进入App Store 里面,然后搜索&lt;code&gt;MacOS&lt;/code&gt;,里面会看到对应的版本,或者它这里会提示你是否有新的版本可以下载,确实很方便. &lt;br&gt;
参考地址: &lt;a href="https://jingyan.baidu.com/article/647f0115e342b97f2148a8ad.html"&gt;https://jingyan.baidu.com/article/647f0115e342b97f2148a8ad.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="install-xcode-10-beta-6"&gt;Install XCode 10 beta 6&lt;a class="headerlink" href="#install-xcode-10-beta-6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Need to upgrade Mac to the latest version, because XCode 10 Beta 6 need the Mac Version is Mac 10.13.6 or&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/news/releases/"&gt;XCode对应的Mac版本列表&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="how-to-change-the-display-resolution"&gt;How to change the display resolution&lt;a class="headerlink" href="#how-to-change-the-display-resolution" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://techsviewer.com/how-to-enter-full-screen-mode-macos-virtualbox/"&gt;参考地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Virtualbox&amp;rsquo;s virtual machine screen is too small, the below command to change the display&amp;nbsp;resolution: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;cd &amp;quot;C:\Program Files\Oracle\VirtualBox\&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;--- For Mac OS 10.14 beta 6&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage setextradata “MacOS10.14Beta6” VBoxInternal2/EfiGraphicsResolution 1920x1080&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;--- For Mac OS 10.13&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage.exe setextradata global GUI/MaxGuestResolution any&lt;/span&gt;
&lt;span class="code-line"&gt;VBoxManage.exe setextradata &amp;quot;MacOS10.13&amp;quot; &amp;quot;CustomVideoMode1&amp;quot; &amp;quot;1920x1080x32&amp;quot;&lt;/span&gt;
&lt;span class="code-line"&gt;vboxmanage.exe controlvm &amp;quot;MacOS10.13&amp;quot; setvideomodehint 1920 1080 32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="google-driver"&gt;如何下载Google Driver中的文件&lt;a class="headerlink" href="#google-driver" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不要使用迅雷, 使用这个工具 &lt;a href="http://mirror2.internetdownloadmanager.com/idman631build3.exe"&gt;Internet Download Manager 6.31 build 3&lt;/a&gt;, 需要用到的 &lt;a href="http://11269771.ch1.data.tv002.com:443/down/323cc5a8d9d9b98164e9f2a82a4dc3a3-46166/IDM_6.2x_Crack_v16.1.7z?cts=f-D60A191A142A27F70ae9&amp;amp;ctp=60A191A142A27&amp;amp;ctt=1536152168&amp;amp;limit=1&amp;amp;spd=90000&amp;amp;ctk=53d40088971e808d5f50e97b9c3c9ad9&amp;amp;chk=323cc5a8d9d9b98164e9f2a82a4dc3a3-46166&amp;amp;mtd=1"&gt;破解补丁&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;然后打开你的代理软件,回到Internet Download&amp;nbsp;Manager中,选择&amp;rdquo;选项&amp;rdquo;=&amp;gt;&amp;rdquo;代理服务器&amp;rdquo;,再在里面设置刚才对应的代理软件的主机和端口号.&lt;/li&gt;
&lt;li&gt;使用感觉: &lt;code&gt;这个工具使用起来发现比迅雷的下载速度还要快&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="virtualbox"&gt;Virtualbox桥接上网连接配置&lt;a class="headerlink" href="#virtualbox" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原理： &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过主机网卡，架设一条桥，直接连入到网络中。它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。&amp;nbsp;(虚拟机是通过主机所在网络中的DHCP服务得到ip地址的，所以按理来说，两者是完全独立的，但事实却是虚拟机是没有独立硬件的，它还是要依靠主机的网卡，因此，主机要断开网络，虚拟机也就没法拿到ip了，所以呵呵~~所有特点全消失咯）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置步骤&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.1 Windows&amp;nbsp;Host主机配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; 在Windows中的网络连接(控制面板\网络和 Internet\网络连接),查看Virtualbox自动生成的Host-Only网络,这里不需要做任何的修改,按照默认的配置即可.Host主机中自动生成的配置如下:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_share_bridge_4.png"&gt;&lt;/p&gt;
&lt;p&gt;2.2&amp;nbsp;VirtualBox中配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;点击VirtualBox的&amp;rdquo;管理&amp;rdquo;菜单,进入子菜单&amp;rdquo;主机网络管理器&amp;rdquo;,然后在里面会自动创建一个Host Only Network,只启用这一个网络,这里的配置同控制面板\网络和 Internet\网络连接中VritualBox自动生成的Host-Only网络信息是一样的.如下截图:  &lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_share_bridge_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;主机网络管理器&amp;rdquo;中选中这个新建的网络,然后在底部配置网卡和DHCP服务器,这里网卡选择&amp;rdquo;手动配置网卡&amp;rdquo;, &amp;ldquo;DHCP服务器&amp;rdquo;按照默认配置不用再配置,如下截图: &lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_share_bridge_3.png"&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.3 虚拟机Mac &lt;span class="caps"&gt;OS&lt;/span&gt;&amp;nbsp;Guest配置信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进入Mac系统, 点击左上角的苹果标志,选择&amp;rdquo;System Preferences&amp;rdquo;=&amp;gt; &amp;ldquo;Network&amp;rdquo;,点击进入查看对应的网络设置信息,默认情况下会采用DHCP自动获取IP地址,配置的网络信息同Host主机的网络信息一致,在同一个网络内.如下截图: &lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_share_bridge_1.png"&gt; &lt;/p&gt;
&lt;p&gt;更新日志: 反复测试发现,虚拟机中的IP地址最好是&lt;strong&gt;静态设置的IP&lt;/strong&gt;,发现DHCP形式的再桥接模式下,IP地址会变成: 165.254.&lt;em&gt;.&lt;/em&gt;,这个肯定是不能正常通信的.&amp;nbsp;注意一定要是静态的IP地址.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="save-xcode-space"&gt;Save XCode space&lt;a class="headerlink" href="#save-xcode-space" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;XCode had installed with &lt;span class="caps"&gt;15GB&lt;/span&gt; in my disk ,that&amp;rsquo;s terrible, try to use below guideline to free the&amp;nbsp;space:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://macperformanceguide.com/blog/2016/20161031_1600-XCode-saving-space.html"&gt;Saving up to 8.&lt;span class="caps"&gt;5GB&lt;/span&gt; of Space After Every Apple Xcode&amp;nbsp;Update&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="share-file-from-windows-host-to-mac-os-guest"&gt;Share file from Windows Host to Mac &lt;span class="caps"&gt;OS&lt;/span&gt; Guest&lt;a class="headerlink" href="#share-file-from-windows-host-to-mac-os-guest" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The main problem is that how we can setup the Brige connection from host to guest machine? the steps for this you can refer above &lt;strong&gt;Virtualbox桥接上网连接配置&lt;/strong&gt; Section. Then following below&amp;nbsp;steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Mac电脑中,点击左上角的苹果标志,选择&amp;rdquo;System Preferences&amp;rdquo;=&amp;gt; &amp;ldquo;Sharing&amp;rdquo;, 选择 &amp;ldquo;File Sharing&amp;rdquo;,你也可以点击&amp;rdquo;Options&amp;hellip;&amp;rdquo;按钮进行高级的配置,如下截图:
&lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_share_bridge_5.png"&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Windows主机上,直接在地址栏中输入地址: &lt;strong&gt;&amp;#92;你的Mac &lt;span class="caps"&gt;OS&lt;/span&gt; Guest的IP Addess&lt;/strong&gt;, 按照提示输入对应的账号密码即可访问Mac OS中的文件系统,如下截图:
&lt;img alt="测试图片显示" src="https://pingbook.top/articles/install-mac-virtuabox/mac_share_bridge_6.png"&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;未完待续&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;</content></entry><entry><title>七牛云配置详解(2018-09-04)</title><link href="https://pingbook.top/articles/qiniu-upload-config/" rel="alternate"></link><published>2018-09-04T17:48:48+08:00</published><updated>2018-09-04T17:48:48+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-04:/articles/qiniu-upload-config/</id><summary type="html">&lt;h4 id="_1"&gt;问题&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;针对不同的公司设置不同的对象存储空间参数,这样不同的公司他们的资源存放在他们的服务器上,我们不接触用户的数据.&amp;nbsp;可以保存用户的数据的安全.&lt;/p&gt;
&lt;h4 id="_2"&gt;配置&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用到的参数:
1. appKey
2 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h4 id="_1"&gt;问题&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;针对不同的公司设置不同的对象存储空间参数,这样不同的公司他们的资源存放在他们的服务器上,我们不接触用户的数据.&amp;nbsp;可以保存用户的数据的安全.&lt;/p&gt;
&lt;h4 id="_2"&gt;配置&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用到的参数:
1. appKey
2. appSecret
3.&amp;nbsp;BucketName&lt;/li&gt;
&lt;/ul&gt;</content><category term="七牛"></category></entry><entry><title>百度网盘不限速工具方式(2018-09-04更新)</title><link href="https://pingbook.top/articles/baiduyun-download-limit/" rel="alternate"></link><published>2018-09-04T13:46:27+08:00</published><updated>2018-09-04T13:46:27+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-04:/articles/baiduyun-download-limit/</id><summary type="html">&lt;h3 id="_1"&gt;参考&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参考的网页地址是: &lt;a href="https://www.runningcheese.com/baiduyun"&gt;https://www.runningcheese.com/baiduyun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;测试发现好用的是这款软件:&lt;a href="https://github.com/proxyee-down-org/proxyee-down/releases"&gt;https://github …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3 id="_1"&gt;参考&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参考的网页地址是: &lt;a href="https://www.runningcheese.com/baiduyun"&gt;https://www.runningcheese.com/baiduyun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;测试发现好用的是这款软件:&lt;a href="https://github.com/proxyee-down-org/proxyee-down/releases"&gt;https://github.com/proxyee-down-org/proxyee-down/releases&lt;/a&gt;,绿色免安装,直接点击即可运行.&lt;/li&gt;
&lt;/ul&gt;</content><category term="百度网盘"></category></entry><entry><title>萤石云SDK接入学习路线(更新中)</title><link href="https://pingbook.top/articles/ys-sdk-learn/" rel="alternate"></link><published>2018-09-04T13:46:11+08:00</published><updated>2018-09-04T13:46:11+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-09-04:/articles/ys-sdk-learn/</id><summary type="html">&lt;h3 id="_1"&gt;起因&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;公司需要接入摄像头的接口到我们自己的APP中,这样大家都可以在APP中查看施工现场的各个摄像头的情况动态.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;考察&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;考察了国内和国外使用的摄像头设备供应商和相关的二次开发提供方案,发现也是部分网友的推荐,有两个摄像头做得比较好,一个是海康威视的萤石平台和对应的海康平台,萤石平台主打的是中小型规模的,比如住宅商铺工厂什么的 …&lt;/p&gt;</summary><content type="html">&lt;h3 id="_1"&gt;起因&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;公司需要接入摄像头的接口到我们自己的APP中,这样大家都可以在APP中查看施工现场的各个摄像头的情况动态.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;考察&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;考察了国内和国外使用的摄像头设备供应商和相关的二次开发提供方案,发现也是部分网友的推荐,有两个摄像头做得比较好,一个是海康威视的萤石平台和对应的海康平台,萤石平台主打的是中小型规模的,比如住宅商铺工厂什么的,二对应大规模使用,比如施工现场,公共交通,治安防控和教育培训什么等等,推荐的是海康,他们有一套的系统解决方案.&amp;nbsp;还有一个厂家是大华,他们都是杭州本土的好像,做得比较成功在全国.在对比了他们相关的设备和产品的普遍性和二次开发方面的特性后,我们选择使用海康威视的监控设备.&lt;/p&gt;
&lt;h3 id="_3"&gt;开发文档&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;海康威视的开发文档, 进入海康威视官网&lt;a href="https://www.hikvision.com/cn/index.html"&gt;https://www.hikvision.com/cn/index.html&lt;/a&gt;,点击菜单的&amp;rdquo;服务支持&amp;rdquo;=&amp;gt;&amp;rdquo;下载&amp;rdquo;=&amp;gt;&amp;rdquo;SDK开发&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;萤石开发文档,进入萤石开发中心&lt;a href="https://open.ys7.com/"&gt;https://open.ys7.com/&lt;/a&gt;,选择&amp;rdquo;开发者服务&amp;rdquo;进入即可.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;接入步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;进入&amp;rdquo;开发者服务&amp;rdquo;页面,点击&amp;rdquo;我的应用&amp;rdquo;,这里新建一个你的应用,他们自动生成对应的OAuth对应的AppKey和Secret.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="萤石云"></category><category term="SDK"></category></entry><entry><title>Available license server</title><link href="https://pingbook.top/articles/jetbrain-idea-licenseserver/" rel="alternate"></link><published>2018-08-29T18:16:46+08:00</published><updated>2018-08-29T18:16:46+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-08-29:/articles/jetbrain-idea-licenseserver/</id><summary type="html">&lt;h4 id="0x01-intellij-idea-license-servers"&gt;#0x01 IntelliJ Idea license servers&lt;a class="headerlink" href="#0x01-intellij-idea-license-servers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;http://xidea.online/servers.html …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h4 id="0x01-intellij-idea-license-servers"&gt;#0x01 IntelliJ Idea license servers&lt;a class="headerlink" href="#0x01-intellij-idea-license-servers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;http://xidea.online/servers.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="0x02-intellij-idea-activate-code"&gt;#0x02 IntelliJ Idea Activate Code&lt;a class="headerlink" href="#0x02-intellij-idea-activate-code" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="0x03-related"&gt;#0x03 Related&lt;a class="headerlink" href="#0x03-related" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Latest avaiable Server update at &lt;a href="https://blog.csdn.net/zajule/article/details/80479988"&gt;Site&amp;nbsp;2018-10-25&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="IntelliJ Idea"></category></entry><entry><title>JavaScript字符串数组中随机选择字符串</title><link href="https://pingbook.top/articles/random_string/" rel="alternate"></link><published>2018-08-29T17:46:12+08:00</published><updated>2018-08-29T17:46:12+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-08-29:/articles/random_string/</id><summary type="html">&lt;h4 id="_1"&gt;代码&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; * 得到随机的字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; * @param arrayStr&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; * @returns {*}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;const&lt;span class="w"&gt; &lt;/span&gt;randomStrPickUp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;function&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;arrayStr&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;const …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h4 id="_1"&gt;代码&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; * 得到随机的字符串&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; * @param arrayStr&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; * @returns {*}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;const&lt;span class="w"&gt; &lt;/span&gt;randomStrPickUp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;function&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;arrayStr&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;const&lt;span class="w"&gt; &lt;/span&gt;len&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arrayStr&lt;span class="o"&gt;.&lt;/span&gt;length&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;const&lt;span class="w"&gt; &lt;/span&gt;min&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;const&lt;span class="w"&gt; &lt;/span&gt;max&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;len&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;const&lt;span class="w"&gt; &lt;/span&gt;range&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Math&lt;span class="o"&gt;.&lt;/span&gt;round&lt;span class="o"&gt;(&lt;/span&gt;Math&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;random&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;max&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;min&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;min&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;得到随机的范围&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arrayStr&lt;span class="err"&gt;[&lt;/span&gt;range&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="JavaScript"></category></entry><entry><title>vuejs項目转为android/IOS App(Cordova)</title><link href="https://pingbook.top/articles/vue-to-mobileapp-electron/" rel="alternate"></link><published>2018-08-27T17:19:43+08:00</published><updated>2018-08-27T17:19:43+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-08-27:/articles/vue-to-mobileapp-electron/</id><summary type="html">&lt;h2 id="how-to-build-android-or-ios-app-from-vue-project"&gt;How to build android or &lt;span class="caps"&gt;IOS&lt;/span&gt; app from Vue project …&lt;/h2&gt;</summary><content type="html">&lt;h2 id="how-to-build-android-or-ios-app-from-vue-project"&gt;How to build android or &lt;span class="caps"&gt;IOS&lt;/span&gt; app from Vue project&lt;a class="headerlink" href="#how-to-build-android-or-ios-app-from-vue-project" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="1-cordova"&gt;1. &lt;code&gt;cordova&lt;/code&gt; 环境准备&lt;a class="headerlink" href="#1-cordova" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="11-java-jdk"&gt;1.1 Java &lt;span class="caps"&gt;JDK&lt;/span&gt; 安装(省略)&lt;a class="headerlink" href="#11-java-jdk" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="12-android-sdk"&gt;1.2 Android &lt;span class="caps"&gt;SDK&lt;/span&gt; 安装配置&lt;a class="headerlink" href="#12-android-sdk" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先，下载Android &lt;span class="caps"&gt;SDK&lt;/span&gt; Tools，翻过墙的朋友可以去Google Android的官网上下载（http://developer.android.com/sdk/index.html）,&amp;nbsp;选择一个最新的版本就行了。如下图所示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_install.jpg"&gt;
*&amp;nbsp;按照提示一步步的安装完成后,回到安装目录如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_install_folder.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后就双击“&lt;span class="caps"&gt;SDK&lt;/span&gt; Manager.exe”，启动SDK&amp;nbsp;Manager，如图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_install_select.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这里我只说几个必须要安装的，如上图所示的，Tools文件夹里面的Android &lt;span class="caps"&gt;SDK&lt;/span&gt; Tools（这个我们在之前的一步已经下载好了的，
一般不会让你再安装了，不过有可能会让你更新），然后就是Android &lt;span class="caps"&gt;SDK&lt;/span&gt; Platform-tools和Android SDKBuild-tools，
注意只需要下载最新的版本就行了。
然后就是API的选择了。我们可以看到这里提供了很多很多从Android 2.2到Android 5.x的很多版本的API，那么怎么选择呢。
这里我建议，新手的话，选择一个最新的版本就好了，因为Android是向下兼容的。其他的以后你要用到了在下载就行了
（因为下载安装的速度实在太慢啦。。。）。所以如上图所示，这里我只选择了下载当前最新的Android 5.1.1(&lt;span class="caps"&gt;API&lt;/span&gt; 22)。
这里需要说明的是，如果你以后不打算用模拟器调试，而是一直用真机来调试的话，那么就可以不用装“system images“了。&amp;nbsp;不过新手的话，不知道怎么选择，还是建议直接全部勾上吧.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最后就是extras文件夹中的东西了，如下图所示:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_install_select_extra.jpg"&gt;&lt;/p&gt;
&lt;p&gt;理论上来说，extras中的东西如果网速允许，时间充沛的话，就都下载了。不过一开始安装的话，可以只用安装上图中的三个，即Android Support Repository、Android SupportLibrary和Google &lt;span class="caps"&gt;USB&lt;/span&gt; Driver。其他的以后有时间再慢慢下载吧。接下来就可以进行安装了,要注意，由于这些东西都是在google&amp;nbsp;的服务器上下载的。由于俺们天朝有墙，所以可能会出现连接不上的情况，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_install_select_error.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换到国内镜像进行安装
遇到上面的安装错误,我们可以通过有Android SDK的国内镜像服务器来下载安装，这里推荐几个,参考这里的: &lt;a href="http://tools.android-studio.org/index.php/proxy"&gt;http://tools.android-studio.org/index.php/proxy&lt;/a&gt;&amp;nbsp;随便选择一个就行啦。这里我选择的是第三个站点，即大连东软的镜像，使用方法如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_install_select_proxy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;然后在弹出的对话框中，填写HTTP Proxy Server为mirrors.neusoft.edu.cn（镜像服务器的地址，注意前面不要加http），然后填写HTTP Proxy Port为80 （端口号）。最后在勾选下面的『Forcehttps://&amp;hellip; sources to be fetched using&amp;nbsp;http://&amp;hellip;』复选框，如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_install_select_proxy_options.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接着点击close，关闭对话框，再&lt;strong&gt;重新启动SDK Manager&lt;/strong&gt;就行啦。&lt;br&gt;
经过漫长的下载安装过程后（建议在晚上睡觉的时候下载。。。），我们可以看到，之前选中安装的项目后面的状态都由之前的“Not&amp;nbsp;installed”变为了如今的“Installed”，这就表示我们已经安装成功了！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDK环境变量设置&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;右键我的电脑，打开属性，点击高级系统设置，打开环境变量.&amp;nbsp;新建一个环境变量名称为ANDROID_HOME，变量值为当前安装SDK的目录,例如SDK装在D:\androidSDK中，则环境变量为：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_config_1.png"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;把%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools添加到Path环境变量中。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;检测SDK 安装是否成功&lt;br&gt;
 1. win+R，输入cmd，打开命令提示符面板,输入&lt;code&gt;android&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_config_2.png"&gt;&lt;/p&gt;
&lt;p&gt;弹出类似以下界面：&lt;/p&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_config_3.png"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;输入&lt;code&gt;abd&lt;/code&gt;
弹出类似以下界面：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_config_4.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;输入&lt;code&gt;android -h&lt;/code&gt;
弹出类似以下界面说明安装完成.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/sdk_config_5.png"&gt;&lt;/p&gt;
&lt;p&gt;直至所有的Android&amp;nbsp;Sdk的环境配置部分都没有问题了.&lt;/p&gt;
&lt;h4 id="13-gradle"&gt;1.3 Gradle 环境配置&lt;a class="headerlink" href="#13-gradle" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;下载gradle
1. 进入&lt;a href="https://gradle.org/"&gt;点击打开链接&lt;/a&gt;官网首页,点击&lt;code&gt;install gradle&lt;/code&gt;,如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/gradle_install_1.png"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;进入新的页面之后，找到并点击下载完整版本（英文看不懂可以先将网站翻译成中文）,如下:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/gradle_install_2.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;下载完成之后，解压后放入自己想要放入的指定文件夹，我放入了C:\WorkSoftware\gradle-4.5,如下:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/gradle_install_3.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;同上安装android SDK一样,新建一个环境变量: &lt;code&gt;GRADLE_HOME&lt;/code&gt;,设置为: &lt;code&gt;C:\WorkSoftware\gradle-4.5&lt;/code&gt;, 然后&lt;code&gt;path&lt;/code&gt;环境变量中添加: &lt;code&gt;%GRADLE_HOME%\bin&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试&lt;code&gt;gradle&lt;/code&gt;命令:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="测试图片显示" src="https://pingbook.top/articles/vue-to-mobileapp-electron/gradle_install_4.png"&gt;&lt;/p&gt;
&lt;p&gt;如图显示对应的gradle的信息,说明gradle的配置成功!&lt;/p&gt;
&lt;h4 id="14-genymotion"&gt;1.4 genymotion虚拟设备配置&lt;a class="headerlink" href="#14-genymotion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;关于安装&lt;code&gt;genymotion&lt;/code&gt;的步骤这里就不再赘余了,网上一搜一大堆.这里主要记录一些遇到的问题.
1. &lt;code&gt;genymotion&lt;/code&gt;安装成功后需要登录,这样才能使用它的增加device,下载镜像和设备android sdk的操作.
2. 针对`android &lt;span class="caps"&gt;SDK&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;gt;=28以上,安装apk文件直接闪退,网上说的是genymotion是基于intel&amp;nbsp;pentium设计的,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;An error occured while deploying the file. &lt;/span&gt;
&lt;span class="code-line"&gt;This probably means that the app contains ARM native code and your Genymotion device cannot run ARM instructions. You should either build your native code to x86 or install an ARM translation tool in your device.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;国内的就不要搜索, 都是一堆说使用&lt;code&gt;ARM_Translation.zip&lt;/code&gt;,结果版本要不就是 android 5.0的就是6.0的,拖进去模拟器中.再次安装app还是直接闪退不能运行.&lt;br&gt;
&lt;a href="https://pan.baidu.com/s/1KvCbjCprPlMFEQs65xf5aA"&gt;ARM_Translation_oreo for&amp;nbsp;android8.0安装包下载&lt;/a&gt;&lt;/p&gt;</content><category term="Vuejs"></category><category term="electron"></category><category term="electron-builder"></category><category term="cordova"></category></entry><entry><title>How to build the ftp system</title><link href="https://pingbook.top/articles/vsftp_setup/" rel="alternate"></link><published>2018-08-27T16:06:29+08:00</published><updated>2018-08-27T16:06:29+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-08-27:/articles/vsftp_setup/</id><summary type="html">&lt;h1 id="_1"&gt;起因&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;需要搭建一个文件共享的服务器,这样可以方便的进行文件的共享和存取.
参考博客: 
1. (smbd配置,忽略)https://www.conum …&lt;/p&gt;</summary><content type="html">&lt;h1 id="_1"&gt;起因&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;需要搭建一个文件共享的服务器,这样可以方便的进行文件的共享和存取.
参考博客: 
1. (smbd配置,忽略)https://www.conum.cn/os/linux/210.html
2. (vsftpdp配置)http://www.cnblogs.com/sunky/p/9418730.html&amp;nbsp;用到的操作命令如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;1. 安装vsftpd&lt;/span&gt;
&lt;span class="code-line"&gt;$ apt-get install vsftpd &lt;/span&gt;
&lt;span class="code-line"&gt;安装完成后,会新建一个用户组ftp和对应的用户名ftp,通过下面的命令查看他的配置&lt;/span&gt;
&lt;span class="code-line"&gt;$ sudo nano /etc/passwd &lt;/span&gt;
&lt;span class="code-line"&gt;已经设置成了/srv/ftp目录,这里把它改成 /ftp目录&lt;/span&gt;
&lt;span class="code-line"&gt;2. 安装用户名和密码存放的数据库文件&lt;/span&gt;
&lt;span class="code-line"&gt;$ aptitude search db | grep util&lt;/span&gt;
&lt;span class="code-line"&gt;$ aptitude install db5.3-util&lt;/span&gt;
&lt;span class="code-line"&gt;$ db5.3_load -T -t hash -f /etc/vsftpd/login.txt /etc/vsftpd/vsftpd_login.db&lt;/span&gt;
&lt;span class="code-line"&gt;3. 查看log&lt;/span&gt;
&lt;span class="code-line"&gt;$ tail -f -n 50 /var/log/auth.log&lt;/span&gt;
&lt;span class="code-line"&gt;4. 增加用户&lt;/span&gt;
&lt;span class="code-line"&gt;4.1 先在login.txt文件中增加一行用户名记录,再另起一行加上对应的密码,保存.&lt;/span&gt;
&lt;span class="code-line"&gt;4.2 然后在/etc/vsftpd/confs/ 文件夹中新建一个文件,文件名称是该用户名,例如用户名是`test`,那么执行如下命令:&lt;/span&gt;
&lt;span class="code-line"&gt;sudo nano test  # 加入下面的配置代码&lt;/span&gt;
&lt;span class="code-line"&gt;local_root=/ftp/vsftp/foldername&lt;/span&gt;
&lt;span class="code-line"&gt;anon_world_readable_only=NO&lt;/span&gt;
&lt;span class="code-line"&gt;write_enable=YES&lt;/span&gt;
&lt;span class="code-line"&gt;anon_mkdir_write_enable=YES&lt;/span&gt;
&lt;span class="code-line"&gt;anon_upload_enable=YES&lt;/span&gt;
&lt;span class="code-line"&gt;anon_other_write_enable=YES&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;常见错误&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="500-oops-bad-bool-value-in-config-file-for-anon_world_readable_only"&gt;500 &lt;span class="caps"&gt;OOPS&lt;/span&gt;: bad bool value in config file for: anon_world_readable_only&lt;a class="headerlink" href="#500-oops-bad-bool-value-in-config-file-for-anon_world_readable_only" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;原因是你的配置文件中带有空格,使用下面的命令去除空格:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;# sed -i &amp;#39;s,\r,,;s, *$,,&amp;#39; /etc/vsfttpd/confs/yourusername&lt;/span&gt;
&lt;span class="code-line"&gt;# db5.3_load -T -t hash -f /etc/vsftpd/login.txt /etc/vsftpd/vsftpd_login.db&lt;/span&gt;
&lt;span class="code-line"&gt;# systemctl restart vsftpd.service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="vsftpd"></category></entry><entry><title>Vue项目转成Cordova项目的注意事项和技巧</title><link href="https://pingbook.top/articles/cordova-android/" rel="alternate"></link><published>2018-08-27T14:33:07+08:00</published><updated>2018-08-27T14:33:07+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-08-27:/articles/cordova-android/</id><summary type="html">&lt;h3 id="cordova-build-android-timeout"&gt;&lt;code&gt;cordova build android&lt;/code&gt; 命令 timeout&lt;a class="headerlink" href="#cordova-build-android-timeout" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;修改对应的&lt;code&gt;build.gradle&lt;/code&gt;文件中的内容为如下内容: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;buildscript …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="cordova-build-android-timeout"&gt;&lt;code&gt;cordova build android&lt;/code&gt; 命令 timeout&lt;a class="headerlink" href="#cordova-build-android-timeout" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;修改对应的&lt;code&gt;build.gradle&lt;/code&gt;文件中的内容为如下内容: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;buildscript&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;repositories&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;//&lt;/span&gt;        &lt;span class="err"&gt;jcenter()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="err"&gt;maven&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="err"&gt;url&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aliyun&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nexus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    dependencies {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        // NOTE: Do not place your application dependencies here; they belong&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        // in the individual module build.gradle files&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        classpath &amp;#39;com.android.tools.build:gradle:3.0.0&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;allprojects {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    repositories {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;//        jcenter()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        maven {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            url &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aliyun&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nexus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    //This replaces project.properties w.r.t. build settings&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    project.ext {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;      defaultBuildToolsVersion=&amp;quot;&lt;/span&gt;&lt;span class="mf"&gt;25.0.2&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;defaultMinSdkVersion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Minimum&lt;/span&gt; &lt;span class="n"&gt;requirement&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Android&lt;/span&gt; &lt;span class="mf"&gt;4.4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;defaultTargetSdkVersion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;ALWAYS&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="kc"&gt;default&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;      &lt;span class="n"&gt;defaultCompileSdkVersion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;ALWAYS&lt;/span&gt; &lt;span class="n"&gt;compile&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="kc"&gt;default&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;task&lt;/span&gt; &lt;span class="nt"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;delete&lt;/span&gt; &lt;span class="err"&gt;rootProject.buildDir&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;设置图标&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在cordova5.0版本以后，需要安装cordova-plugin-splashscreen插件以后才能修改和设置App的启动页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="splashscreen"&gt;安装splashscreen插件&lt;a class="headerlink" href="#splashscreen" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;cordova plugin add cordova-plugin-splashscreen&lt;/span&gt;
&lt;span class="code-line"&gt;或&lt;/span&gt;
&lt;span class="code-line"&gt;cordova plugin add https://github.com/apache/cordova-plugin-splashscreen.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_2"&gt;基本配置&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在你的config.xml文件中(一般在如下目录类似:&amp;nbsp;projectname/config.xml)，添加以下代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ldpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/android/icon-36-ldpi.png&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/android/icon-48-mdpi.png&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/android/icon-72-hdpi.png&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xhdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/android/icon-96-xhdpi.png&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xxhdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/android/icon-144-xxhdpi.png&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xxxhdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/android/icon-192-xxxhdpi.png&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;land-hdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-hdpi-landscape.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;land-ldpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-ldpi-landscape.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;land-mdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-mdpi-landscape.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;land-xhdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-xhdpi-landscape.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;port-hdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-hdpi-portrait.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;port-ldpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-ldpi-portrait.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;port-mdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-mdpi-portrait.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;port-xhdpi&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/android/screen-xhdpi-portrait.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ios&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iPhone&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;Plus&lt;/span&gt;  &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-60@3x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iPhone&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;iPod&lt;/span&gt; &lt;span class="n"&gt;Touch&lt;/span&gt;  &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-60.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;60&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;60&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-60@2x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;120&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;120&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iPad&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-76.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;76&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;76&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-76@2x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;152&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;152&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;6.1&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;Spotlight&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-40.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-40@2x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iPhone&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;iPod&lt;/span&gt; &lt;span class="n"&gt;Touch&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;57&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;57&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon@2x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;114&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;114&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iPad&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-72.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;72&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;72&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-72@2x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;144&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;144&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iPhone&lt;/span&gt; &lt;span class="n"&gt;Spotlight&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-small.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;29&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;29&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-small@2x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;58&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;58&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-small@3x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;87&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;87&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;iPad&lt;/span&gt; &lt;span class="n"&gt;Spotlight&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-50.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/icon/ios/icon-50@2x.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default~iphone.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;320&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;480&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default@2x~iphone.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;640&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;960&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-Portrait~ipad.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;768&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1024&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-Portrait@2x~ipad.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1536&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2048&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-Landscape~ipad.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1024&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;768&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-Landscape@2x~ipad.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2048&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1536&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-568h@2x~iphone.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;640&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1136&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-667h.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;750&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1334&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-736h.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1242&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2208&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;splash&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;res/screen/ios/Default-Landscape-736h.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2208&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1242&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_3"&gt;应用程序启动的图标和时间&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;参考文章:&amp;nbsp;https://www.jianshu.com/p/3ad9538cf5fe&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;  &amp;lt;!--自动隐藏启动页面AutoHideSplashScreen--&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;lt;preference name=&amp;quot;AutoHideSplashScreen&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;lt;!--显示启动页面的时间长度SplashScreenDelay--&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;lt;preference name=&amp;quot;SplashScreenDelay&amp;quot; value=&amp;quot;3000&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;lt;!--是否显示淡入淡出效果--&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;lt;preference name=&amp;quot;FadeSplashScreen&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;lt;!--FadeSplashScreenDuration时间是包含在SplashScreenDelay的时间里的。--&amp;gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &amp;lt;preference name=&amp;quot;FadeSplashScreenDuration&amp;quot; value=&amp;quot;750&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Cordova"></category><category term="Vuejs"></category></entry><entry><title>怎么放大缩小图片的尺寸和图片尺寸转换</title><link href="https://pingbook.top/articles/how-resize-image/" rel="alternate"></link><published>2018-08-27T13:18:11+08:00</published><updated>2018-08-27T13:18:11+08:00</updated><author><name>Walter Hu</name></author><id>tag:pingbook.top,2018-08-27:/articles/how-resize-image/</id><summary type="html">&lt;h2 id="_1"&gt;分享一个好用的网站可以用于放大缩小图片&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个网站可以放大缩小图片的尺寸,方便调节图片的大小尺寸,网站地址: 
 &lt;a href="http://resizeimage.net/"&gt;resize&amp;nbsp;images&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h2 id="_1"&gt;分享一个好用的网站可以用于放大缩小图片&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个网站可以放大缩小图片的尺寸,方便调节图片的大小尺寸,网站地址: 
 &lt;a href="http://resizeimage.net/"&gt;resize&amp;nbsp;images&lt;/a&gt;&lt;/p&gt;</content></entry></feed>