(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{282:function(s,t,a){"use strict";a.r(t);var e=a(9),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"jackson反序列化myql的datetime类型为localdatetime时间错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jackson反序列化myql的datetime类型为localdatetime时间错误"}},[s._v("#")]),s._v(" jackson反序列化myql的datetime类型为LocalDateTime时间错误")]),s._v(" "),a("blockquote",[a("p",[s._v("在jackson反序列化mysql中的datetime类型的数据的时候，发现时间总是不一致，发现是mysql的分区和当前运行程序的分区不一致导致的")])]),s._v(" "),a("ul",[a("li",[s._v("检查mysql的时区：")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("\nshow variables like "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%time_zone%"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("p",[s._v("+------------------+--------+\n| Variable_name  | Value |\n+------------------+--------+\n| system_time_zone | CST  |\n| time_zone    | SYSTEM |\n+------------------+--------+\n2 rows in set (0.00 sec)\n#time_zone说明mysql使用system的时区，system_time_zone说明system使用CST时区")]),s._v(" "),a("ul",[a("li",[s._v("修改mysql的时区：")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("第一种方法\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" global time_zone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+08:00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##修改mysql全局时区为北京时间，即我们所在的东8区")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" time_zone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+08:00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##修改当前会话时区")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" flush privileges"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#立即生效")]),s._v("\n第二种方法\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# vim /etc/my.cnf ##在[mysqld]区域中加上")]),s._v("\ndefault-time_zone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+08:00'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /etc/init.d/mysqld restart ##重启mysql使新时区生效")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);