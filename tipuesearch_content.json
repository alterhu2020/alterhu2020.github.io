{"pages":[{"title":"[面试] 1. 面向对象的相关概念","text":"这里整理的是针对面向对象的相关问题和面试中可能涉及的问题. 达到的目的 面向对象三大特性,封装 (Encapsulation) , 继承 (Inheritance) 和多态 (Polymorphism)","tags":"面试","url":"articles/1-object-oriented-programming/"},{"title":"[面试] 2. 有关list及其方法的使用","text":"解决的问题(Python/Java的list对比学习) 排序 java采用的是 Collections 包中的两个方法: Collections.sort(list) 更复杂点可以是Collection.sort(list, new Comparator<Person>() {}) Collections.reverse(list) or list.sort(Collections.reverseOrder()) python没有array,只有list,直接使用 sort 方法即可,如果是倒序可以用reverse=True指定","tags":"面试","url":"articles/2-list-methods/"},{"title":"[Linux环境搭建] 配置采用NAT123进行树莓派部署","text":"安装步骤 2018-07-09 更新,下面的方法如果安装失败,尝试官方的安装指南: http://www.mono-project.com/download/stable/#download-lin-raspbian 1. 下载对应的linux版本的nat123安装包: http://www.nat123.com/Pages_2_32.jsp 2. 解压缩到一个目录里面: tar zxvf nat123linux20180627.tar.gz ~~3. 安装 sudo apt-get install -y mono-complete ,如果安装失败,请参见另外的一篇文章设置对应的国内镜像: https://pingbook.top/articles/pi-mirrors/ ~~ 4. 上面的 momo-complete 的安装需要一段时间,大约十分钟左右.~~ $ mono /home/pi/nat123/nat123linux.sh service &","tags":"树莓派","url":"articles/pi-nat123/"},{"title":"[Linux环境搭建] Debian安装编译和安装nginx服务器","text":"Debian安装配置nginx服务器 下载解压缩安装包 $ sudo wget https://nginx.org/download/nginx-1.15.1.tar.gz $ tar zxvf nginx-1.15.1.tar.gz 重新配置nginx的服务器名称servername和对应版本 $ cd nginx-1.15.1/ $ sudo nano src/http/ngx_http_header_filter_module.c $ sudo nano src/core/nginx.h $ sudo nano nginx-1.15.1-openbook.top.tar.gz nginx-1.15.1/ 安装对应的nginx的所有依赖的包, gcc环境, pcre, zlib and openssl $ sudo apt install build-essential -y $ wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz $ tar zxvf pcre-8.41.tar.gz $ wget http://www.zlib.net/zlib-1.2.11.tar.gz $ tar -zxvf zlib-1.2.11.tar.gz $ wget https://www.openssl.org/source/openssl-1.1.0g.tar.gz $ tar zxvf openssl-1.1.0g.tar.gz $ cd openssl-1.1.0g $ ./config -Wl,--enable-new-dtags,-rpath, '$(LIBRPATH)' $ make # 大约五六分钟左右 $ sudo make install $ openssl version -a 安装nginx 参考说明文档: https://www.vultr.com/docs/how-to-compile-nginx-from-source-on-ubuntu-16-04 $ cd nginx-1.15.1 $ ./configure --prefix = /usr/local/nginx \\ --sbin-path = /usr/sbin/nginx \\ --modules-path = /usr/lib/nginx/modules \\ --conf-path = /etc/nginx/nginx.conf \\ --error-log-path = /var/log/nginx/error.log \\ --http-log-path = /var/log/nginx/access.log \\ --pid-path = /run/nginx.pid \\ --lock-path = /var/lock/nginx.lock \\ --user = www-data \\ --group = www-data \\ --http-client-body-temp-path = /var/lib/nginx/body \\ --http-fastcgi-temp-path = /var/lib/nginx/fastcgi \\ --http-proxy-temp-path = /var/lib/nginx/proxy \\ --http-scgi-temp-path = /var/lib/nginx/scgi \\ --http-uwsgi-temp-path = /var/lib/nginx/uwsgi \\ --with-openssl = ../openssl-1.1.0g \\ --with-openssl-opt = enable-ec_nistp_64_gcc_128 \\ --with-openssl-opt = no-nextprotoneg \\ --with-openssl-opt = no-weak-ssl-ciphers \\ --with-openssl-opt = no-ssl3 \\ --with-pcre = ../pcre-8.41 \\ --with-pcre-jit \\ --with-zlib = ../zlib-1.2.11 \\ --with-compat \\ --with-file-aio \\ --with-threads \\ --with-http_addition_module \\ --with-http_auth_request_module \\ --with-http_dav_module \\ --with-http_flv_module \\ --with-http_gunzip_module \\ --with-http_gzip_static_module \\ --with-http_mp4_module \\ --with-http_random_index_module \\ --with-http_realip_module \\ --with-http_slice_module \\ --with-http_ssl_module \\ --with-http_sub_module \\ --with-http_stub_status_module \\ --with-http_v2_module \\ --with-http_secure_link_module \\ --with-mail \\ --with-mail_ssl_module \\ --with-stream \\ --with-stream_realip_module \\ --with-stream_ssl_module \\ --with-stream_ssl_preread_module \\ --with-debug \\ --with-cc-opt = '-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' \\ --with-ld-opt = '-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now' $ make #这个操作需要花费十分钟左右 $ sudo make install $ sudo systemctl start nginx.service && sudo systemctl enable nginx.service 遇到的问题 nginx: [emerg] mkdir() \"/var/lib/nginx/body\" failed Just create directory $ sudo mkdir -p /var/lib/nginx && sudo nginx -t $ sudo nano /lib/systemd/system/nginx.service 输入如下内容 # Stop dance for nginx # ======================= # # ExecStop sends SIGSTOP (graceful stop) to the nginx process. # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control # and sends SIGTERM (fast shutdown) to the main process. # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends # SIGKILL to all the remaining processes in the process group (KillMode=mixed). # # nginx signals reference doc: # http://nginx.org/en/docs/control.html # [Unit] Description=A high performance web server and a reverse proxy server Documentation=man:nginx(8) After=network.target [Service] Type=forking PIDFile=/run/nginx.pid ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;' ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;' ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid TimeoutStopSec=5 KillMode=mixed [Install] WantedBy=multi-user.target 重启nginx服务 sudo systemctl start nginx.service && sudo systemctl enable nginx.service check nginx service is up $ sudo systemctl status nginx.service $ ps aux | grep nginx $ curl -I 127 .0.0.1","tags":"树莓派","url":"articles/pi-nginx/"},{"title":"[高级] pelican 博客高级配置","text":"写在前面 继续上一篇的基本配置后,这里我将涉及到一些高级的使用,也是自己摸索的一些网上的经验,还有一些自己自定义的功能. windows下的运行 看了一下官方的自动化部署相关的文章 fabric/Make , 提到在linux下 你可以很方便的使用make 命令来操作相关的自动化,它对应的是 makefile ,你在使用 pelican-quickstart 命令的时候会提示你生成了 这个文件. fabfile 在上面的命令生成后发现里面的文件报了好多错, from fabric.api import * ,类似 no module found env,local 解决方法很简单,执行下面的命令进行安装相关的依赖包就好了: pip install pycryptodome pip install Fabric3 # 注意这里是Fabric3,不要使用fabric 百度站长不能收录 很遗憾,还没有找到好的方法,网上说的一些方法,比如DNSPod设置,nginx代理(不符合要求),CDN代理(没有尝试过). 加入浏览量统计 在谷歌上溜达了一圈,找到了一个博客: http://xiaohanyu.me/about/,随便看了一下作者的博客,看到了他去面试的谷歌和Facebook的面试经历, 感觉挺好玩的,里面提到了他们代码面试的工具: https://coderpad.io . 去玩了一下,感觉挺好玩. 后面发现这个是最好做浏览量统计的. * 工具 不蒜子 ,代码也是超简单: <script async src= \"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\" ></script> <span id= \"busuanzi_container_site_pv\" > 总访问量 <span id= \"busuanzi_value_site_pv\" ></span> 次 </span> , <span id= \"busuanzi_container_site_uv\" > 总访客 <span id= \"busuanzi_value_site_uv\" ></span> 人 </span> <span id= \"busuanzi_container_page_pv\" > , 浏览量: <span id= \"busuanzi_value_page_pv\" ></span></span> 增加搜索功能(2018-07-09)","tags":"博客搭建","url":"articles/pelican-advance/"},{"title":"[Linux环境搭建] Debian如何安装配置Tomcat9","text":"安装 参考文档: https://www.howtoforge.com/tutorial/ubuntu-apache-tomcat/ 推荐: https://gist.github.com/jniltinho/a7bd30288342a5d352e6#file-install_tomcat-sh-L33 安装JDK和配置环境变量(采用下面的配置环境变量/etc/profile), 注意截止到20180709, oracle没有提供debain的32位系统安装tar包,所以这里使用的是32位的jdk1.8 $ nano ~/.bashrc export JAVA_HOME = /usr/lib/jvm/jdk-8-oracle-arm32-vfp-hflt export PATH = $JAVA_HOME /bin: $PATH $ source ~/.bashrc $ echo $JAVA_HOME 添加组和用户 $ sudo groupadd tomcat $ sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat 下载tomcat9 $ tar zxvf jdk1.8.0_171.tar.gz $ sudo nano /etc/profile JAVA_HOME = /home/pi/jdk1.8.0_171 CLASSPATH = $JAVA_HOME /lib/ PATH = $PATH : $JAVA_HOME /bin export PATH JAVA_HOME CLASSPATH $ source /etc/profile $ java 可能下载的是64位的jdk,但是系统只能运行32位的jdk /bin/javac: cannot execute binary file: Exec format error $ cd /home/pi $ sudo wget http://apache.cs.utah.edu/tomcat/tomcat-9/v9.0.10/bin/apache-tomcat-9.0.10.tar.gz $ tar zxvf apache-tomcat-9.0.10.tar.gz $ cd /home/pi/apache-tomcat-9.0.10/ $ sudo groupadd tomcat $ sudo useradd -M -s /bin/nologin -g tomcat -d /home/pi/apache-tomcat-9.0.10 tomcat $ sudo chgrp -R tomcat conf $ sudo chmod g+rwx conf $ sudo chmod g+r conf/* $ sudo chown -R tomcat webapps/ work/ temp/ logs/ $ sudo chown -R tomcat:tomcat * $ sudo chown -R tomcat:tomcat /home/pi/apache-tomcat-9.0.10 $ sudo chmod -R 757 conf/ $ sudo chmod -R 757 logs/ $ sudo chmod -R 757 webapps/ 配置 tomcat开机启动 $ sudo nano /etc/systemd/system/tomcat.service # Systemd unit file for tomcat [ Unit ] Description = Apache Tomcat Web Application Container After = syslog.target network.target [ Service ] Type = forking Environment = JAVA_HOME = /home/pi/jdk1.8.0_171 Environment = CATALINA_PID = /home/pi/apache-tomcat-9.0.10/temp/tomcat.pid Environment = CATALINA_HOME = /home/pi/apache-tomcat-9.0.10 Environment = CATALINA_BASE = /home/pi/apache-tomcat-9.0.10 Environment = 'CATALINA_OPTS=-Xms512M -Xmx824M -server -XX:+UseParallelGC' Environment = 'JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom' ExecStart = /home/pi/apache-tomcat-9.0.10/bin/startup.sh ExecStop = /bin/kill -15 $MAINPID User = tomcat Group = tomcat [ Install ] WantedBy = multi-user.target $ sudo systemctl daemon-reload $ sudo systemctl start tomcat $ sudo systemctl enable tomcat Configure Apache Tomcat User $ cd /home/pi/apache-tomcat-9.0.10/conf/ $ sudo nano tomcat-users.xml <role rolename = \"manager-gui\" /> <user username = \"admin\" password = \"admin\" roles = \"manager-gui,admin-gui\" /> $ cd webapps/manager/META-INF/ $ sudo nano context.xml comment: <!-- <Valve className = \"org.apache.catalina.valves.RemoteAddrValve\" allow = \"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /> --> $cd webapps/host-manager/META-INF/ #sudo nano context.xml comment: <!-- <Valve className = \"org.apache.catalina.valves.RemoteAddrValve\" allow = \"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /> --> $ sudo systemctl restart tomcat.service","tags":"树莓派","url":"articles/pi-tomcat/"},{"title":"[Linux环境搭建]  svn 安装配置","text":"SVN 安装 执行如下命令进行安装: $ sudo apt-get -y install subversion 启动 svn 服务: d代表的是daemon 进程 $ svnserve -d $ ps aux | grep svnserve 若出现如下内容： wkr 6537 0.0 0.0 13784 956 ? Ss 16:18 0:00 svnserve -d wkr 7593 0.0 0.0 5784 864 pts/0 S+ 21:57 0:00 grep –color=auto svnserve 表示服务已开启。（注意：一定要有第1行，只有第2行说明服务未启动） 关闭 svn 服务: $ killall svnserve 重启 svn 服务: $ svnserve -d -r /srv 新建一个仓库: $ sudo adduser --system --home /srv/svn --disabled-password --disabled-login --group svn $ sudo svnadmin create /srv/svn $ sudo chown -R svn:svn /srv/svn change user, change group 改变文件对应的用户和用户组 修改仓库配置文件 编辑配置文件: svnserve.conf $ sudo nano /srv/svn/conf/svnserve.conf [ general ] anon-access = none auth-access = write authz-db = authz 修改帐户文件 nano /srv/svn/conf/passwd 和 sudo nano /srv/svn/conf/authz , 此处忽略. 配置svn开机自动启动 新建一个svnserve配置文件在 /et/default/svnserve 文件,内容如下: # svnserve options DAEMON_ARGS=\"--daemon --pid-file /run/svnserve/svnserve.pid --root /srv/svn --log-file /var/log/svn/svnserve.log\" 注意 新建log文件,这些是 /etc/default/svnserve 中的文件的配置涉及的几个文件,如果执行 sudo systemctl restart svnserve.service 失败,会自动删除文件夹 /run/svnserve $ sudo mkdir /run/svnserve $ sudo chown -R svn:svn /run/svnserve/ $ sudo chmod -R 777 /run/svnserve/ $ sudo mkdir /var/log/svn $ sudo chown -R svn:svn /var/log/svn/ $ sudo chmod -R 777 /var/log/svn/ 新建service启动服务文件 $ sudo nano /etc/systemd/system/svnserve.service [ Unit ] Description = Subversion protocol daemon After = syslog.target network.target [ Service ] Type = forking RuntimeDirectory = svnserve PIDFile = /run/svnserve/svnserve.pid EnvironmentFile = /etc/default/svnserve ExecStart = /usr/bin/svnserve $DAEMON_ARGS User = svn Group = svn KillMode = control-group Restart = on-failure [ Install ] WantedBy = multi-user.target 重启机器后出现这个错误:(原因是上面的第一个操作我没有做,就是没有创建一个文件 /etc/default/svnserve ,或者其中涉及到的文件 /var/log/svn , /run/svnserve 没有新建,或者没有配置可写权限对于用户 svn ) pi @ pingbook :~$ systemctl status svnserve . service ● svnserve . service - Subversion protocol daemon Loaded : loaded (/ etc / systemd / system / svnserve . service ; enabled ; vendor preset : enabled ) Active : failed ( Result : resources ) since Sun 2018-07-08 20 : 06 : 56 CST ; 28s ago 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Failed to start Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Unit entered failed state . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Failed with result 'resources' . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Service hold-off time over , scheduling restart . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Stopped Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Start request repeated too quickly . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Failed to start Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Unit entered failed state . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Failed with result 'resources' . checkout一份代码到nginx服务器,保持web同步,注意checkout的目录用户要是svn的用户和组,这样hook才能有权限读写 $ sudo svn co svn://localhost/svn /www/pingbook.top --username \"hr\" $ cd /www/pingbook.top $ sudo chown -R svn:svn * $ sudo chown -R svn:svn /www/pingbook.top $ sudo chmod -R 757 /www/pingbook.top $ sudo chmod -R 757 /www/pingbook.top/.svn # 配置svn数据仓库 $ sudo svn cleanup 如果commit的时候发现 hook 的 post-commit 总是报错: post-commit hook failed (exit code 255) with no output ,需要检查对应的文件的读写权限. 1. 检查对应的 post-commit 的用户组是 svn ,对应的文件有执行权限: sudo chmod g+e /srv/svn/hook/post-commit","tags":"树莓派","url":"articles/pi-svn/"},{"title":"[Linux环境搭建] MYSQL 的安装配置","text":"安装 执行如下命令进行安装和基本的配置: $ sudo apt-get -y install mysql-server $ sudo mysql_secure_installation 第二条命令将会配置mysql的 root 密码,删除掉 test 数据库,不允许匿名登录等等操作. 按照上面的操作mysql的配置是没有问题的了,但是你会发现,如果你运行如下命令: mysql -u root -p , 这里的root不用输入密码,明明上面的已经设置了密码??? 进行如下的命令进行配置: $ sudo mysql -u root -p $ use mysql ; $ update user set plugin = 'mysql_native_password' where user = 'root' ; $ flush privileges ; $ quit ; 配置 root 密码的更改,可以采用下面的操作步骤: $ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf 增加一行代码: skip-grant-tables 参见 https://www.jb51.net/article/100925.htm $ sudo mysql -u root -p $ use mysql ; $ UPDATE mysql.user SET Password = PASSWORD ( 'YanZhi123!@#)0x&*' ) where USER = 'root' ; $ flush privileges ; 增加用户名和授权远程登录: $ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf 注释掉 bind-address = 127 .0.0.1 $ sudo mysql -u root -p $ use mysql ; $ CREATE USER 'yanzhi' @ '%' IDENTIFIED BY 'yanzhi123!@#' ; $ GRANT ALL PRIVILEGES ON *.* TO 'yanzhi' @ '%' IDENTIFIED BY 'yanzhi123!@#' ; -- 远程连接权限所有的数据库. $ flush privileges ; 创建数据库,支持中文: UTF8 : CREATE DATABASE test2 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci 自动备份数据库,每天备份一次 新建文件: sudo nano /usr/sbin/mysqlbackup.sh ,内容如下: 1 2 3 4 5 6 7 8 9 #!/bin/bash # Name:mysql_backup.sh # This is a ShellScript For Auto DB Backup and Delete old Backup # backupdir = /www/backups time = ` date +%Y-%m-%d_%H%M%S ` /usr/bin/mysqldump --routines -u 'test' -p 'test!@#' pingbook | gzip > $backupdir /yanzhi $time .sql.gz # 删除七天前的备份 find $backupdir -name \"*.sql.gz\" -type f -mtime +7 -exec rm {} \\ > /dev/null 2 > & 1 添加可执行权限对应sh文件. $ sudo chmod +x /usr/sbin/mysqlbackup.sh 增加定时任务在 sudo nano /etc/crontab #创建一个mysql备份的操作 2 1 * * * root /usr/sbin/mysqlbackup.sh >> /var/log/crontab/backup.log 2>&1 重启 crontab 以便生效 sudo systemctl restart cron.service","tags":"树莓派","url":"articles/pi-mysql/"},{"title":"[Linux环境搭建] 如何完整卸载python2/3 在debain上","text":"卸载命令 $ sudo apt-get remove 'python3.*' 其实这里的python的包是: ` python3.5-minimal ` , ` python3.5-venv ` 安装最新python3.7 因为默认的debian仓库里面是python3.5,所以如果需要安装最新的python,安装如下进行安装, 参考文档: https://unix.stackexchange.com/questions/332641/how-to-install-python-3-6 安装依赖包 $ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\ libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\ xz-utils tk-dev libffi-dev $ sudo wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz $ tar xvf Python-3.7.0.tgz $ ./configure --enable-optimizations --with-ensurepip=install $ make -j8 $ sudo make altinstall 安装pip,pipenv并设置全局可用命令 pipenv $ wget https://bootstrap.pypa.io/get-pip.py $ sudo python get-pip.py $ pip install --user pipenv /home/pi/.local/bin $ python -m site --user-base $ sudo nano ~/.profile export PATH = \" $HOME /.local/bin: $PATH \" $ sudo source ~/.profile $ pipenv --update","tags":"树莓派","url":"articles/pi-python3/"},{"title":"树莓派外部网站搭建","text":"前因 自己在Github Page搭建了一个博客,但是不能被百度收录.也就是百度搜索不能爬取网站的内容,也就不能被国内搜索到了. 整理一下树莓派下安装nginx的过程 1. 为树莓派更换国内镜像源 -(2018-07-07更新: 清华的镜像源已经不能使用: Cannot initiate the connection to mirrors.tuna.tsinghua.edu.cn:80) 可用的官方镜像源: http://www.raspbian.org/RaspbianMirrors 使用管理员权限（经由sudo），编辑/etc/apt/sources.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list 用#注释掉原文件内容，用以下内容取代使用上海大学或者是中科大(https://mirrors.ustc.edu.cn/archive.raspberrypi.org/)的镜像： deb https://mirrors.shu.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi deb-src https://mirrors.shu.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi 使用管理员权限（经由sudo），编辑/etc/apt/sources.list.d/raspi.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list.d/raspi.list 用#注释掉原文件内容，用以下内容取代： deb https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui deb-src https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui 注意： 网址末尾的raspbian重复两次是必须的。因为Raspbian的仓库中除了APT软件源还包含其他代码。APT软件源不在仓库的根目录，而在raspbian/子目录下。 编辑镜像站后，请使用 sudo apt update && sudo apt upgrade -y 命令，更新软件源列表，同时检查您的编辑是否正确。 使用HTTPS可以有效避免国内运营商的缓存劫持，但需要事先安装 apt-transport-https . 树莓派安装 因为感觉空间越来越小了,不能使用现在的需要了,所以决定重新安装系统. 1. 下载镜像 2. 新建一个空文件没有后缀名: ssh, 然后放到 /boot 文件夹里面. 这两个文件在启动的时候会自动复制到指定的目录里面. 2. 删除已经安装的nginx # sudo apt update && sudo apt upgrade -y # update all package index # sudo apt-get purge nginx nginx-common # Removes everything. nginx 采用的C语言编写的,需要对应的C编译器(GCC): # sudo apt install build-essential -y 3. 安装远程桌面,不使用VNC操作 sudo apt-get install xrdp","tags":"树莓派","url":"articles/pi-mirrors/"},{"title":"树莓派3B安装","text":"树莓派安装 安装完成后，TF卡被分成两个分区： 1. 67MB vfat格式的引导分区（系统启动后被挂载在/boot目录） 2. TF卡剩余空间 ext4格式的磁盘分区 由于Windows下不识别ext4格式的磁盘，在资源管理器中查看TF卡只显示一个67MB大小、名字为boot的盘符。若想恢复TF卡整个空间为windows可识别的fat32/exfat格式，需要使用低级格式化工具HDD Low Level Format Tool（windows磁盘管理器无法处理ext4格式磁盘）。 安装的是Destop版本,lite 远程桌面工具,不是VNC 直接运行如下命令安装对应的远程桌面工具: $ sudo apt install -y xrdp","tags":"树莓派","url":"articles/pi-installation/"},{"title":"[初级] pelican 博客搭建","text":"我真是太折腾了,也没能坚持下去,去年陆陆续续用 hexo 写了一段时间的博客,最终没能坚持下去! 关键字 pelican markdown github 搭建步骤 最好的方式莫过于官方文档: 官方入坑道路 . 下面的步骤都是很简单,网上一堆教程,我这里就不多说了,记下这些步骤. // 如果需要使用markdown这个高逼格的语法去写博客 # pip install pelican markdown typogrify # mkdir pingbook.top # cd pingbook.top # pelican-quickstart 安装上面的步骤操作下来后,弹出如下的提示让你配置,这些配置都可以以后在 pelicanconf.py 修改,直接默认回车一路下去就好了! pelican-quickstart执行命令后，会提示输入博客的配置项，除了少数几个必填以外，其它都可以选择默认，而且都可以在pelicanconf.py文件中进行更改，所以你可以随意选择。 1. Where do you want to create your new web site?[.] (你想在哪里创建你的网站，默认为当前目录) 2. What will be the title of this web site?(网站的标题是什么) 3. Who will be the author of this web site?(网站的作者是谁) 4. What will be the default language of this web site? [en] (网站的默认语言是),这里我们写'zh'中文 5. Do you want to specify a URL prefix? e.g., http://example.com(Y/n) (是否指定域名),Y 6. What is your URL prefix?(see above example; no trailing slash)(输入域名，不能包含反斜杠'/'),http://moelove.info 7. Do you want to enable article pagination?(是否启用文章分页) 8. Do you want to generate a Makefile to easily manage your website?(是否生成一个Makefile来管理网站(这里我建议生成，因为会比较方便的)) 9. Do you want an auto-reload & simpleHTTP script to assist with theme and site development?(是否想有一个自动加载的小型http脚本用来修改主题和站点开发) 10. Do you want to upload your website using FTP? 11. Do you want to upload your website using SSH? 12. Do you want to upload your website using Dropbox? 13. Do you want to upload your website using S3? 命令使用 由于本人使用的是windows,这里我使用了两个命令: # pelican content # 根据content中的内容，生成静态网站到output目下 # cd output && python -m pelican.server # cd output && python -m SimpleHTTPServer 主题和插件安装 theme安装 下载主题文件,添加配置: THEME = './pelican-themes/gum' 插件安装 下载插件文件,添加如下配置: PLUGIN_PATHS = [u\"pelican-plugins\"] PLUGINS = [u\"sitemap\",u\"gzip_cache\",u\"neighbors\",u\"related_posts\"] SITEMAP = { 'format': 'xml', 'priorities': { 'articles': 0.7, 'indexes': 0.5, 'pages': 0.3 }, 'changefreqs': { 'articles': 'weekly', 'indexes': 'daily', 'pages': 'monthly' } } 字体更改 在对应的主题的css文件中修改对应的google font切换到国内的镜像. 高级语法 静态图片 新建一个目录在 content 下面,例如 images ,然后在 pelicanconf.py 设置如下: STATIC_PATHS = ['images','downloads'] ,在对应的md中可以这样写语法: 部署 部署到github上 新建一个仓库,仓库名称和你的昵称相同或者创建一个组织 使用如下命令上传 cd output git init git add . git remote add origin 仓库git地址 git push -u origin master","tags":"博客搭建","url":"articles/try-pelican/"}]}