(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{306:function(t,n,a){"use strict";a.r(n);var e=a(6),s=Object(e.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"环境配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 环境配置")]),t._v(" "),a("ul",[a("li",[t._v("下载"),a("code",[t._v("node")]),t._v(",并执行命令安装node配置"),a("code",[t._v("PATH")]),t._v("路径:")])]),t._v(" "),a("div",{staticClass:"language-$shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat /proc/cpuinfo \nProcessor       : ARMv7 Processor rev 10 (v7l)\nARMv7 (and below) is 32-bit. ARMv8 introduces the 64-bit instruction set.\nIf you want to see whether your system supports 64-bit binaries, check the kernel architecture:\n$ uname -m\n此处树莓派4是ARMv7架构\n\n$ 树莓派: wget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-armv7l.tar.xz\n$ amd64: wget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xz\n$ tar xvf node-v12.14.1-linux-armv7l.tar.xz\n$ tar xvf node-v12.14.1-linux-x64.tar.xz\n$ mv node-v12.14.1-linux-armv7l /opt/\n$ sudo nano /etc/profile\n增加对应的node的PATH路径,例如如下:\nexport path=/opt/node-v12.14.1-linux-armv7l/bin:$PATH\nexport path=/opt/node-v12.14.1-linux-x64/bin:$PATH\n执行如下命令使上面的PATH配置生效\n$ source /etc/profile \n\n执行如下命令确认node环境变量配置成功\n$ node -v\n$ npm -v \n\n设置npm和yarn的镜像为淘宝镜像\n$ npm config set registry https://registry.npm.taobao.org\n")])])]),a("ul",[a("li",[t._v("安装node的包管理器"),a("code",[t._v("yarn")]),t._v("(当然此处也可以不安装,直接使用node内置的"),a("code",[t._v("npm")]),t._v("来管理包):")])]),t._v(" "),a("div",{staticClass:"language-$shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ npm i yarn -g\n$ yarn config set registry https://registry.npm.taobao.org\n")])])]),a("ul",[a("li",[t._v("安装"),a("code",[t._v("pm2")]),t._v("命令用于后台服务静默执行:")])]),t._v(" "),a("div",{staticClass:"language-$shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ npm i pm2 -g\n\n配置pm2开机启动脚本\n$ pm2 startup \n")])])]),a("h2",{attrs:{id:"_1-测试环境运行调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-测试环境运行调试","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 测试环境运行调试")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# install dependencies")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# serve with hot reload at localhost:3000")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" dev\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# build for production and launch server")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" build\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" start\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate static project")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" generate\n")])])]),a("h2",{attrs:{id:"_2-生产环境项目部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-生产环境项目部署","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 生产环境项目部署")]),t._v(" "),a("ul",[a("li",[t._v("复制当前所有包文件,解压,然后在当前文件夹下执行命令安装编译工程:")])]),t._v(" "),a("div",{staticClass:"language-$shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ yarn \n$ yarn build\n\n编译程序, 然后配置pm2程序\n$ pm2 start  ecosystem.config.js --watch\n$ pm2 save\n")])])]),a("h2",{attrs:{id:"_3-重新发布-新版发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-重新发布-新版发布","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 重新发布/新版发布")]),t._v(" "),a("div",{staticClass:"language-$shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 首先复制源码目录文件到对应的服务器,然后直接如下命令:\n$ yarn build\n$ pm2 reload name| all\n$ pm2 restart all\n$ pm2 logs\n$ pm2 delete all\n\n")])])]),a("ul",[a("li",[t._v("执行pm2相关命令确认程序启动没有问题:")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ pm2 list    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有的pm2程序")]),t._v("\n$ pm2 monit   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看pm2的所有程序的监控面板")]),t._v("\n$ pm2 reload\n")])])]),a("p",[t._v("如果上述配置都没有问题,可以访问地址: "),a("code",[t._v("http://127.0.0.0:3000")]),t._v("查看启动程序,然后我们只需要在nginx配置\n将所有请求反转到"),a("code",[t._v("nginx")]),t._v(",参考配置如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" # proxy for  project\n location  / {\n          alias   /www/the project folder/;\n          proxy_pass http://127.0.0.1:3000/;\n          \n          include nginxconfig.io/proxy.conf;\n }\n")])])])])},[],!1,null,null,null);n.default=s.exports}}]);