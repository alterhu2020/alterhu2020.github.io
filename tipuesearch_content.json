{"pages":[{"title":"Page not found · PingBook Blog\r\n","text":"\n\n\nPage not found · PingBook Blog\r\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n                (adsbygoogle = window.adsbygoogle || []).push({\r\n                    google_ad_client: \"ca-pub-1893384651266286\",\r\n                    enable_page_level_ads: true\r\n                });\r\n            \n\n\n\n\n\r\n                window.dataLayer = window.dataLayer || [];\r\n                function gtag(){dataLayer.push(arguments);}\r\n                gtag('js', new Date());\r\n\r\n                gtag('config', 'UA-122219517-1');\r\n            \n\n\n\n\n\n\nPingBook Blog \n\n\n\n\nHome\nCategory\nArchive\nTags\nAbout\nChanges\n\n\n\n\n\n\n\n\n\n\n\nThat page doesn't exist!\n\n\n\n\nSorry, but the page you are looking for cannot be found. It seems that the page you were trying to reach doesn't exist, or may be it has just moved, or it no longer exists.\nThe best thing to do is to use the search form or start again from the home page.\n\n\n\nSearch\n\n\n\n\n\n\n\n\n\n\r\n                ©\r\n                document.write(new Date().getFullYear())\r\n                PingBook.Inc. Powered by Pelican.\r\n                \n\nSite Views: ,\r\n                    Total Vistors: \n\n\n\n\n\n\n\n\n\n\n\n\r\n    var disqus_shortname = 'pingbook';\r\n    (function () {\r\n        var s = document.createElement('script'); s.async = true;\r\n        s.type = 'text/javascript';\r\n        s.src = 'https://' + disqus_shortname + '.disqus.com/count.js';\r\n        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);\r\n    }());\r\n\n\n\n\r\n    function validateForm(query) {\r\n        return (query.length > 0);\r\n    }\r\n\n\n\n\n","tags":"","url":"https://pingbook.top/404.html"},{"title":"About This Blog","text":"My name is Walter Hu , I'm a Software Engineer living in shanghai, China. Achievements Designed and implemented new selenium framework(cucumber, BDD .etc). Best practise for Vuejs framework with element-ui or vuetify and vux . Best production practise for springboot project. Website https://yitieyilu.com founder and CTO . About this site This place is an evolving notebook where I deposit tiny pieces of knowledge ( knowledgelets ?) I generate in my personal and professional activities. Everything's in English as a way to practice, and to make my knowledge available to the largest audience. It's not my mother tongue and you'll surely find mistakes. If you do, please be kind enough to comment on the blog (or better, send a pull-request ) so I can quickly fix errors. I sometimes write in Chinese to target a French-speaking audience.","tags":"pages","url":"about"},{"title":"Release Notes","text":"2018-07-01 0x01 pelican blog site setup Add into google and baidu search enginee. Add the tipue search for static site search. Change some css styles and layout. Add google adsense.","tags":"pages","url":"change-log"},{"title":"JavaScript得到随机字符串","text":"代码 /** * 得到随机的字符串 * @param arrayStr * @returns {*} */ const randomStrPickUp = function ( arrayStr ) { const len = arrayStr . length const min = 0 const max = len const range = Math . round ( Math . random () * ( max - min )) + min // 得到随机的范围 return arrayStr [ range ] }","tags":"JavaScript","url":"articles/random_string/"},{"title":"vuejs項目转为android/ IOS App(Cordova)","text":"How to build android or IOS app from Vue project 1. cordova 环境准备 1.1 Java JDK 安装(省略) 1.2 Android SDK 安装配置 首先，下载Android SDK Tools，翻过墙的朋友可以去Google Android的官网上下载（http://developer.android.com/sdk/index.html）, 选择一个最新的版本就行了。如下图所示 * 按照提示一步步的安装完成后,回到安装目录如下: 然后就双击\" SDK Manager.exe\"，启动SDK Manager，如图所示： 这里我只说几个必须要安装的，如上图所示的，Tools文件夹里面的Android SDK Tools（这个我们在之前的一步已经下载好了的， 一般不会让你再安装了，不过有可能会让你更新），然后就是Android SDK Platform-tools和Android SDKBuild-tools， 注意只需要下载最新的版本就行了。 然后就是API的选择了。我们可以看到这里提供了很多很多从Android 2.2到Android 5.x的很多版本的API，那么怎么选择呢。 这里我建议，新手的话，选择一个最新的版本就好了，因为Android是向下兼容的。其他的以后你要用到了在下载就行了 （因为下载安装的速度实在太慢啦。。。）。所以如上图所示，这里我只选择了下载当前最新的Android 5.1.1( API 22)。 这里需要说明的是，如果你以后不打算用模拟器调试，而是一直用真机来调试的话，那么就可以不用装\"system images\"了。 不过新手的话，不知道怎么选择，还是建议直接全部勾上吧. 最后就是extras文件夹中的东西了，如下图所示: 理论上来说，extras中的东西如果网速允许，时间充沛的话，就都下载了。不过一开始安装的话，可以只用安装上图中的三个，即Android Support Repository、Android SupportLibrary和Google USB Driver。其他的以后有时间再慢慢下载吧。接下来就可以进行安装了,要注意，由于这些东西都是在google 的服务器上下载的。由于俺们天朝有墙，所以可能会出现连接不上的情况，如下图： 切换到国内镜像进行安装 遇到上面的安装错误,我们可以通过有Android SDK的国内镜像服务器来下载安装，这里推荐几个,参考这里的: http://tools.android-studio.org/index.php/proxy 随便选择一个就行啦。这里我选择的是第三个站点，即大连东软的镜像，使用方法如下： 然后在弹出的对话框中，填写HTTP Proxy Server为mirrors.neusoft.edu.cn（镜像服务器的地址，注意前面不要加http），然后填写HTTP Proxy Port为80 （端口号）。最后在勾选下面的『Forcehttps://… sources to be fetched using http://…』复选框，如下图所示: 接着点击close，关闭对话框，再 重新启动SDK Manager 就行啦。 经过漫长的下载安装过程后（建议在晚上睡觉的时候下载。。。），我们可以看到，之前选中安装的项目后面的状态都由之前的\"Not installed\"变为了如今的\"Installed\"，这就表示我们已经安装成功了！ SDK环境变量设置 右键我的电脑，打开属性，点击高级系统设置，打开环境变量. 新建一个环境变量名称为ANDROID_HOME，变量值为当前安装SDK的目录,例如SDK装在D:\\androidSDK中，则环境变量为： 把%ANDROID_HOME%\\platform-tools;%ANDROID_HOME%\\tools添加到Path环境变量中。 检测SDK 安装是否成功 1. win+R，输入cmd，打开命令提示符面板,输入 android : 弹出类似以下界面： 输入 abd 弹出类似以下界面： 输入 android -h 弹出类似以下界面说明安装完成. 直至所有的Android Sdk的环境配置部分都没有问题了. 1.3 Gradle 环境配置 下载gradle 1. 进入 点击打开链接 官网首页,点击 install gradle ,如下: 进入新的页面之后，找到并点击下载完整版本（英文看不懂可以先将网站翻译成中文）,如下: 下载完成之后，解压后放入自己想要放入的指定文件夹，我放入了C:\\WorkSoftware\\gradle-4.5,如下: 同上安装android SDK一样,新建一个环境变量: GRADLE_HOME ,设置为: C:\\WorkSoftware\\gradle-4.5 , 然后 path 环境变量中添加: %GRADLE_HOME%\\bin . 测试 gradle 命令: 如图显示对应的gradle的信息,说明gradle的配置成功! 1.4 genymotion虚拟设备配置 关于安装 genymotion 的步骤这里就不再赘余了,网上一搜一大堆.这里主要记录一些遇到的问题. 1. genymotion 安装成功后需要登录,这样才能使用它的增加device,下载镜像和设备android sdk的操作. 2. 针对`android SDK API >=28以上,安装apk文件直接闪退,网上说的是genymotion是基于intel pentium设计的, An error occured while deploying the file. This probably means that the app contains ARM native code and your Genymotion device cannot run ARM instructions. You should either build your native code to x86 or install an ARM translation tool in your device. 国内的就不要搜索, 都是一堆说使用 ARM_Translation.zip ,结果版本要不就是 android 5.0的就是6.0的,拖进去模拟器中.再次安装app还是直接闪退不能运行. ARM_Translation_oreo for android8.0安装包下载","tags":"JavaScript","url":"articles/vue-to-mobileapp-electron/"},{"title":"How to build the ftp system","text":"起因 需要搭建一个文件共享的服务器,这样可以方便的进行文件的共享和存取. 参考博客: 1. (smbd配置,忽略)https://www.conum.cn/os/linux/210.html 2. (vsftpdp配置)http://www.cnblogs.com/sunky/p/9418730.html 用到的操作命令如下: 1. 安装vsftpd $ apt-get install vsftpd 安装完成后,会新建一个用户组ftp和对应的用户名ftp,通过下面的命令查看他的配置 $ sudo nano /etc/passwd 已经设置成了/srv/ftp目录,这里把它改成 /ftp目录 2. 安装用户名和密码存放的数据库文件 $ aptitude search db | grep util $ aptitude install db5.3-util $ db5.3_load -T -t hash -f /etc/vsftpd/login.txt /etc/vsftpd/vsftpd_login.db 3. 查看log $ tail -f -n 50 /var/log/auth.log 4. 增加用户 4.1 先在login.txt文件中增加一行用户名记录,再另起一行加上对应的密码,保存. 4.2 然后在/etc/vsftpd/confs/ 文件夹中新建一个文件,文件名称是该用户名,例如用户名是`test`,那么执行如下命令: sudo nano test # 加入下面的配置代码 local_root=/ftp/vsftp/foldername anon_world_readable_only=NO write_enable=YES anon_mkdir_write_enable=YES anon_upload_enable=YES anon_other_write_enable=YES 常见错误 500 OOPS : bad bool value in config file for: anon_world_readable_only 原因是你的配置文件中带有空格,使用下面的命令去除空格: # sed -i 's,\\r,,;s, *$,,' /etc/vsfttpd/confs/yourusername # db5.3_load -T -t hash -f /etc/vsftpd/login.txt /etc/vsftpd/vsftpd_login.db # systemctl restart vsftpd.service","tags":"Linux","url":"articles/vsftp_setup/"},{"title":"Vue项目转成Cordova项目的注意事项和技巧","text":"cordova build android 命令 timeout 修改对应的 build.gradle 文件中的内容为如下内容: buildscript { repositories { // jcenter() maven { url \" http : // maven . aliyun . com / nexus / content / groups / public / \" } } dependencies { // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files classpath 'com.android.tools.build:gradle:3.0.0' } } allprojects { repositories { // jcenter() maven { url \" http :// maven . aliyun . com / nexus / content / groups / public / \" } } //This replaces project.properties w.r.t. build settings project.ext { defaultBuildToolsVersion=\" 25.0.2 \" // String defaultMinSdkVersion = 19 // Integer - Minimum requirement is Android 4.4 defaultTargetSdkVersion = 26 // Integer - We ALWAYS target the latest by default defaultCompileSdkVersion = 26 // Integer - We ALWAYS compile with the latest by default } } task clean ( type : Delete ) { delete rootProject.buildDir } 设置图标 在cordova5.0版本以后，需要安装cordova-plugin-splashscreen插件以后才能修改和设置App的启动页面。 安装splashscreen插件 cordova plugin add cordova-plugin-splashscreen 或 cordova plugin add https://github.com/apache/cordova-plugin-splashscreen.git 基本配置 在你的config.xml文件中(一般在如下目录类似: projectname/config.xml)，添加以下代码: < platform name = \"android\" > < icon density = \"ldpi\" src = \"res/icon/android/icon-36-ldpi.png\" /> < icon density = \"mdpi\" src = \"res/icon/android/icon-48-mdpi.png\" /> < icon density = \"hdpi\" src = \"res/icon/android/icon-72-hdpi.png\" /> < icon density = \"xhdpi\" src = \"res/icon/android/icon-96-xhdpi.png\" /> < icon density = \"xxhdpi\" src = \"res/icon/android/icon-144-xxhdpi.png\" /> < icon density = \"xxxhdpi\" src = \"res/icon/android/icon-192-xxxhdpi.png\" /> < splash density = \"land-hdpi\" src = \"res/screen/android/screen-hdpi-landscape.png\" /> < splash density = \"land-ldpi\" src = \"res/screen/android/screen-ldpi-landscape.png\" /> < splash density = \"land-mdpi\" src = \"res/screen/android/screen-mdpi-landscape.png\" /> < splash density = \"land-xhdpi\" src = \"res/screen/android/screen-xhdpi-landscape.png\" /> < splash density = \"port-hdpi\" src = \"res/screen/android/screen-hdpi-portrait.png\" /> < splash density = \"port-ldpi\" src = \"res/screen/android/screen-ldpi-portrait.png\" /> < splash density = \"port-mdpi\" src = \"res/screen/android/screen-mdpi-portrait.png\" /> < splash density = \"port-xhdpi\" src = \"res/screen/android/screen-xhdpi-portrait.png\" /> </ platform > < platform name = \"ios\" > <!-- iOS 8.0 + --> <!-- iPhone 6 Plus --> < icon src = \"res/icon/ios/icon-60@3x.png\" width = \"180\" height = \"180\" /> <!-- iOS 7.0 + --> <!-- iPhone / iPod Touch --> < icon src = \"res/icon/ios/icon-60.png\" width = \"60\" height = \"60\" /> < icon src = \"res/icon/ios/icon-60@2x.png\" width = \"120\" height = \"120\" /> <!-- iPad --> < icon src = \"res/icon/ios/icon-76.png\" width = \"76\" height = \"76\" /> < icon src = \"res/icon/ios/icon-76@2x.png\" width = \"152\" height = \"152\" /> <!-- iOS 6.1 --> <!-- Spotlight Icon --> < icon src = \"res/icon/ios/icon-40.png\" width = \"40\" height = \"40\" /> < icon src = \"res/icon/ios/icon-40@2x.png\" width = \"80\" height = \"80\" /> <!-- iPhone / iPod Touch --> < icon src = \"res/icon/ios/icon.png\" width = \"57\" height = \"57\" /> < icon src = \"res/icon/ios/icon@2x.png\" width = \"114\" height = \"114\" /> <!-- iPad --> < icon src = \"res/icon/ios/icon-72.png\" width = \"72\" height = \"72\" /> < icon src = \"res/icon/ios/icon-72@2x.png\" width = \"144\" height = \"144\" /> <!-- iPhone Spotlight and Settings Icon --> < icon src = \"res/icon/ios/icon-small.png\" width = \"29\" height = \"29\" /> < icon src = \"res/icon/ios/icon-small@2x.png\" width = \"58\" height = \"58\" /> < icon src = \"res/icon/ios/icon-small@3x.png\" width = \"87\" height = \"87\" /> <!-- iPad Spotlight and Settings Icon --> < icon src = \"res/icon/ios/icon-50.png\" width = \"50\" height = \"50\" /> < icon src = \"res/icon/ios/icon-50@2x.png\" width = \"100\" height = \"100\" /> < splash src = \"res/screen/ios/Default~iphone.png\" width = \"320\" height = \"480\" /> < splash src = \"res/screen/ios/Default@2x~iphone.png\" width = \"640\" height = \"960\" /> < splash src = \"res/screen/ios/Default-Portrait~ipad.png\" width = \"768\" height = \"1024\" /> < splash src = \"res/screen/ios/Default-Portrait@2x~ipad.png\" width = \"1536\" height = \"2048\" /> < splash src = \"res/screen/ios/Default-Landscape~ipad.png\" width = \"1024\" height = \"768\" /> < splash src = \"res/screen/ios/Default-Landscape@2x~ipad.png\" width = \"2048\" height = \"1536\" /> < splash src = \"res/screen/ios/Default-568h@2x~iphone.png\" width = \"640\" height = \"1136\" /> < splash src = \"res/screen/ios/Default-667h.png\" width = \"750\" height = \"1334\" /> < splash src = \"res/screen/ios/Default-736h.png\" width = \"1242\" height = \"2208\" /> < splash src = \"res/screen/ios/Default-Landscape-736h.png\" width = \"2208\" height = \"1242\" /> </ platform > 应用程序启动的图标和时间 参考文章: https://www.jianshu.com/p/3ad9538cf5fe <!--自动隐藏启动页面AutoHideSplashScreen--> <preference name=\"AutoHideSplashScreen\" value=\"false\" /> <!--显示启动页面的时间长度SplashScreenDelay--> <preference name=\"SplashScreenDelay\" value=\"3000\" /> <!--是否显示淡入淡出效果--> <preference name=\"FadeSplashScreen\" value=\"true\"/> <!--FadeSplashScreenDuration时间是包含在SplashScreenDelay的时间里的。--> <preference name=\"FadeSplashScreenDuration\" value=\"750\"/>","tags":"JavaScript","url":"articles/cordova-android/"},{"title":"怎么放大缩小图片的尺寸和图片尺寸转换","text":"分享一个好用的网站可以用于放大缩小图片 这个网站可以放大缩小图片的尺寸,方便调节图片的大小尺寸,网站地址: resize images","tags":"Tools","url":"articles/how-resize-image/"},{"title":"Linux安装包遇到的问题","text":"起因 在尝试安装samba的时候,服务器端总是报如下的错误: error processing package python-dnspython Sub-process /usr/bin/dpkg returned an error code (1) 解决方法 参考博客：https://www.cnblogs.com/anpengapple/p/5098960.html 中说是dpkg目录中的info目录异常，然而直接删除这个目录会导致一些问题(苦逼的这个问题可能就是我把Ubuntu中的默认python由2改到3，然后在纠正之后出现的一系列问题中越走越远。。。。)，所以先备份，更新一下这个目录： sudo mv /var/lib/dpkg/info/ /var/lib/dpkg/info_backup/ sudo mkdir /var/lib/dpkg/info/ xlwt flask xlwt 中文'latin-1' codec can't encode characters in positio response = make_response(send_from_directory(directory, filename, as_attachment=True)) response.headers[\"Content-Disposition\"] = \"attachment; filename={0}\".format(filename.encode('utf-8')) response.direct_passthrough = False return response 注意返回的中文名称需要转码为utf-8","tags":"Python","url":"articles/python-error/"},{"title":"[Linux] (持续更新中)一些常用的linux系统的操作命令","text":"关键字 free top 防火墙操作 显示防火墙状态 $ sudo iptables -L 关闭防火墙 $ sudo iptables -F #flush 清空所有的规则 添加到防火墙中 $ sudo iptables -A FIREWALL -p tcp -m tcp –dport 80 –syn -j ACCEPT # -A append # -p protocol # -m match # -d destination # -j jump $ sudo iptables -A FIREWALL -p tcp -m tcp --dport 22 --syn -j ACCEPT # 打开22端口 $ sudo iptables-save > /etc/firewall-rules 性能相关的命令 与 df 不一样的是，du会直接到文件系统内查找所有的文件数据。 # df -lh # 查看磁盘空间 # du -ah --max-depth=1 这个是我想要的结果 a表示显示目录下所有的文件和文件夹（不含子目录），h表示以人类能看懂的方式，max-depth表示目录的深度。 ```` ### 统计文件个数 统计当前文件夹下文件的个数，包括子文件夹里的 `ls -lR|grep \"&#94;-\"|wc -l` 统计文件夹下目录的个数，包括子文件夹里的 `ls -lR|grep \"&#94;d\"|wc -l` 统计当前文件夹下文件的个数 `ls -l |grep \"&#94;-\"|wc -l` 统计当前文件夹下目录的个数 `ls -l |grep \"&#94;d\"|wc -l` 附： 统计输出信息的行数 `wc -l` 将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 &#94;d `grep \"&#94;-\"` ### 切换语言环境为英文 参考文章: https://blog.csdn.net/yygydjkthh/article/details/47694747 $ sudo export LANG =en_US. UTF -8 $ dpkg-reconfigure locales # 点击空格选择en_US_UTF-8,点击空格去掉zh_CN_UTF-8 $ locale -a ### 磁盘管理,加载新的磁盘 参加文档: https://www.fujieace.com/linux/no-partition-is-defined-yet.html 阿里云的帮助文档,注意ext3格式,实际的系统格式是ext4:https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.9.u398NC No partition is defined yet! Could not delete partition 1 > 删除磁盘 `fdisk d`的时候一定要注意清空文件 `/etc/fstab`里面的内容,否则容易出现很大的问题. fdisk -l fdisk /dev/sdb mkfs.ext4 /dev/sdb1 nano /etc/fstab 这里加上对应的需要加载的磁盘的信息 mount /dev/sdb1 ### install ZH_CN.UTF-8语言支持 查看当前配置语言环境 $ locale -a 安装语言包 $ sudo apt-get install locales 配置选择语言,按空格选择对应的字符集 $ sudo dpkg-reconfigure locales locale的设定： LC_ALL和LANG优先级的关系：LC_ALL > LC_* > LANG 修改文件(debian系列)：/etc/default/locale 修改文件(redhat系列)：/etc/sysconfig/i18n 1、如果需要一个纯中文的系统的话，设定LC_ALL=zh_CN. XXXX ，或者LANG=zh_CN.XXXX都可以。 2、如果只想要一个可以输入中文的环境，而保持菜单、标题，系统信息等等为英文界面，那么只需要设定 LC_CTYPE=zh_CN. XXXX ， LANG =en_US.XXXX就可以了。 3、假如什么也不做的话，也就是LC_ALL，LC_*和LANG均不指定特定值的话，系统将采用POSIX作为lcoale，也就是C locale。 $ sudo nano /etc/default/locale 临时设定编码：[nick@ubuntu~]$ export LC_ALL=\"zh_CN. GBK \" 2、永久设定编码：修改文件/etc/profile（对所有用户有效）或者~/.bash_profile。在文件尾加入export LC_ALL=zh_CN. GBK $ sudo nano /etc/profile 命令行中英文切换,本地安装的是中文字符集 $ export LC_ALL=C $ unset LC_ALL \" `","tags":"Linux","url":"articles/basic-command/"},{"title":"[面试] 5. 性能测试相关的涉及内容","text":"前言 今天到一家初创型的公司去参加了一轮面试,面试了好久性能测试相关的东西,好多年没有做这个了,突然问起来,感觉好痛苦. 可是也无奈, 因为自己选择了这个行业.还是需要自己重拾这些遗忘的东西,所以我这里就梳理一下自己所知道的重要的检查点. 关键字 TPS (Transaction Per Second) PV (Page View) PR (Page Response) 2017-07-26 反馈 深拷贝和浅拷贝的区别? Appinum的使用,能在测试吗? 静态方法中可以使用 this 和 super 吗? 2017-07-25 反馈 UI 测试用到哪些工具? 你对所列到的python和java语言哪种最擅长? Http和接口有什么区别? 抽象类和普通类有什么区别? java的overload和override的区别? java中的Error和Exception的区别? 给一个测试方法,里面有十个入参,每个参数都有十种不同的值,按照普通的思路可能会涉及10*10的测试用例,怎么设计测试用例可以用最少的用例覆盖更多的功能? 给一个数组,然后返回一个没有重复的新的数组,要求不借助其他任何第三方包或者库(包括Set,ArrayList)? Python中的装饰器谈谈你的理解? java中的顶级类是什么? Python中的list,tuple,set,dict的区别作用,写出对应的他们的增删改查操作?","tags":"面试","url":"articles/5-software-performance-testing/"},{"title":"[ SQL ]收集的一些好的SQL snippets","text":"MYSQL 用户变量,系统变量,局部变量 参考文档: https://stackoverflow.com/questions/11754781/how-to-declare-a-variable-in-mysql 1. 用户变量: 基于会话变量实现的, 可以暂存值, 并传递给同一连接里的下一条sql使用的变量.当客户端连接退出时,变量会被释放。只针对当前的存储过程或者当前的执行环境有效. 对于SET，可以使用=或:=来赋值，对于SELECT只能使用:=来赋值. 我们可以使用一条简单的select语句查询定义的用户变量的值。 2. 系统变量: MySQL可以访问许多系统变量。当服务器运行时许多变量可以动态更改。这样通常允许你修改服务器操作而不需要停止并重启服务器。当服务器启动时，它将所有全局变量初始化为默认值。这些默认值可以在选项文件中或在命令行中指定的选项进行更改。服务器启动后，通过连接服务器并执行SET GLOBAL var_name语句，可以动态更改这些全局变量。 3. 局部变量: 作用范围在begin到end语句块之间。在该语句块里设置的变量成为局部变量。 基本的排序显示 -- MYSQL 方式 SELECT * FROM SCore s ORDER BY s.score DESC LIMIT 3; -- SQL SERVER 方式 SELECT TOP 3 * FROM SCore s ORDER BY s.score DESC; 查询分数排名第二的人(排序第二) -- MYSQL方式, LIMIT第一参数是查询的条数,第二个数是查询的索引值,从0开始 SELECT * FROM SCore s ORDER BY s.score DESC LIMIT 1,1; -- SQL Server 方式 SELECT TOP 1 * FROM Score s WHERE s.id NOT IN ( SELECT TOP 1 * FROM Score ORDER BY s.score DESC ) ORDER BY s.score DESC; 显示排名名次或者说对应的行号 -- MYSQL方式 SELECT s . username , s . score , @ rank := @ rank + 1 FROM Score s join ( SELECT @ ranK := 0 ) r order by 1 DESC ; 查询父节点下的所有子节点集合 CREATE DEFINER = 'test'@'%' FUNCTION test.func_getMyFollowings(inputuserKey INT(11)) RETURNS varchar(5000) CHARSET utf8 BEGIN DECLARE rootNode varchar(100); DECLARE tempChilds varchar(5000); SET tempChilds =''; SET rootNode=CAST(inputuserKey AS CHAR); WHILE rootNode IS NOT NULL DO -- 遍历节点操作 SET tempChilds = concat(tempChilds,rootNode,','); SELECT group_concat(um.EmployeeUserKey) INTO rootNode FROM UserManager um where FIND_IN_SET(um.ManagerSUserKey,rootNode)>0; -- 找到当前节点的子节点 END WHILE; RETURN tempChilds; END MYSQL中的 concat 和 concat_ws 和 group_concat 的区别","tags":"SQL","url":"articles/sql-best-tips/"},{"title":"Available license server","text":"license servers http://xidea.online/servers.html [Available 2018-07-25]https://blog.csdn.net/zajule/article/details/80479988","tags":"Java","url":"articles/jetbrain-idea-licenseserver/"},{"title":"分层自动化测试","text":"这是第一次听到这个理念,其实描述的是各个阶段的测试.传统的自动化测试更关注的产品UI层的自动化测试，而分层的自动化测试 倡导产品的不同阶段（层次）都需要自动化测试. 能够帮助测试人员从重复、枯燥的手工测试中解放出来。 最早是google进行的实践，google在测试之初就做了非常优秀的测试覆盖，单元测试，接口测试，而web测试方面，他们只进行了很少的自动化， 甚至是全手工测试页面。这种模式的效率很高，效果也很好，产品质量高，而且上线迅速。这种模式逐渐被百度接受。 1、把传统的UI测试逐步弱化 2、增加接口测试，白盒测试的比重 3、利用系统级mock技术解耦 自动化测试越底层收益越大,做分层,需要结合缺陷等数据,做最有价值的区域. 不要为了持续集成而集成,注重基础建设; 将能够自动的都部署到CI上,更有价值; UI最好是手工测试。接口非常适合自动化。 参考阿里PPT 参考: 如何做好自动化测试，揭秘阿里巴巴分层自动化实践之路 1. 单元测试（unit）：它可以通过mock框架，模拟各种异常场景，外部依赖最少，且可以做到测试粒度到最小的一种测试方法。 也因为依赖少，可方便随时随地执行，也让问题排查很简单。这是一切测试的地基。 2. 接口测试（service）：这里要求测试人员对系统的结构和系统间的调度非常清楚，同时要了解接口逻辑关系，否则接口测试代码很 容易遗漏一些异常场景。这一层由于含有一些业务逻辑和多接口的一个集成，所以相对单元测试来说，多了一些外界依赖，导致问题定位 不会有单元测试层那么准确。因此投入会比单元测试多一些。 3. 页面测试（ UI ）：是常见的黑盒自动化测试场景。它最接近用户真实场景，也容易发现问题，但它的实现成本最高且太容易受外部依赖， 影响脚本成功率，所以处在金字塔的顶端，但它不是金字塔的全部。自动化测试的劣势，其中80%都是因为UI自动化。 分层自动化测试倡导的就是，将系统分层，不同层次用合适的自动化方法进行测试的一种测试策略。某个项目是否都能用自动化覆盖， 那就要看测试负责人的分层策略是否合理、全面。 自动化用的好可以大幅提升效率，降低成本投入，用不好则可能成为测试鸡肋，妨碍测试进程。 集成、接口测试对于不少测试新手来说不太容易理解，单元测试关注代码的实现逻辑，例如一个if 分支或一个for循环的实现； 那么集成、接口测试关注的一是个函数、类（方法）所提供的接口是否可靠。例如，我定义一个add()函数用于计算两个参数的 结果并返回，那么我需要调用add()并传参，并比较返回值是否两个参数相加。当然，接口测试也可以是url的形式进行传递。 例如，我们通过get方式向服务器发送请求，那么我们发送的内容做为URL的一部分传递到服务器端。但比如 Web service 技术对外提供的一个公共接口，需要通过soapUI 等工具对其进行测试。 UI层的自动化测试，这个大家应该再熟悉不过了，大部分测试人员的大部分工作都是对UI层的功能进行测试。例如，我们不断重复的对 一个表单提交，结果查询等功能进行测试，我们可以通过相应的自动化测试工具来模拟这些操作，从而解放重复的劳动。 UI层的自动化测试工具非常多，比较主流的是QTP，Robot Framework、watir、selenium 等。 这是为了表示不同阶段所投入自动化测试的比例。如果一个产品从没有做单元测试与接口测试，只做UI层的自动化测试是不科学的， 从而很难从本质上保证产品的质量。如果你妄图实现全面的UI层的自动化测试，那更是一个劳民伤财的举动，投入了大量人力时间， 最终获得的收益可能会远远低于所支付的成本。因为越往上层，其维护成本越高。尤其是UI层的元素会时常的发生改变。所以，我们应该把更多的 自动化测试放在单元测试与接口测试阶段进行。 既然UI层的自动化测试这么劳民伤财，那我们只做单元测试与接口测试好了。 NO ! 因为不管什么样的产品，最终呈现给用户的是UI层。所以， 测试人员应该更多的精力放在UI层。那么也正是因为测试人员在UI层投入大量的精力，所以，我们有必要通过自动化的方式帮助我们\"部分解放\" 重复的劳动。 在自动化测试中最怕的是变化，因为变化的直接结果就是导致测试用例的运行失败，那么就需要对自动化脚本进行维护；如何控制失败，降低维护 成本对自化的成败至关重要。反过来讲，一份永远都运行成功的自动化测试用例是没有价值`。 至于在金字塔中三种测试的比例要根据实际的项目需求来划分。在《google 测试之道》一书，对于google产品，70%的投入为单元测试， 20%为集成、接口测试，10% 为UI层的自动化测试。 因为测试门槛的降低,从测试人员自身的发展来说，我其实非常需要通过自动化技术来增加自己有竞争力。 当然，做到一定年限测试人员会选择转管理或其它岗位，这又是另一个话题了。 是否该自动化测试??? 首先考考虑产品是否适合做自动化测试。这方法比较普遍的共识是从三个方面进行权衡。 1. 软件需求变动不频繁 测试脚本的稳定性决定了自动化测试的维护成本。如果软件需求变动过于频繁，测试人员需要根据变动的需求来更新测试用例以及相关的测试脚本， 而脚本的维护本身就是一个代码开发的过程，需要修改、调试，必要的时候还要修改自动化测试的框架，如果所花费的成本不低于利用其节省的测试成本，那么自动化测试便是失败的。 2. 项目周期较长 由于自动化测试需求的确定、自动化测试框架的设计、测试脚本的编写与调试均需要相当长的时间来完成。这样的过程本身就是一个测试软件的开 发过程，需要较长的时间来完成。如果项目的周期比较短，没有足够的时间去支持这样一个过程，那么自动化测试便成为笑谈。 自动化测试脚本可重复使用 自动化测试脚本的重复使用要从三个方面来考量，一方面所测试的项目之间是否很大的差异性（如C/S系统和B/S系统的差异）；所选择的测试工具是否适应这种差异； 最后，测试人员是否有能力开发出适应这种差异的自动化测试框架。 选择什么工具进行自动化测试 首先要先确认你所测试的产品是桌面程序（C/S）还是web应用（B/S）。 桌面程序的工具有： QTP 、 AutoRunner web应用的工具有： QTP 、AutoRunner、Robot Framework、watir、selenium selenium 用前须知 在selenium 2.0 中主推的是WebDriver ，WebDriver 是selenium RC 的替代品，因为 selenium 为了向下兼容性，所以selenium RC 并没有彻底抛弃， 如果你使用selenium开发一个新自动化测试项目，强列推荐使用WebDriver 。那么selenium RC 与webdriver 主要有什么区别呢？ selenium RC 在浏览器中运行JavaScript应用，使用浏览器内置的JavaScript 翻译器来翻译和执行selenese命令（selenese 是selenium命令集合）。 WebDriver通过原生浏览器支持或者浏览器扩展直接控制浏览器。WebDriver针对各个浏览器而开发，取代了嵌入到被测Web应用中的JavaScript。 与浏览器的紧密集成支持创建更高级的测试，避免了JavaScript安全模型导致的限制。除了来自浏览器厂商的支持，WebDriver还利用操作系统级的调用模拟用户输入。","tags":"SoftwareTesting","url":"articles/fen-ceng/"},{"title":"[面试] 1. 面向对象的相关概念","text":"这里整理的是针对面向对象的相关问题和面试中可能涉及的问题. 达到目的 面向对象三大特性,封装 (Encapsulation) , 继承 (Inheritance) 和多态 (Polymorphism)","tags":"Java","url":"articles/1-object-oriented-programming/"},{"title":"需要知道的一些算法","text":"费布拉切数列 1 1 2 3 5 8 13 21 public Integer fibonacci(int n){ if(n<=2){ return 1; }else { return fibonacci(n-1)+fibonacci(n-2); } } 有A、B两个水杯，都没有刻度，也不允许做刻度。A杯装满水是5升，B杯装满水是3升。 不借助别的任何工具，只用这两个杯子如何精确的得到4升水？ 把装满3升的水倒进5升的杯子里面，再把装满3升的水倒到5升的杯子，只倒了2升5升的杯子就满了，而3升的杯子里面还有1升水，将5升的杯子的水倒空， 将3升杯子里面的1升水倒进5升杯子里，再将装满3升水全部倒进5升杯子里，那么5升杯子里面现在有4升水。 冒泡排序。用C 或 Java 语言。（从小到大排序）","tags":"Java","url":"articles/algorithm-best/"},{"title":"[面试]测试面试的问题整理","text":"1、问：你在测试中发现了一个bug，但是开发经理认为这不是一个bug，你应该怎样解决？ 首先，将问题提交到缺陷管理库里面进行备案。 然后，要获取判断的依据和标准： 根据需求说明书、产品说明、设计文档等，确认实际结果是否与计划有不一致的地方，提供缺陷是否确认的直接依据； 如果没有文档依据，可以根据类似软件的一般特性来说明是否存在不一致的地方，来确认是否是缺陷； 根据用户的一般使用习惯，来确认是否是缺陷； 与设计人员、开发人员和客户代表等相关人员探讨，确认是否是缺陷； 合理的论述，向测试经理说明自己的判断的理由，注意客观、严谨，不参杂个人情绪。 等待测试经理做出最终决定，如果仍然存在争议，可以通过公司政策所提供的渠道，向上级反映，并有上级做出决定。 2、问：给你一个网站，你如何测试？ 首先，查找需求说明、网站设计等相关文档，分析测试需求。 制定测试计划，确定测试范围和测试策略，一般包括以下几个部分：功能性测试；界面测试；性能测试；数据库测试；安全性测试；兼容性测试 设计测试用例： 功能性测试可以包括，但不限于以下几个方面： 链接测试。链接是否正确跳转，是否存在空页面和无效页面，是否有不正确的出错信息返回。 提交功能的测试。 多媒体元素是否可以正确加载和显示。 多语言支持是否能够正确显示选择的语言等。 界面测试可以包括但不限于一下几个方面： 页面是否风格统一，美观 页面布局是否合理，重点内容和热点内容是否突出 控件是否正常使用 对于必须但未安装的控件，是否提供自动下载并安装的功能 文字检查 性能测试一般从以下两个方面考虑： 压力测试；负载测试；强度测试 数据库测试要具体决定是否需要开展。数据库一般需要考虑连结性，对数据的存取操作，数据内容的验证等方面。 安全性测试： 基本的登录功能的检查 是否存在溢出错误，导致系统崩溃或者权限泄露 相关开发语言的常见安全性问题检查，例如SQL注入等 如果需要高级的安全性测试，确定获得专业安全公司的帮助，外包测试，或者获取支持 兼容性测试，根据需求说明的内容，确定支持的平台组合： 浏览器的兼容性； 操作系统的兼容性； 软件平台的兼容性； 数据库的兼容性 开展测试，并记录缺陷。合理的安排调整测试进度，提前获取测试所需的资源，建立管理体系（例如，需求变更、风险、配置、测试文档、缺陷报告、人力资源等内容）。 定期评审，对测试进行评估和总结，调整测试的内容。 3、在搜索引擎中输入汉字就可以解析到对应的域名，请问如何用LoadRunner进行测试。 建立测试计划，确定测试标准和测试范围 设计典型场景的测试用例，覆盖常用业务流程和不常用的业务流程等 根据测试用例，开发自动测试脚本和场景： 录制测试脚本：新建一个脚本（Web/HTML协议）；点击录制按钮，在弹出的对话框的URL中输入\"about:blank\"；在打开的浏览器中进行正常操作流程后，结束录制；调试脚本并保存，可能要注意到字符集的关联。 设置测试场景：针对性能设置测试场景，主要判断在正常情况下，系统的平均事务响应时间是否达标；针对压力负载设置测试场景，主要判断在长时间处于满负荷或者超出系统承载能力的条件下，系统是否会崩溃；执行测试，获取测试结果，分析测试结果 4、问：一台客户端有三百个客户与三百个客户端有三百个客户对服务器施压，有什么区别? 300个用户在一个客户端上，会占用客户机更多的资源，而影响测试的结果。线程之间可能发生干扰，而产生一些异常。 300个用户在一个客户端上，需要更大的带宽。 IP地址的问题，可能需要使用IP Spoof来绕过服务器对于单一IP地址最大连接数的限制。 所有用户在一个客户端上，不必考虑分布式管理的问题；而用户分布在不同的客户端上，需要考虑使用控制器来整体调配不同客户机上的用户。同时，还需要给予相应的权限配置和防火墙设置。 5、试述软件的概念和特点？软件复用的含义？构件包括哪些？ 软件是计算机系统中与硬件相互依存的另一部分，与计算机系统操作有关的计算机程序、规程、规则，以及可能有的文件、文档及数据。 软件复用(SoftWare Reuse)是将已有软件的各种有关知识用于建立新的软件，以缩减软件开发和维护的花费。软件复用是提高软件生产力和质量的一种重要技术。早期的软件复用主要是代码级复用，被复用的知识专指程序，后来扩大到包括领域知识、开发经验、设计决定、体系结构、需求、设计、代码和文档等一切有关方面。 可以被复用的软件成分一般称作可复用构件 6、软件生存周期及其模型是什么？ 软件生存周期（Software life cycle）又称为软件生命期，生存期。是指从形成开发软件概念起，所开发的软件使用以后，知道失去使用价值消亡为止的整个过程。一般来说，整个生存周期包括计划（定义）、开发、运行（维护）三个时期，每个时期又划分为若干个阶段。每个阶段有明确的任务。 周期模型（典型的几种）： 瀑布模型 快速原型模型：快速原型模型允许在需求分析阶段对软件的需求进行初步而非完全的分析和定义，快速设计开发出软件系统的原型，该原型向用户展示待开发软件的全部或部分功能和性能；用户对该原型进行测试评定，给出具体改进意见以丰富细化软件需求；开发人员据此对软件进行修改完善，直至用户满意认可之后，进行软件的完整实现及测试、维护。 迭代模型：迭代包括产生产品发布（稳定、可执行的产品版本）的全部开发活动和要使用该发布必需的所有其他外围元素。在某种程度上，开发迭代是一次 完整地经过所有工作流程的过程：需求分析、设计、实施和测试工作流程。实质上，它类似小型的瀑布式项目。RUP认为，所有的阶段都可以细分为迭代。每一次 的迭代都会产生一个可以发布的产品，这个产品是最终产品的一个子集。 生命周期阶段： 软件计划与可行性分析 需求分析 软件设计 编码 软件测试 运行与维护 7、什么是软件测试？软件测试的目的与原则 在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。 软件测试的目的： 测试是程序的执行过程，目的在于发现错误 一个成功的测试用例在于发现至今未发现的错误 一个成功的测试是发现了至今未发现的错误的测试 确保产品完成了它所承诺或公布的功能，并且用户可以访问到的功能都有明确的书面说明。 确保产品满足性能和效率的要求 确保产品是健壮的和适应用户环境的 软件测试的原则： 测试用例中一个必须部分是对预期输出或接过进行定义 程序员应避免测试自己编写的程序 编写软件的组织不应当测试自己编写的软件 应当彻底检查每个测试的执行结果 测试用例的编写不仅应当根据有效和预料到的输入情况，而且也应当根据无效和未预料到的输入情况 检擦程序是否\"未做其应该做的\"仅是测试的一半，测试的另一半是检查程序是否\"做了其不应该做的\" 应避免测试用例用后即弃，除非软件本身就是个一次性的软件 计划测试工作时不应默许假定不会发现错误 程序某部分存在更多错误的可能性，与该部分已经发现错误的数量成正比 软件测试是一项极富创造性，极具智力的挑战性的工作 8、软件配置管理的作用？软件配置包括什么？ 软件配置管理（Software Configuration Management， SCM ）是一种标识、组织和控制修改的技术。软件配置管理应用于整个软件工程过程。在软件建立时变更是不可避免的，而变更加剧了项目中软件开发者之间的混乱。SCM活动的目标就是为了标识变更、控制变更、确保变更正确实现并向其他有关人员报告变更。从某种角度讲，SCM是一种标识、组织和控制修改的技术，目的是使错误降为最小并最有效地提高生产效率。 软件配置包括如下内容：配置项识别、工作空间管理、版本控制、变更控制、状态报告、配置审计 9、什么是软件质量？ 概括地说，软件质量就是\"软件与明确的和隐含的定义的需求相一致的程度\"。具体地说，软件质量是软件符合明确叙述的功能和性能需求、文档中明确描述 的开发标准、以及所有专业开发的软件都应具有的隐含特征的程度。 影响软件质量的主要因素，这些因素是从管理角度对软件质量的度量。可划分为三组，分别反应用户在使用软件产品时的三种观点。正确性、健壮性、效率、完整性、可用性、风险（产品运行）；可理解性、可维修性、灵活性、可测试性（产品修改）；可移植性、可再用性、互运行性（产品转移）。 10、目前主要的测试用例设计方法是什么？ 白盒测试：逻辑覆盖、循环覆盖、基本路径覆盖 黑盒测试：边界值分析法、等价类划分、错误猜测法、因果图法、状态图法、测试大纲法、随机测试、场景法 11、软件的安全性应从哪几个方面去测试？ 软件安全性测试包括程序、数据库安全性测试。根据系统安全指标不同测试策略也不同。 用户认证安全的测试要考虑问题： 明确区分系统中不同用户权限 、系统中会不会出现用户冲突 、系统会不会因用户的权限的改变造成混乱 、用户登陆密码是否是可见、可复制 、是否可以通过绝对途径登陆系统（拷贝用户登陆后的链接直接进入系统）、用户退出系统后是否删除了所有鉴权标记，是否可以使用后退键而不通过输入口令进入 系统 、系统网络安全的测试要考虑问题 、测试采取的防护措施是否正确装配好，有关系统的补丁是否打上 、模拟非授权攻击，看防护系统是否坚固 、采用成熟的网络漏洞检查工具检查系统相关漏洞（即用最专业的黑客攻击工具攻击试一下，现在最常用的是 NBSI 系列和 IPhacker IP ） 、采用各种木马检查工具检查系统木马情况 、采用各种防外挂工具检查系统各组程序的外挂漏洞 数据库安全考虑问题： 系统数据是否机密（比如对银行系统，这一点就特别重要，一般的网站就没有太高要求）、系统数据的完整性（我刚刚结束的企业实名核查服务系统中就曾存在数据 的不完整，对于这个系统的功能实现有了障碍） 、系统数据可管理性 、系统数据的独立性 、系统数据可备份和恢复能力（数据备份是否完整，可否恢复，恢复是否可以完整） 12、什么是测试用例 什么是测试脚本 两者的关系是什么？ 为实施测试而向被测试系统提供的输入数据、操作或各种环境设置以及期望结果的一个特定的集合。 测试脚本是为了进行自动化测试而编写的脚本。 测试脚本的编写必须对应相应的测试用例 13、简述什么是静态测试、动态测试、黑盒测试、白盒测试、α测试 β测试 静态测试是不运行程序本身而寻找程序代码中可能存在的错误或评估程序代码的过程。 动态测试是实际运行被测程序，输入相应的测试实例，检查运行结果与预期结果的差异，判定执行结果是否符合要求，从而检验程序的正确性、可靠性和有效性，并分析系统运行效率和健壮性等性能。 黑盒测试一般用来确认软件功能的正确性和可操作性,目的是检测软件的各个功能是否能得以实现,把被测试的程序当作一个黑盒,不考虑其内部结构,在知道该程序的输入和输出之间的关系或程序功能的情况下,依靠软件规格说明书来确定测试用例和推断测试结果的正确性。 白盒测试根据软件内部的逻辑结构分析来进行测试,是基于代码的测试，测试人员通过阅读程序代码或者通过使用开发工具中的单步调试来判断软件的质量，一般黑盒测试由项目经理在程序员开发中来实现。 α测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，Alpha测试不能由程序员或测试员完成。 β测试是软件的多个用户在一个或多个用户的实际使用环境下进行的测试。开发者通常不在测试现场，Beta测试不能由程序员或测试员完成。 14、软件质量保证体系是什么 国家标准中与质量保证管理相关的几个标准是什么?他们的编号和全称是什么? SQA由一套软件工程过程和方法组成，以保证（软件的）质量。SQA贯穿整个软件开发过程，(它)应包括需求文档评审、代码控制、代码评审、变更管理、配置管理、版本管理和软件测试。 软件质量保证（ SQA -Software Quality Assurance）是建立一套有计划，有系统的方法，来向管理层保证拟定出的标准、步骤、实践和方法能够正确地被所有项目所采用。软件质量保证的目的是使软件过程对于管理人员来说是可见的。它通过对软件产品和活动进行评审和审计来验证软件是合乎标准的。软件质量保证组在项目开始时就一起参与建立计划、标准和过程。这些将使软件项目满足机构方针的要求。 15、软件产品质量特性是什么? 功能性：适应性、准确性、互操作性、依从性、安全性。 可靠性：成熟性、容错性、易恢复性。 可使用性：易理解性、易学习性、易操作性。 效率：时间特性、资源特性。 可维护性：易分析性、易变更性、稳定性、易测试性。 可移植性： 适应性、易安装性、遵循性、易替换性 16、软件测试的策略是什么? 软件测试策略：在一定的软件测试标准、测试规范的指导下，依据测试项目的特定环境约束而规定的软件测试的原则、方式、方法的集合。 17、软件测试分为几个阶段 各阶段的测试策略和要求是什么? 和开发过程相对应，测试过程会依次经历单元测试、集成测试、系统测试、验收测试四个主要阶段： 单元测试：单元测试是针对软件设计的最小单位––程序模块甚至代码段进行正确性检验的测试工作，通常由开发人员进行。 集成测试：集成测试是将模块按照设计要求组装起来进行测试，主要目的是发现与接口有关的问题。由于在产品提交到测试部门前，产品开发小组都要进行联合调试，因此在大部分企业中集成测试是由开发人员来完成的。 系统测试：系统测试是在集成测试通过后进行的，目的是充分运行系统，验证各子系统是否都能正常工作并完成设计的要求。它主要由测试部门进行，是测试部门最大最重要的一个测试，对产品的质量有重大的影响。 验收测试：验收测试以需求阶段的《需求规格说明书》为验收标准，测试时要求模拟实际用户的运行环境。对于实际项目可以和客户共同进行，对于产品来说就是最后一次的系统测试。测试内容为对功能模块的全面测试，尤其要进行文档测试。 单元测试测试策略： 自顶向下的单元测试策略：比孤立单元测试的成本高很多，不是单元测试的一个好的选择。 自底向上的单元测试策略：比较合理的单元测试策略，但测试周期较长。 孤立单元测试策略：最好的单元测试策略。 集成测试的测试策略： 大爆炸集成：适应于一个维护型项目或被测试系统较小 自顶向下集成：适应于产品控制结构比较清晰和稳定；高层接口变化较小；底层接口未定义或经常可能被修改；产口控制组件具有较大的技术风险，需要尽早被验证；希望尽早能看到产品的系统功能行为。 自底向上集成：适应于底层接口比较稳定；高层接口变化比较频繁；底层组件较早被完成。 基于进度的集成 优点：具有较高的并行度；能够有效缩短项目的开发进度。 缺点：桩和驱动工作量较大；有些接口测试不充分；有些测试重复和浪费。 系统测试的测试策略： 数据和数据库完整性测试；功能测试；用户界面测试；性能评测；负载测试；强度测试；容量测试；安全性和访问控制测试；故障转移和恢复测试；配置测试；安装测试；加密测试；可用性测试；版本验证测试；文档测试 18、软件测试各个阶段通常完成什么工作？各个阶段的结果文件是什么？包括什么内容？ 单元测试阶段：各独立单元模块在与系统地其他部分相隔离的情况下进行测试，单元测试针对每一个程序模块进行正确性校验，检查各个程序模块是否正确地实现了规定的功能。生成单元测试报告，提交缺陷报告。 集成测试阶段：集成测试是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动。该阶段生成集成测试报告，提交缺陷报告。 系统测试阶段：将通过确认测试的软件，作为整个给予计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行环境下，对计算机系统进行全面的功能覆盖。该阶段需要提交测试总结和缺陷报告。 19、测试人员在软件开发过程中的任务是什么？ 1、尽可能早的找出系统中的Bug； 2、避免软件开发过程中缺陷的出现； 3、衡量软件的品质，保证系统的质量； 4、关注用户的需求，并保证系统符合用户需求。 总的目标是：确保软件的质量。 20、在您以往的工作中，一条软件缺陷（或者叫Bug）记录都包含了哪些内容？如何提交高质量的软件缺陷（Bug）记录？ 一条Bug记录最基本应包含： bug编号； bug严重级别，优先级； bug产生的模块； 首先要有bug摘要，阐述bug大体的内容； bug对应的版本； bug详细现象描述，包括一些截图、录像….等等； bug出现时的测试环境，产生的条件即对应操作步骤； 高质量的Bug记录： 1) 通用UI要统一、准确 缺陷报告的UI要与测试的软件UI保持一致，便于查找定位。 2) 尽量使用业界惯用的表达术语和表达方法 使用业界惯用的表达术语和表达方法，保证表达准确，体现专业化。 3) 每条缺陷报告只包括一个缺陷 每条缺陷报告只包括一个缺陷，可以使缺陷修正者迅速定位一个缺陷，集中精力每次只修正一个缺陷。校验者每次只校验一个缺陷是否已经正确修正。 4) 不可重现的缺陷也要报告 首先缺陷报告必须展示重现缺陷的能力。不可重现的缺陷要尽力重现，若尽力之后仍不能重现，仍然要报告此缺陷，但在报告中要注明无法再现，缺陷出现的频率。 5) 明确指明缺陷类型 根据缺陷的现象，总结判断缺陷的类型。例如，即功能缺陷、界面缺陷、数据缺陷，合理化建议这是最常见的缺陷或缺陷类型，其他形式的缺陷或缺陷也从属于其中某种形式。 6) 明确指明缺陷严重等级和优先等级 时刻明确严重等级和优先等级之间的差别。高严重问题可能不值得解决，小装饰性问题可能被当作高优先级。 7) 描述 (Description) ，简洁、准确，完整，揭示缺陷实质，记录缺陷或缺陷出现的位置 描述要准确反映缺陷的本质内容，简短明了。为了便于在软件缺陷管理数据库中寻找制定的测试缺陷，包含缺陷发生时的用户界面（ UI ）是个良好的习惯。例如记录对话框的标题、菜单、按钮等控件的名称。 8) 短行之间使用自动数字序号，使用相同的字体、字号、行间距 短行之间使用自动数字序号，使用相同的字体、字号、行间距，可以保证各条记录格式一致，做到规范专业。 9) 每一个步骤尽量只记录一个操作 保证简洁、条理井然，容易重复操作步骤。 10) 确认步骤完整，准确，简短 保证快速准确的重复缺陷，\"完整\"即没有缺漏，\"准确\"即步骤正确，\"简短\"即没有多余的步骤。 11) 根据缺陷，可选择是否进行图象捕捉 为了直观的观察缺陷或缺陷现象，通常需要附加缺陷或缺陷出现的界面，以图片的形式作为附件附着在记录的\"附件\"部分。为了节省空间，又能真实反映缺陷或缺陷本质，可以捕捉缺陷或缺陷产生时的全屏幕，活动窗口和局部区域。为了迅速定位、修正缺陷或缺陷位置，通常要求附加中文对照图。  附加必要的特殊文档和个人建议和注解 如果打开某个特殊的文档而产生的缺陷或缺陷，则必须附加该文档，从而可以迅速再现缺陷或缺陷。有时，为了使缺陷或缺陷修正者进一步明确缺陷或缺陷的表现，可以附加个人的修改建议或注解。 12) 检查拼写和语法缺陷 在提交每条缺陷或缺陷之前，检查拼写和语法，确保内容正确，正确的描述缺陷。 13) 尽量使用短语和短句，避免复杂句型句式 软件缺陷管理数据库的目的是便于定位缺陷，因此，要求客观的描述操作步骤，不需要修饰性的词汇和复杂的句型，增强可读性。 以上概括了报告测试缺陷的规范要求，随着软件的测试要求不同，测试者经过长期测试，积累了相应的测试经验，将会逐渐养成良好的专业习惯，不断补充新的规范书写要求。此外，经常阅读、学习其他测试工程师的测试缺陷报告，结合自己以前的测试缺陷报告进行对比和思考，可以不断提高技巧。 14) 缺陷描述内容 缺陷描述的内容可以包含缺陷操作步骤，实际结果和期望结果。操作步骤可以方便开发人员再现缺陷进行修正，有些开发的再现缺陷能力很差，虽然他明白你所指的缺陷，但就是无法再现特别是对系统不熟悉的新加入开发人员，介绍步骤可以方便他们再现。实际结果可以让开发明白错误是什么，期望结果可以让开发了解正确的结果应该是如何。 21、黑盒测试和白盒测试是软件测试的两种基本方法，请分别说明各自的优点和缺点！ 黑盒测试的优点有：比较简单，不需要了解程序内部的代码及实现；与软件的内部实现无关； 从用户角度出发，能很容易的知道用户会用到哪些功能，会遇到哪些问题；基于软件开发文档，所以也能知道软件实现了文档中的哪些功能；在做软件自动化测试时较为方便。 黑盒测试的缺点有：不可能覆盖所有的代码，覆盖率较低，大概只能达到总代码量的30%；自动化测试的复用性较低。 白盒测试的优点有：帮助软件测试人员增大代码的覆盖率，提高代码的质量，发现代码中隐 藏的问题。 白盒测试的缺点有：程序运行会有很多不同的路径，不可能测试所有的运行路径；测试基于代码，只能测试开发人员做的对不对，而不能知道设计的正确与否，可能会漏掉一些功能需求；系统庞大时，测试开销会非常大。 22、如何测试一个纸杯？ 功能度：用水杯装水看漏不漏；水能不能被喝到 安全性：杯子有没有毒或细菌 可靠性：杯子从不同高度落下的损坏程度 可移植性：杯子在不同的地方、温度等环境下是否都可以正常使用 兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等 易用性：杯子是否烫手、是否有防滑措施、是否方便饮用 用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述 疲劳测试：将杯子盛上水（案例一）放24小时检查泄漏时间和情况；盛上汽油（案例二）放24小时检查泄漏时间和情况等 压力测试：用根针并在针上面不断加重量，看压强多大时会穿透 22、测试计划工作的目的是什么？测试计划文档的内容应该包括什么？其中哪些是最重要的？ 软件测试计划是指导测试过程的纲领性文件： 领导能够根据测试计划进行宏观调控，进行相应资源配置等 测试人员能够了解整个项目测试情况以及项目测试不同阶段的所要进行的工作等 便于其他人员了解测试人员的工作内容，进行有关配合工作 包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。 测试计划编写6要素（ 5W1H ）： why——为什么要进行这些测试； what—测试哪些方面，不同阶段的工作内容； when—测试不同阶段的起止时间； where—相应文档，缺陷的存放位置，测试环境等； who—项目有关人员组成，安排哪些测试人员进行测试； how—如何去做，使用哪些测试工具以及测试方法进行测试 测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试测试策略和测试方法（最好是能先评审）。 23、黑盒测试的测试用例常见设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用。 1）等价类划分： 等价类是指某个输入域的子集合.在该子集合中,各个输入数据对于揭露程序中的错误都是等效的.并合理地假定:测试某等价类的代表值就等于对这一类其它值的测试.因此,可以把全部输入数据合理划分为若干等价类,在每一个等价类中取一个数据作为测试的输入条件,就可以用少量代表性的测试数据.取得较好的测试结果.等价类划分可有两种不同的情况:有效等价类和无效等价类. 2）边界值分析法：是对等价类划分方法的补充。测试工作经验告诉我,大量的错误是发生在输入或输出范围的边界上,而不是发生在输入输出范围的内部.因此针对各种边界情况设计测试用例,可以查出更多的错误. 使用边界值分析方法设计测试用例,首先应确定边界情况.通常输入和输出等价类的边界,就是应着重测试的边界情况.应当选取正好等于,刚刚大于或刚刚小于边界的值作为测试数据,而不是选取等价类中的典型值或任意值作为测试数据. 3）错误猜测法：基于经验和直觉推测程序中所有可能存在的各种错误, 从而有针对性的设计测试用例的方法. 错误推测方法的基本思想: 列举出程序中所有可能有的错误和容易发生错误的特殊情况,根据他们选择测试用例. 例如, 在单元测试时曾列出的许多在模块中常见的错误. 以前产品测试中曾经发现的错误等, 这些就是经验的总结. 还有, 输入数据和输出数据为0的情况. 输入表格为空格或输入表格只有一行. 这些都是容易发生错误的情况. 可选择这些情况下的例子作为测试用例. 4）因果图方法：前面介绍的等价类划分方法和边界值分析方法,都是着重考虑输入条件,但未考虑输入条件之间的联系, 相互组合等. 考虑输入条件之间的相互组合,可能会产生一些新的情况. 但要检查输入条件的组合不是一件容易的事情, 即使把所有输入条件划分成等价类,他们之间的组合情况也相当多. 因此必须考虑采用一种适合于描述对于多种条件的组合,相应产生多个动作的形式来考虑设计测试用例. 这就需要利用因果图（逻辑模型）. 因果图方法最终生成的就是判定表. 它适合于检查程序输入条件的各种组合情况. 5）正交表分析法：可能因为大量的参数的组合而引起测试用例数量上的激增，同时，这些测试用例并没有明显的优先级上的差距，而测试人员又无法完成这么多数量的测试，就可以通过正交表来进行缩减一些用例，从而达到尽量少的用例覆盖尽量大的范围的可能性。 6）场景分析方法：指根据用户场景来模拟用户的操作步骤，这个比较类似因果图，但是可能执行的深度和可行性更好。 7）状态图法：通过输入条件和系统需求说明得到被测系统的所有状态，通过输入条件和状态得出输出条件；通过输入条件、输出条件和状态得出被测系统的测试用例。 8）大纲法：大纲法是一种着眼于需求的方法，为了列出各种测试条件，就将需求转换为大纲的形式。大纲表示为树状结构，在根和每个叶子结点之间存在唯一的路径。大纲中的每条路径定义了一个特定的输入条件集合，用于定义测试用例。树中叶子的数目或大纲中的路径给出了测试所有功能所需测试用例的大致数量。 24、详细的描述一个测试活动完整的过程。（供参考，本答案主要是瀑布模型的做法） 项目经理通过和客户的交流，完成需求文档，由开发人员和测试人员共同完成需求文档的评审，评审的内容包括：需求描述不清楚的地方和可能有明显冲突或者无法实现的功能的地方。项目经理通过综合开发人员，测试人员以及客户的意见，完成项目计划。然后SQA进入项目，开始进行统计和跟踪 开发人员根据需求文档完成需求分析文档，测试人员进行评审，评审的主要内容包括是否有遗漏或双方理解不同的地方。测试人员完成测试计划文档，测试计划包括的内容上面有描述。 测试人员根据修改好的需求分析文档开始写测试用例，同时开发人员完成概要设计文档，详细设计文档。此两份文档成为测试人员撰写测试用例的补充材料。 测试用例完成后，测试和开发需要进行评审。 测试人员搭建环境 开发人员提交第一个版本，可能存在未完成功能，需要说明。测试人员进行测试，发现BUG后提交给BugZilla。 开发提交第二个版本，包括Bug Fix以及增加了部分功能，测试人员进行测试。 重复上面的工作，一般是3-4个版本后BUG数量减少，达到出货的要求。 如果有客户反馈的问题，需要测试人员协助重现并重新测试。 26、BUG管理工具的跟踪过程（用BugZilla为例子） 测试人员发现了BUG，提交到Bugzilla中，状态为new，BUG的接受者为开发接口人员 开发接口将BUG分配给相关的模块的开发人员，状态修改为已分配，开发人员和测试确认BUG，如果是本人的BUG，则设置为接收；如果是别的开发人员的问题，则转发出去，由下一个开发人员来进行此行为；如果认为不是问题，则需要大家讨论并确认后，拒绝这个BUG，然后测试人员关闭此问题。 如果开发人员接受了BUG，并修改好以后，将BUG状态修改为已修复，并告知测试在哪个版本中可以测试。 测试人员在新版本中测试，如果发现问题依然存在，则拒绝验证；如果已经修复，则关闭BUG。 27、您认为在测试人员同开发人员的沟通过程中，如何提高沟通的效率和改善沟通的效果？维持测试人员同开发团队中其他成员良好的人际关系的关键是什么？ 尽量面对面的沟通，其次是能直接通过电话沟通，如果只能通过Email等非及时沟通工具的话，强调必须对特性的理解深刻以及能表达清楚。 运用一些测试管理工具如TestDirector进行管理也是较有效的方法，同时要注意在TestDirector中对BUG有准确的描述。 在团队中建立测试人员与开发人员良好沟通中注意以下几点： 一真诚、二是团队精神、三是在专业上有共同语言、四是要对事不对人，工作至上 当然也可以通过直接指出一些小问题，而不是进入BUG Tracking System来增加对方的好感。 28、你对测试最大的兴趣在哪里？为什么？ 回答这个面试题，没有固定统一的答案，但可能是许多企业都会问到的。提供以下答案供考： 最大的兴趣，感觉这是一个有挑战性的工作； 测试是一个经验行业，工作越久越能感觉到做好测试的难度和乐趣 通过自己的工作，能使软件产品越来越完善，从中体会到乐趣 回答此类问题注意以下几个方面： 尽可能的切合招聘企业的技术路线来表达你的兴趣，例如该企业是数据库应用的企业，那么表示你的兴趣在数据库的测试，并且希望通过测试提升自己的数据库掌握能力。 表明你做测试的目的是为了提升能力，也是为了更好的做好测试；提升能力不是为了以后转开发或其他的，除非用人企业有这样的安排。 不要过多的表达你的兴趣在招聘企业的范畴这外。比如招聘企业是做财务软件的，可是你表现出来的是对游戏软件的兴趣；或招聘是做JAVA开发的，而你的兴趣是在C类语言程序的开发。 29、你自认为测试的优势在哪里？ 该面试也没有固定不变的答案，但可参考以下几点，并结合自身特点： 有韧性、有耐心、做事有条理性、喜欢面对挑战、有信心做好每一件事情、较强的沟通能力、从以前的经理处都得到了很好的评价表明我做的很好 33、简述你在以前的工作中做过哪些事情，比较熟悉什么。参考答案如下。 我过去的主要工作是系统测试和自动化测试。在系统测试中，主要是对BOSS系统的业务逻辑功能，以及软交换系统的Class 5特性进行测试。性能测试中，主要是进行的压力测试，在各个不同数量请求的情况下，获取系统响应时间以及系统资源消耗情况。自动化测试主要是通过自己写脚本以及一些第三方工具的结合来测试软交换的特性测试。 在测试中，我感觉对用户需求的完全准确的理解非常重要。另外，就是对BUG的管理，要以需求为依据，并不是所有BUG均需要修改。 测试工作需要耐心和细致，因为在新版本中，虽然多数原来发现的BUG得到了修复，但原来正确的功能也可能变得不正确。因此要注重迭代测试和回归测试。 34、在C/C++中static有什么用途？（请至少说明两种） 1)在函数体，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。 2) 在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。 3) 在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个函数被限制在声明它的模块的本地范围内使用 35、引用与指针有什么区别？ 1) 引用必须被初始化，指针不必。 2) 引用初始化以后不能被改变，指针可以改变所指的对象。 3) 不存在指向空值的引用，但是存在指向空值的指针。 36、Internet采用哪种网络协议？该协议的主要层次结构？Internet物理地址和IP地址转换采用什么协议？ TCP /IP协议主要层次结构为： 应用层/传输层/网络层/数链路层。 ARP (Address Resolution Protocol)（地据址解析协议） 37、说说你对集成测试中自顶向下集成和自底向上集成两个策略的理解，要谈出它们各自的优缺点和主要适应于哪种类型测试； 自顶向下集成 优点：较早地验证了主要控制和判断点；按深度优先可以首先实现和验证一个完整的软件功能；功能较早证实，带来信心；只需一个驱动，减少驱动器开发的费用；支持故障隔离。 缺点：柱的开发量大；底层验证被推迟；底层组件测试不充分。 适应于产品控制结构比较清晰和稳定；高层接口变化较小；底层接口未定义或经常可能被修改；产口控制组件具有较大的技术风险，需要尽早被验证；希望尽早能看到产品的系统功能行为。 2、自底向上集成 优点：对底层组件行为较早验证；工作最初可以并行集成，比自顶向下效率高；减少了桩的工作量；支持故障隔离。 缺点：驱动的开发工作量大；对高层的验证被推迟，设计上的错误不能被及时发现。 适应于底层接口比较稳定；高层接口变化比较频繁；底层组件较早被完成。 38、软件验收测试包括正式验收测试、alpha测试、beta测试三种测试。 39、系统测试的策略有很多种的，有性能测试、负载测试、强度测试、易用性测试、安全测试、配置测试、安装测试、文档测试、故障恢复测试、用户界面测试、恢复测试、分布测试、可用性测试。 40、设计系统测试计划需要参考的项目文档有软件测试计划、软件需求工件、和迭代计划 41．通过画因果图来写测试用例的步骤为 、 、 、 及把因果图转换为状态图共五个步骤。 利用因果图生成测试用例的基本步骤是： § 分析软件规格说明描述中，哪些是原因（即输入条件或输入条件的等价类），哪些是结果（即输出条件），并给每个原因和结果赋予一个标识符。 § 分析软件规格说明描述中的语义，找出原因与结果之间，原因与原因之间对应的是什么关系? 根据这些关系，画出因果图。 § 由于语法或环境限制，有些原因与原因之间，原因与结果之间的组合情况不可能出现。为表明这些特殊情况，在因果图上用一些记号标明约束或限制条件。 § 把因果图转换成判定表。 § 把判定表的每一列拿出来作为依据，设计测试用例。 43、请说出这些测试最好由那些人员完成，测试的是什么？ 代码、函数级测试一般由白盒测试人员完成，他们针对每段代码或函数进行正确性检验，检查其是否正确的实现了规定的功能。 模块、组件级测试主要依据是程序结构设计测试模块间的集成和调用关系，一般由测试人员完成。 系统测试在于模块测试与单元测试的基础上进行测试。了解系统功能与性能，根据测试用例进行全面的测试。 44、 设计测试用例时应该考虑哪些方面，即不同的测试用例针对那些方面进行测试？ 设计测试用例时需要注意的是，除了对整体流程及功能注意外，还要注意强度测试、性能测试、压力测试、边界值测试、稳定性测试、安全性测试等多方面。（测试用例需要考虑的四个基本要素是输入、输出、操作和测试环境；另外，测试用例需要考虑的是测试类型（功能、性能、安全……），这部分可以参照TP做答。此外，还需要考虑用例的重要性和优先级） 45、 在windows下保存一个文本文件时会弹出保存对话框，如果为文件名建立测试用例，等价类应该怎样划分？ 单字节，如A；双字节， AA 、我我；特殊字符 /‘。‘；、=-等；保留字，如com；文件格式为8.3格式的；文件名格式为非8.3格式的；/,\\,*等九个特殊字符。 46、假设有一个文本框要求输入10个字符的邮政编码，对于该文本框应该怎样划分等价类？ 特殊字符，如10个*或￥；英文字母，如ABCDefghik；小于十个字符，如123；大于十个字符，如11111111111；数字和其他混合，如123AAAAAAA；空字符；保留字符 47.软件测试项目从什么时候开始，？为什么？ 软件测试应该在需求分析阶段就介入,因为测试的对象不仅仅是程序编码,应该对软件开发过程中产生的所有产品都测试,并且软件缺陷存在放大趋势.缺陷发现的越晚,修复它所花费的成本就越大. 48、什么是回归测试? 回归测试: (regression testing): 回归测试有两类：用例回归和错误回归；用例回归是过一段时间以后再回头对以前使用过的用例在重新进行测试，看看会重新发现问题。错误回归，就是在新版本中，对以前版本中出现并修复的缺陷进行再次验证，并以缺陷为核心，对相关修改的部分进行测试的方法。 49.单元测试、集成测试、系统测试的侧重点是什么？ 单元测试针对的是软件设计的最小单元–程序模块（面向过程中是函数、过程；面向对象中是类。）,进行正确性检验的测试工作,在于发现每个程序模块内部可能存在的差错.一般有两个步骤:人工静态检查\\动态执行跟踪 集成测试针对的是通过了单元测试的各个模块所集成起来的组件进行检验,其主要内容是各个单元模块之间的接口,以及各个模块集成后所实现的功能. 系统测试针对的是集成好的软件系统，作为整个计算机系统的一个元素,与计算机硬件\\外设\\某些支持软件\\数据和人员等其他系统元素结合在一起,要在实际的运行环境中,对计算机系统进行一系列的集成测试和确认测试. 51.一个测试工程师应具备那些素质？ 1、责任心2、沟通能力3、团队合作精神4、耐心、细心、信心5、时时保持怀疑态度，并且有缺陷预防的意识6、具备一定的编程经验 53：你所了解的的软件测试类型都有哪些，简单介绍一下。 按测试策略分类：1、静态与动态测试2、黑盒与白盒测试 3、手工和自动测试 4、冒烟测试 5、回归测试； 按测试阶段分类：单元测试、集成测试、系统测试； 其他常见测试方法：1、功能测试 2、性能测试 3、压力测试 4、负载测试 5、易用性测试 6、安装测试 7、界面测试 8、配置测试 9、文档测试 10、兼容性测试 11、安全性测试 12、恢复测试 54：你认为做好测试计划工作的关键是什么？ 明确测试的目标，增强测试计划的实用性 编写软件测试计划得重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果直观、准确 坚持\"5W\"规则，明确内容与过程 \"5W\"规则指的是\"What（做什么）\"、\"Why（为什么做）\"、\"When（何时做）\"、\"Where（在哪里）\"、\"How（如何做）\"。利用\"5W\"规则创建软件测试计划，可以帮助测试团队理解测试的目的（Why），明确测试的范围和内容（What），确定测试的开始和结束日期（When），指出测试的方法和工具（How），给出测试文档和软件的存放位置（Where）。 采用评审和更新机制，保证测试计划满足实际需求 测试计划写作完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。 分别创建测试计划与测试详细规格、测试用例 应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行测试过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。 55：您认为做好测试用例设计工作的关键是什么？ 白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结果 黑盒法用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题 56：你的测试职业发展目标是什么？ 测试经验越多，测试能力越高。所以我的职业发展是需要时间累积的，一步步向着高级测试工程师奔去。而且我也有初步的职业规划，前3年累积测试经验，不断的更新自己改正自己，做好测试任务。 57：测试结束的标准是什么？ 从微观上来说，在测试计划中定义，比如系统在一定性能下平稳运行72小时，目前Bug Tracking System中，本版本中没有一般严重的BUG，普通BUG的数量在3以下，BUG修复率90%以上等等参数，然后由开发经理，测试经理，项目经理共同签字认同版本Release。 如果说宏观的，则是当这个软件彻底的消失以后，测试就结束了。 59、一套完整的测试应该由哪些阶段组成？ 可行性分析、需求分析、概要设计、详细设计、编码、单元测试、集成测试、系统测试、验收测试 61、您是否了解以往所工作的企业的软件开发过程？如果了解，请试述一个完整的开发过程需要完成哪些工作？分别由哪些不同的角色来完成这些工作？您在以往的测试工作中都曾经具体从事过哪些工作？其中最擅长哪部分工作？ 开发过程—需求调研（需求人员）、需求分析（需求人员）、概要设计（设计人员）、详细设计(设计人员)、编码（开发人员） 测试过程—需求评审、系统测试设计、概要设计评审、集成测试设计、详细设计评审、单元测试设计、测试执行 测试工作的整个过程都做过，擅长做测试设计 过程决定质量，软件的过程改进正是为了提高软件的质量，将过往的种种经验教训积累起来。 62、测试用例设计的原则是什么？目前主要的测试用例设计方法有哪些？ 代表性：能够代表并覆盖各种合理的和不合理、合法的和非法的、边界的和越界的、以及极限的输入数据、操作和环境设置等. 可判定性：即测试执行结果的正确性是可判定的，每一个测试用例都应有相应的期望结果. 可再现性：即对同样的测试用例，系统的执行结果应当是相同的。 方法有等价类、边界值、因果图、状态图、正交法、大纲法 63、面向对象的测试用例设计有几种方法？如何实现？ 给类中的每个构造函数设计一组测试用例 组合类中的类变量、实例变量 组合类中的各种方法 根据前置条件和后置条件设计测试用例 根据代码设计测试用例 64、LoadRunner分为哪三个模块？请简述各模块的主要功能。 Virtual User Generator：用于录制脚步 Mercury LoadRunner Controller：用于创建、运行和监控场景 Mercury LoadRunner Analysis：用于分析测试结果 65、你对测试最大的兴趣在哪里？为什么？ 最大的兴趣就是测试有难度，有挑战性！做测试越久越能感觉到做好测试有多难。曾经在无忧测试网上看到一篇文章，是关于如何做好一名测试工程师。一共罗列了11，12点，有部分是和人的性格有关，有部分需要后天的努力。但除了性格有关的1，2点我没有把握，其他点我都很有信心做好它。 刚开始进入测试行业时，对测试的认识是从无忧测试网上了解到的一些资料，当时是冲着做测试需要很多技能才能做的好，虽然入门容易，但做好很难，比开发更难，虽然当时我很想做开发（学校专业课我基本上不缺席，因为我喜欢我的专业），但看到测试比开发更难更有挑战性，想做好测试的意志就更坚定了。 我觉得做测试整个过程中有2点让我觉得很有难度（对我来说，有难度的东西我就非常感兴趣），第一是测试用例的设计，因为测试的精华就在测试用例的设计上了，要在版本出来之前，把用例写好，用什么测试方法写？（也就是测试计划或测试策略），如果你刚测试一个新任务时，你得花一定的时间去消化业务需求和技术基础，业务需求很好理解（多和产品经理和开发人员沟通就能达到目的），而技术基础可就没那么简单了，这需要你自觉的学习能力，比如说网站吧，最基本的技术知识你要知道网站内部是怎么运作的的，后台是怎么响应用户请求的？测试环境如何搭建？这些都需要最早的学好。至少在开始测试之前能做好基本的准备，可能会遇到什么难题？需求细节是不是没有确定好？这些问题都能在设计用例的时候发现。 第二是发现BUG的时候了，这应该是测试人员最基本的任务了，一般按测试用例开始测试就能发现大部分的bug，还有一部分bug需要测试的过程中更了解所测版本的情况获得更多信息，补充测试用例，测试出bug。还有如何发现bug？这就需要在测试用例有效的情况下，通过细心和耐心去发现bug了，每个用例都有可能发现bug，每个地方都有可能出错，所以测试过程中思维要清晰（测试过程数据流及结果都得看仔细了，bug都在里面发现的）。如何描述bug也很有讲究，bug在什么情况下会产生，如果条件变化一点点，就不会有这个bug，以哪些最少的操作步骤就能重现这个bug，这个bug产生的规律是什么？如果你够厉害的话，可以帮开发人员初步定位问题。 66、您所熟悉的软件测试类型都有哪些？请试着分别比较这些不同的测试类型的区别与联系（如功能测试、性能测试……） 测试类型有：功能测试，性能测试，界面测试。 功能测试在测试工作中占的比例最大，功能测试也叫黑盒测试。是把测试对象看作一个黑盒子。利用黑盒测试法进行动态测试时，需要测试软件产品的功能，不需测试软件产品的内部结构和处理过程。采用黑盒技术设计测试用例的方法有：等价类划分、边界值分析、错误推测、因果图和综合策略。 性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统各项性能指标的变化情况。压力测试是通过确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大服务级别的测试。 界面测试，界面是软件与用户交互的最直接的层，界面的好坏决定用户对软件的第一印象。而且设计良好的界面能够引导用户自己完成相应的操作，起到向导的作用。同时界面如同人的面孔，具有吸引用户的直接优势。设计合理的界面能给用户带来轻松愉悦的感受和成功的感觉，相反由于界面设计的失败，让用户有挫败感，再实用强大的功能都可能在用户的畏惧与放弃中付诸东流。 区别在于，功能测试关注产品的所有功能上，要考虑到每个细节功能，每个可能存在的功能问题。性能测试主要关注于产品整体的多用户并发下的稳定性和健壮性。界面测试更关注于用户体验上，用户使用该产品的时候是否易用，是否易懂，是否规范（快捷键之类的），是否美观（能否吸引用户的注意力），是否安全（尽量在前台避免用户无意输入无效的数据，当然考虑到体验性，不能太粗鲁的弹出警告）？做某个性能测试的时候，首先它可能是个功能点，首先要保证它的功能是没问题的，然后再考虑该功能点的性能测试 67、请试着比较一下黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别与联系。 黑盒测试：已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。 白盒测试：已知产品的内部工作过程，可以通过测试证明每种内部操作是否符合设计规格要求，所有内部成分是否以经过检查。 软件的黑盒测试意味着测试要在软件的接口处进行。这种方法是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试或数据驱动测试。黑盒测试主要是为了发现以下几类错误： 1、是否有不正确或遗漏的功能？2、在接口上，输入是否能正确的接受？能否输出正确的结果？3、是否有数据结构错误或外部信息（例如数据文件）访问错误？4、性能上是否能够满足要求？5、是否有初始化或终止性错误？ 软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一个打开的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试或逻辑驱动测试。白盒测试主要是想对程序模块进行如下检查： 1、对程序模块的所有独立的执行路径至少测试一遍。 2、对所有的逻辑判定，取\"真\"与取\"假\"的两种情况都能至少测一遍。 3、在循环的边界和运行的界限内执行循环体。 4、测试内部数据结构的有效性，等等。 单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。 单元测试是由程序员自己来完成，最终受益的也是程序员自己。可以这么说，程序员有责任编写功能代码，同时也就有责任为自己的代码编写单元测试。执行单元测试，就是为了证明这段代码的行为和我们期望的一致。 集成测试（也叫组装测试，联合测试）是单元测试的逻辑扩展。它的最简单的形式是：两个已经测试过的单元组合成一个组件，并且测试它们之间的接口。从这一层意义上讲，组件是指多个单元的集成聚合。在现实方案中，许多单元组合成组件，而这些组件又聚合成程序的更大部分。方法是测试片段的组合，并最终扩展进程，将您的模块与其他组的模块一起测试。最后，将构成进程的所有模块一起测试。 系统测试是将经过测试的子系统装配成一个完整系统来测试。它是检验系统是否确实能提供系统方案说明书中指定功能的有效方法。（常见的联调测试） 系统测试的目的是对最终软件系统进行全面的测试，确保最终软件系统满足产品需求并且遵循系统设计。 验收测试是部署软件之前的最后一个测试操作。验收测试的目的是确保软件准备就绪，并且可以让最终用户将其用于执行软件的既定功能和任务。 验收测试是向未来的用户表明系统能够像预定要求那样工作。经集成测试后，已经按照设计把所有的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是验收测试的任务，即软件的功能性能如同用户所合理期待的那样。 68、当开发人员说不是BUG时，你如何应付？ 开发人员说不是bug，有2种情况，一是需求没有确定，所以我可以这么做，这个时候可以找来产品经理进行确认，需不需要改动，3方商量确定好后再看要不要改。二是这种情况不可能发生，所以不需要修改，这个时候，我可以先尽可能的说出是BUG的依据是什么？如果被用户发现或出了问题，会有什么不良结果？程序员可能会给你很多理由，你可以对他的解释进行反驳。如果还是不行，那我可以给这个问题提出来,跟开发经理和测试经理进行确认,如果要修改就改,如果不要修改就不改。其实有些真的不是bug，我也只是建议的方式写进TD中，如果开发人员不修改也没有大问题。如果确定是bug的话，一定要坚持自己的立场，让问题得到最后的确认。 69、为什么要在一个团队中开展软件测试工作？ 因为没有经过测试的软件很难在发布之前知道该软件的质量，就好比ISO质量认证一样，测试同样也需要质量的保证，这个时候就需要在团队中开展软件测试的工作。在测试的过程发现软件中存在的问题，及时让开发人员得知并修改问题，在即将发布时，从测试报告中得出软件的质量情况。 71、一份测试计划应该包括哪些内容？ 背景、项目简介、目的、测试范围、测试策略、人员分工、资源要求、进度计划、参考文档、常用术语、提交文档、风险分析。 72、针对于软件的行业背景，你如何理解软件的业务？ 阅读用户手册了解软件的功能和操作流程；看一些业务的专业书籍补充业务知识；如果有用户实际的数据，可以拿实际的数据进行参考；参考以前的用例和BUG报告；在使用软件的过程中多思考；多与产品经理交流。 74、如何定位测试用例的作用？ 组织性：编写、组织性、功能覆盖、重复性、跟踪、测试确认 76、什么是兼容性测试？请举例说明如何利用兼容性测试列表进行测试。 主要验证软件产品在不同版本之间的兼容性。包括向下兼容和交错兼容，向下兼容是测试软件新版本保留它早期版本功能的情况，交错兼容是验证共同存在的两个相关但不相同的产品之间的兼容性。 77、对某软件进行测试，发现在WIN98上运行得很慢，怎么判别是该软件存在问题还是其软硬件运行环境存在问题？ 看软件的运行环境要求。如果符合要求则是程序存在问题，若不符合要求则是硬件系统存在问题 78、需求测试的注意事项有哪些？ 是否使用了公司的模板、文档内容是否符合规范、所有的需求是分级是否清析适当、所有的需求是否具有一致性、需求是否可行（即，该需求组合有解决方案）、需求可否用己知的约束来实现、需求是否足够（即，可以把它送到一个规范的开发组织，并有一个生产出所需要产品的合理的可能性）、所有的其它需求是交叉引用是否正确、用户描述是否清楚、是否用客户的语言来描述需求、每个需求描述是否清楚没有岐义，可以移交给一个独立的组去实现时也能理解、是否所有的需求都是可验证的、是否每条需求都具有独立性，即使发生了变化也不会影响其它需求、性能指标是否明确、非功能性需求是否得到充分表现、是否完整列出适用的标准或协议、标准和协议之间是否存在冲突 81、主键、外键的作用，索引的优点与不足? 答：主键：是表中的唯一标示键。作用：保证实体的完整性;加快数据库的操作速度;增加新的表记录时，数据库会自动检索新记录的主键值，不允许该值与其他表中记录的主键重复;数据库会按主键值的顺序显示记录，如果没有设定主键，则按输入的顺序显示记录。 外键：是主键的从属，表示了两个表之间的联系。作用：使用外键可以避免冗余。 索引的优点： 1、通过创建唯一性的索引，可以保证表中数据的唯一性; 2、加速数据的检索速度; 3、加快表与表之间的连接; 4、在使用分组与排序数据检索时，可以显著检索分组与排序的时间; 5、在查询的过程中使用优化隐藏器，提供系统性能。 缺点： 1、创建索引需要时间，且随着数据量的增加而增加; 2、索引需要占用物理空间; 3、当对表中数据进行修改时，索引也要动态维护，降低了数据的维护速度。 84、性能测试的流程? 1.测试需求分析2.测试计划制定与评审3.测试用例设计与开发4.测试执行与监控5.分析测试结果6.编写性能测试报告7.测试经验总结 88、简述bug的生命周期? 1， 有效地记录BUG 2， 使用BUG模板 3， 评价BUG优先级和严重性 4， BUG的生命 5， 维护BUG数据库 89、缺陷记录应包含的内容? 缺陷标识、缺陷类型、缺陷严重程度、缺陷产生可能性、缺陷优先级、缺陷状态、缺陷起源、缺陷来源、缺陷原因; 91 您所熟悉的软件测试类型都有哪些?请试着分别比较这些不同的测试类型的区别与联系(如功能测试、性能测试……) 易用性测试-界面的友好性，操作方便性等。 功能测试-系统中功能性需求的满足 安全性测试-系统是否存在安全隐患和漏洞 性能测试-系统在大并发下的响应速度和健壮性 93、您认为做好测试计划工作的关键是什么? 了解项目或系统的业务需求 和项目经理协调好，了解项目的进度计划安排情况 95您认为做好测试用例设计工作的关键是什么? 对业务和软件需求非常清楚，可以根据需求不同选择不同的测试用例设计 96、.您以往的工作中是否曾开展过测试用例的评审工作?如果有，请描述测试用例评审的过程和评审的内容。 评审计划->预审->评审; 评审内容主要是测试用例对软件需求的覆盖程度，对于相关边界是否考虑，是否针对复杂流程准备多套测试数据，是否有专门针对非功能性需求的测试。 98.您认为性能测试工作的目的是什么?做好性能测试工作的关键是什么? 关键是测试脚本的录制，测试时候测试环境的干净。 100、.您以往所从事的软件测试工作中，是否使用了一些工具来进行软件缺陷(Bug)的管理?如果有，请结合该工具描述软件缺陷(Bug)跟踪管理的流程。 CQ ，也可以使用BugFree等免费工具。 101、.您如何看待软件过程改进?在您曾经工作过的企业中，是否有一些需要改进的东西呢?您期望的理想的测试人员的工作环境是怎样的?","tags":"SoftwareTesting","url":"articles/review-questions/"},{"title":"vuejs中使用的一些重要技巧","text":"style中配置 background-color , background-image 变量 代码如下 <v-btn color= \"primary\" fab dark class= \"checkbtn\" :style= \"{ marginTop: '8%', height: '240px', width: '240px', backgroundColor: backgroundcolor, backgroundRepeat: 'no-repeat', backgroundPosition: 'center', backgroundSize: '180px auto', backgroundImage: 'url(' + backgroundimage + ')'}\" @ click.native= \"submitCheckin\" :disabled= \"AlreadyCheckin\" > {{ checkinContent }} </v-btn> export default { name: 'CheckingIn', data () { return { checkinContent: '', AlreadyCheckin: false, backgroundcolor: 'green', backgroundimage: require('../assets/img/finger.png'), checkinNote: '' } }, foreach 获得 index [].foreach((item,index)=>{ }) 同vue的for循环一致,比如下面的 <template v-for= \"(task,index) in tasks\" > </template>","tags":"JavaScript","url":"articles/vuejs-best-tips/"},{"title":"[面试] 2. 有关list及其方法的使用","text":"解决的问题(Python/Java的list对比学习) 排序 java采用的是 Collections 包中的两个方法: Collections.sort(list) 更复杂点可以是Collection.sort(list, new Comparator<Person>() {}) Collections.reverse(list) or list.sort(Collections.reverseOrder()) python没有array,只有list,直接使用 sort 方法即可,如果是倒序可以用reverse=True指定","tags":"Java","url":"articles/2-list-methods/"},{"title":"安装dbforge SQL 8.0","text":"安装dbforge Mysql 安装最新的dbforge Mysql: https://www.devart.com/dbforge/mysql/studio/dbforgemysql80ent.exe ,总是弹出一个错误 Application requires .NET Framework 4.5.2 or higher. currently installed version is 4.5.1 or less. . 于是我就直接到官方下载最新的. NET Frameowrk 安装,但是安装总是失败. 实在没办法看到一个论坛说的说明方法如何卸载. NET Framework 然后安装对应的版本: https://answers.microsoft.com/en-us/windows/forum/all/unable-to-install-net-framework-40-or-45-on-the/6727320a-01a3-4619-a5f2-2a684c320904 . A: Step 1: Hope your ran the same Fixit, if not then run this Microsoft Fix it 50123 Step 2: Repair the version of the . NET Framework that did not update. To do this, follow these steps: Visit the following blog post: . NET Framework Cleanup Tool User's Guide Download dotnetfx_cleanup_tool.zip from the following site: http://blogs.msdn.com/cfs-file.ashx/__key/CommunityServer-Components-PostAttachments/00-08-90-44-93/dotnetfx_5F00_cleanup_5F00_tool.zip When you are prompted, click Open, and then click Extract Now. In the files that you extracted, double-click cleanup_tool.exe. If you are prompted for an administrator password or for a confirmation, provide the password, and then clickContinue. In the Do you want to run the . NET Framework Setup Cleanup Utility? message, click Yes. Image Note This tool may be in English only, but it also works for other language versions of Windows. Click Yes to accept the license agreement. In the Product to cleanup window, click the drop-down list, select a . NET Framework version that you want to remove, and then click Cleanup Now. Image Note The cleanup tool does not let you remove the . NET Framework 2.0 in Windows Vista or later versions of Windows because the . NET Framework is installed as an operating system component. After the . NET Framework is removed, restart the computer. Download and install the following components: . NET Framework 1.1 Microsoft . NET Framework Version 1.1 Redistributable Package . NET Framework 1.1 Service Pack 1 ( SP1 ) Microsoft . NET Framework 1.1 Service Pack 1 . NET Framework 3.5 SP1 (this will also install the . NET Framework 2.0 SP2 and the . NET Framework 3.0 SP2 ) Microsoft . NET Framework 3.5 Service Pack 1 Restart the computer. Visit Windows Update again, and then check for and install updates.","tags":"SQL","url":"articles/install-dbforgesql/"},{"title":"[环境搭建] tensorflow的基础学习","text":"tensorflow 安装 这里参考的是官方的文档: Installing TensorFlow on Raspbian source 安装编译 $ sudo apt-get install - git $ sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel $ git clone https://github.com/tensorflow/tensorflow $ cd tensorflow $ git checkout master 未完待续 python pip安装 Python,pip环境的搭建这里就不罗嗦了,可以参考我的另外一篇博客: python3安装 新建一个virtual environment(推荐使用 pipenv )用于存放对应的pip的包,执行如下命令: $ sudo mkdir venvBigData $ cd venBigData $ sudo apt install - y libatlas - base - dev # 安装numpy需要依赖的包 $ export PIPENV_VENV_IN_PROJECT = 1 $ pipenv shell $ pipenv install tensorflow $ python # 接下来是命令行验证tensorflow安装正确与否 $ import tensorflow as tf hello = tf . constant ( 'Hello, TensorFlow!' ) sess = tf . Session () print ( sess . run ( hello ))","tags":"Python","url":"articles/tensorflow-basic/"},{"title":"[环境搭建] MYSQL 的安装配置","text":"安装 执行如下命令进行安装和基本的配置: $ sudo apt-get -y install mysql-server $ sudo mysql_secure_installation 第二条命令将会配置mysql的 root 密码,删除掉 test 数据库,不允许匿名登录等等操作. 按照上面的操作mysql的配置是没有问题的了,但是你会发现,如果你运行如下命令: mysql -u root -p , 这里的root不用输入密码,明明上面的已经设置了密码??? 进行如下的命令进行配置: $ sudo mysql -u root -p $ use mysql ; $ update user set plugin = 'mysql_native_password' where user = 'root' ; $ flush privileges ; $ quit ; 配置 root 密码的更改,可以采用下面的操作步骤: $ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf 增加一行代码: skip-grant-tables 参见 https://www.jb51.net/article/100925.htm $ sudo mysql -u root -p $ use mysql ; $ UPDATE mysql.user SET Password = PASSWORD ( 'YanZhi123!@#)0x&*' ) where USER = 'root' ; $ flush privileges ; 增加用户名和授权远程登录: $ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf 注释掉 bind-address = 127 .0.0.1 $ sudo mysql -u root -p $ use mysql ; $ CREATE USER 'yanzhi' @ '%' IDENTIFIED BY 'yanzhi123!@#' ; $ GRANT ALL PRIVILEGES ON *.* TO 'yanzhi' @ '%' IDENTIFIED BY 'yanzhi123!@#' ; -- 远程连接权限所有的数据库. $ flush privileges ; 创建数据库,支持中文: UTF8 : CREATE DATABASE test2 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci 自动备份数据库,每天备份一次 * 新建文件: sudo nano /usr/sbin/mysqlbackup.sh ,内容如下: 1 2 3 4 5 6 7 8 9 #!/bin/bash # Name:mysql_backup.sh # This is a ShellScript For Auto DB Backup and Delete old Backup # backupdir = /www/backups time = ` date +%Y-%m-%d_%H%M%S ` /usr/bin/mysqldump --routines -u 'test' -p 'test!@#' pingbook | gzip > $backupdir /yanzhi $time .sql.gz # 删除七天前的备份 find $backupdir -name \"*.sql.gz\" -type f -mtime +7 -exec rm {} \\ > /dev/null 2 > & 1 添加可执行权限对应sh文件. $ sudo chmod +x /usr/sbin/mysqlbackup.sh 增加定时任务在 sudo nano /etc/crontab #创建一个mysql备份的操作 2 1 * * * root /usr/sbin/mysqlbackup.sh >> /var/log/crontab/backup.log 2>&1 重启 crontab 以便生效 sudo systemctl restart cron.service mysql startup error https://blog.csdn.net/mr_raptor/article/details/70576117 [ ERROR ] Can't init tc log innodb_empty_free_list_algorithm has been changed to legacy because of small buffer pool size. In order to use backoff, increase buffer pool at least up to 20MB . 解决方法是删除mysql的log文件,因为磁盘满了不能写log了: $ cd /var/lib/mysql $ rm -f ib_logfile* $ rm -f tc.log","tags":"树莓派","url":"articles/pi-mysql/"},{"title":"[环境搭建] 如何完整卸载python2/3 在debain上","text":"卸载 remove python3 $ sudo apt-get remove 'python3.*' 其实这里的python的包是: ` python3.5-minimal ` , ` python3.5-venv ` 安装 install python3.7 因为默认的debian仓库里面是python3.5,所以如果需要安装最新的python,按照如下步骤进行安装, 参考文档: https://unix.stackexchange.com/questions/332641/how-to-install-python-3-6 需要用到的命令如下: 安装依赖包 $ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\ libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\ xz-utils tk-dev libffi-dev $ sudo wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz $ tar xvf Python-3.7.0.tgz // 下面的步骤安装会跑测试来判定机器的性能,从而进行性能的提高 $ ./configure --enable-optimizations --with-ensurepip=install $ make -j8 $ sudo make altinstall $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 50 $ sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 50 安装pip,pipenv并设置全局可用命令 pipenv $ wget https://bootstrap.pypa.io/get-pip.py $ sudo python get-pip.py $ pip install --user pipenv /home/pi/.local/bin $ python -m site --user-base $ sudo nano ~/.profile export PATH = \" $HOME /.local/bin: $PATH \" $ sudo source ~/.profile $ pipenv --update uwsgi 配置详解 问题是我们的服务器后台部署在uwsgi上,今天突然有很大量的用户访问,结果导致了发到 uwsgi 的所有请求都是 Pending 的状态. 概念 emperor翻译为中文的意思其实就是皇帝的意思，那么既然有皇帝，那就肯定有\"臣子\"（vassals），其中\"臣子\"就是指实际运行的一个app实例，在这里就是uwsgi_test.ini配置文件了。 emperor模式开启的命令是： sudo uwsgi –emperor /path/to/vassals/ 其中，vassals文件夹里包含了各个app的配置文件，这个文件夹将会被emperor一直监视，只要有配置文件的修改或新建，app实例就会被重新加载或新建，可以通过软链接将实际项目中的配置文件链接到vassal文件夹目录下. 在文档中，emperor监视的是配置文件目录，但是问题来了，笔者希望每次Git仓库更新一次就重新启动实例，而如果这次更新并没有对配置文件进行修改，实例自然就不会重新启动了。 uwsgi是用c语言写的一个webserver，可以启动多个进程，进程里面可以启动多个线程来服务。进程分为主进程和worker进程，worker里面可以有多个线程。","tags":"树莓派","url":"articles/pi-python3/"},{"title":"[环境搭建] 大数据hadoop,spark,hbase,hive概念","text":"Hadoop、Spark、HBase、Hive 到处都在谈论大数据,感觉自己再不去学习这些最新的技术,自己就要被淘汰了.好吧我也开始学习了. AI = ML + BigData 关键字 hadoop spark hbase hive hdfs hadoop 安装 参考博客: https://www.cnblogs.com/jing1996/p/8038219.html $ sudo wget http://mirrors.shu.edu.cn/apache/hadoop/common/hadoop-3.0.3/hadoop-3.0.3.tar.gz $ tar zxvf hadoop-3.0.3.tar.gz $ cd hadoop-3.0.3/etc/hadoop $ sudo nano hadoop-env.sh 修改其中的 JAVA_HOME路径指向对应的JAVA_HOME路径 $ sudo nano core-site.xml <configuration> <property> <name> fs.defaultFS </name> <value> hdfs://localhost:9000 </value> </property> <property> <name> hadoop.tmp.dir </name> <value> /home/pi/hadoop-3.0.3/tmp </value> <description> namenode上本地的hadoop临时文件夹 </description> </property> </configuration> $ sudo nano hdfs-site.xml <configuration> <property> <name> dfs.replication </name> <value> 1 </value> </property> <property> <name> dfs.namenode.name.dir </name> <value> /home/pi/hadoop-3.0.3/dfs/name </value> <description> namenode上存储hdfs名字空间元数据 </description> </property> <property> <name> dfs.datanode.data.dir </name> <value> /home/pi/hadoop-3.0.3/hdfs/data </value> <description> datanode上数据块的物理存储位置 </description> </property> </configuration> $ sudo nano mapred-site.xml <configuration> <property> <name> mapreduce.framework.name </name> <value> yarn </value> </property> </configuration> $ sudo nano yarn-site.xml <configuration> <property> <name> yarn.nodemanager.aux-services </name> <value> mapreduce_shuffle </value> </property> </configuration> # 配置对应的环境变量 $ sudo nano /etc/profile # 配置hadoop的环境变量 export HADOOP_HOME=/home/pi/hadoop-3.0.3 EXPORT PATH= $PATH : $JAVA_HOME /bin: ${ HADOOP_HOME } /bin: ${ HADOOP_HOME } /sbin: $PATH $ sudo source /etc/profile $ sudo chown -R pi /home/pi/hadoop-3.0.3 修改权限 $ chown -R pi /home/pi/hadoop-3.0.3 基本概念 pass","tags":"Java","url":"articles/hadoop-spark-hbase-hive/"},{"title":"[树莓派] 树莓派国内镜像","text":"前因 自己在Github Page搭建了一个博客,但是不能被百度收录.也就是百度搜索不能爬取网站的内容,也就不能被国内搜索到了. 为树莓派更换国内镜像源 (2018-07-07更新: 清华的镜像源已经不能使用: Cannot initiate the connection to mirrors.tuna.tsinghua.edu.cn:80) 可用的官方镜像源: http://www.raspbian.org/RaspbianMirrors 使用管理员权限（经由sudo），编辑/etc/apt/sources.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list 用#注释掉原文件内容，用以下内容取代使用上海大学或者是中科大(https://mirrors.ustc.edu.cn/archive.raspberrypi.org/)的镜像： deb https://mirrors.shu.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi deb-src https://mirrors.shu.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi 使用管理员权限（经由sudo），编辑/etc/apt/sources.list.d/raspi.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list.d/raspi.list 用#注释掉原文件内容，用以下内容取代： deb https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui deb-src https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui 注意： 网址末尾的raspbian重复两次是必须的。因为Raspbian的仓库中除了APT软件源还包含其他代码。APT软件源不在仓库的根目录，而在raspbian/子目录下。 编辑镜像站后，请使用 sudo apt update && sudo apt upgrade -y 命令，更新软件源列表，同时检查您的编辑是否正确。 使用HTTPS可以有效避免国内运营商的缓存劫持，但需要事先安装 apt-transport-https .","tags":"树莓派","url":"articles/pi-mirrors/"},{"title":"[环境搭建] Debian安装编译和安装nginx服务器","text":"Debian安装配置nginx服务器 下载解压缩安装包 $ sudo wget https://nginx.org/download/nginx-1.15.1.tar.gz $ tar zxvf nginx-1.15.1.tar.gz 重新配置nginx的服务器名称servername和对应版本 $ cd nginx-1.15.1/ $ sudo nano src/http/ngx_http_header_filter_module.c $ sudo nano src/core/nginx.h $ sudo nano nginx-1.15.1-openbook.top.tar.gz nginx-1.15.1/ 安装对应的nginx的所有依赖的包, gcc环境, pcre, zlib and openssl $ sudo apt install build-essential -y $ wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz $ tar zxvf pcre-8.41.tar.gz $ wget http://www.zlib.net/zlib-1.2.11.tar.gz $ tar -zxvf zlib-1.2.11.tar.gz $ wget https://www.openssl.org/source/openssl-1.1.0g.tar.gz $ tar zxvf openssl-1.1.0g.tar.gz $ cd openssl-1.1.0g $ ./config -Wl,--enable-new-dtags,-rpath, '$(LIBRPATH)' $ make # 大约五六分钟左右 $ sudo make install $ openssl version -a 安装nginx 参考说明文档: https://www.vultr.com/docs/how-to-compile-nginx-from-source-on-ubuntu-16-04 $ cd nginx-1.15.1 $ ./configure --prefix = /usr/local/nginx \\ --sbin-path = /usr/sbin/nginx \\ --modules-path = /usr/lib/nginx/modules \\ --conf-path = /etc/nginx/nginx.conf \\ --error-log-path = /var/log/nginx/error.log \\ --http-log-path = /var/log/nginx/access.log \\ --pid-path = /run/nginx.pid \\ --lock-path = /var/lock/nginx.lock \\ --user = www-data \\ --group = www-data \\ --http-client-body-temp-path = /var/lib/nginx/body \\ --http-fastcgi-temp-path = /var/lib/nginx/fastcgi \\ --http-proxy-temp-path = /var/lib/nginx/proxy \\ --http-scgi-temp-path = /var/lib/nginx/scgi \\ --http-uwsgi-temp-path = /var/lib/nginx/uwsgi \\ --with-openssl = ../openssl-1.1.0g \\ --with-openssl-opt = enable-ec_nistp_64_gcc_128 \\ --with-openssl-opt = no-nextprotoneg \\ --with-openssl-opt = no-weak-ssl-ciphers \\ --with-openssl-opt = no-ssl3 \\ --with-pcre = ../pcre-8.41 \\ --with-pcre-jit \\ --with-zlib = ../zlib-1.2.11 \\ --with-compat \\ --with-file-aio \\ --with-threads \\ --with-http_addition_module \\ --with-http_auth_request_module \\ --with-http_dav_module \\ --with-http_flv_module \\ --with-http_gunzip_module \\ --with-http_gzip_static_module \\ --with-http_mp4_module \\ --with-http_random_index_module \\ --with-http_realip_module \\ --with-http_slice_module \\ --with-http_ssl_module \\ --with-http_sub_module \\ --with-http_stub_status_module \\ --with-http_v2_module \\ --with-http_secure_link_module \\ --with-mail \\ --with-mail_ssl_module \\ --with-stream \\ --with-stream_realip_module \\ --with-stream_ssl_module \\ --with-stream_ssl_preread_module \\ --with-debug \\ --with-cc-opt = '-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' \\ --with-ld-opt = '-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now' $ make #这个操作需要花费十分钟左右 $ sudo make install $ sudo systemctl start nginx.service && sudo systemctl enable nginx.service 遇到的问题 nginx: [emerg] mkdir() \"/var/lib/nginx/body\" failed Just create directory $ sudo mkdir -p /var/lib/nginx && sudo nginx -t $ sudo nano /lib/systemd/system/nginx.service 输入如下内容 # Stop dance for nginx # ======================= # # ExecStop sends SIGSTOP (graceful stop) to the nginx process. # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control # and sends SIGTERM (fast shutdown) to the main process. # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends # SIGKILL to all the remaining processes in the process group (KillMode=mixed). # # nginx signals reference doc: # http://nginx.org/en/docs/control.html # [Unit] Description=A high performance web server and a reverse proxy server Documentation=man:nginx(8) After=network.target [Service] Type=forking PIDFile=/run/nginx.pid ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;' ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;' ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid TimeoutStopSec=5 KillMode=mixed [Install] WantedBy=multi-user.target 重启nginx服务 sudo systemctl start nginx.service && sudo systemctl enable nginx.service check nginx service is up $ sudo systemctl status nginx.service $ ps aux | grep nginx $ curl -I 127 .0.0.1 重启nginx出现 Directory index of \"/www/pingbook.top/pingbook.top/output/\" is forbidden, 解决方法是在location里面设置index index.html,如下: location / { # 使用alias时，目录名后面一定要加\"/\" alias /www/pingbook.top/pingbook.top/output/; index index.html; try_files $uri $uri/ index.html last; } Https 加密你的网站 参考文档: https://certbot.eff.org/lets-encrypt/debianother-nginx $ sudo wget https://dl.eff.org/certbot-auto $ sudo chmod a+x certbot-auto $ # 获取证书 $ sudo ./certbot-auto certonly --standalone --email alterhu2020@gmail.com -d pingbook.top -d www.pingbook.top 报错如下,很多的依赖没有安装成功: dpkg: error processing package python-zope.component ( --configure ) : dependency problems - leaving unconfigured Setting up libaugeas0 ( 1 .8.0-1+deb9u1 ) ... dpkg: dependency problems prevent configuration of python-mock: python-mock depends on python-funcsigs ( > = 1 ) ; however: Package python-funcsigs is not configured yet. python-mock depends on python-pbr ( > = 1 .3 ) ; however: Package python-pbr is not configured yet. python-mock depends on python-six ( > = 1 .9 ) ; however: Package python-six is not configured yet. dpkg: error processing package python-mock ( --configure ) : dependency problems - leaving unconfigured dpkg: dependency problems prevent configuration of python-requests: python-requests depends on python-urllib3 ( > = 1 .19.1 ) ; however: Package python-urllib3 is not configured yet. python-requests depends on python-chardet ; however: Package python-chardet is not configured yet. python-requests depends on python-urllib3 ( << 1.1 9 .2 ) ; however: Package python-urllib3 is not configured yet. dpkg: error processing package python-requests ( --configure ) : dependency problems - leaving unconfigured dpkg: dependency problems prevent configuration of certbot: certbot depends on python-certbot (= 0 .10.2-1 ) ; however: Package python-certbot is not configured yet. dpkg: error processing package certbot ( --configure ) : dependency problems - leaving unconfigured Processing triggers for libc-bin ( 2 .24-11+deb9u3 ) ... Errors were encountered while processing: python-dnspython python-idna python-parsedatetime python-pyasn1 python-tz python-pkg-resources python-configargparse python-six python-zope.interface python-psutil python-pbr python-enum34 python-cryptography python-virtualenv python-funcsigs python-zope.hookable python-ipaddress python-pyicu python-zope.event python-rfc3339 python-setuptools python-urllib3 python-configobj python-chardet python-acme python-openssl python-certbot python-zope.component python-mock python-requests certbot Sub-process /usr/bin/dpkg returned an error code (1) $ cd /var/cache/apt/ $ cd archives/ $ sudo rm -rf * 所以我想起以前用的一个网友的脚本,不用安装一堆繁杂的包,地址: https://github.com/xdtianyu/scripts/blob/master/lets-encrypt/ README - CN .md \" 1. 在nginx的配置文件里面配置location: \"` # https 配置Let's Encrypt location &#94;~ /.well-known/acme-challenge/ { allow all; default_type \"text/plain\"; root /www; } $ sudo wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.conf $ sudo wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.sh $ sudo chmod +x letsencrypt.sh $ sudo nano letsencrypt.conf $ sudo ./letsencrypt.sh letsencrypt.conf ### 删除已经安装的nginx sudo apt update && sudo apt upgrade -y # update all package index sudo apt-get purge nginx nginx-common # Removes everything. nginx 采用的C语言编写的,需要对应的C编译器( GCC ): sudo apt install build-essential -y \" `","tags":"树莓派","url":"articles/pi-nginx/"},{"title":"[环境搭建] Debian如何安装配置Tomcat9","text":"安装 参考文档: https://www.howtoforge.com/tutorial/ubuntu-apache-tomcat/ 推荐: https://gist.github.com/jniltinho/a7bd30288342a5d352e6#file-install_tomcat-sh-L33 安装JDK和配置环境变量(采用下面的配置环境变量/etc/profile), 注意截止到20180709, oracle没有提供debain的32位系统安装tar包,所以这里使用的是32位的jdk1.8 $ nano ~/.bashrc export JAVA_HOME = /usr/lib/jvm/jdk-8-oracle-arm32-vfp-hflt export PATH = $JAVA_HOME /bin: $PATH $ source ~/.bashrc $ echo $JAVA_HOME 添加组和用户 $ sudo groupadd tomcat $ sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat 下载tomcat9 $ tar zxvf jdk1.8.0_171.tar.gz $ sudo nano /etc/profile JAVA_HOME = /home/pi/jdk1.8.0_171 CLASSPATH = $JAVA_HOME /lib/ PATH = $PATH : $JAVA_HOME /bin export PATH JAVA_HOME CLASSPATH $ source /etc/profile $ java 可能下载的是64位的jdk,但是系统只能运行32位的jdk /bin/javac: cannot execute binary file: Exec format error $ cd /home/pi $ sudo wget http://apache.cs.utah.edu/tomcat/tomcat-9/v9.0.10/bin/apache-tomcat-9.0.10.tar.gz $ tar zxvf apache-tomcat-9.0.10.tar.gz $ cd /home/pi/apache-tomcat-9.0.10/ $ sudo groupadd tomcat $ sudo useradd -M -s /bin/nologin -g tomcat -d /home/pi/apache-tomcat-9.0.10 tomcat $ sudo chgrp -R tomcat conf $ sudo chmod g+rwx conf $ sudo chmod g+r conf/* $ sudo chown -R tomcat webapps/ work/ temp/ logs/ $ sudo chown -R tomcat:tomcat * $ sudo chown -R tomcat:tomcat /home/pi/apache-tomcat-9.0.10 $ sudo chmod -R 757 conf/ $ sudo chmod -R 757 logs/ $ sudo chmod -R 757 webapps/ 配置 tomcat开机启动 $ sudo nano /etc/systemd/system/tomcat.service # Systemd unit file for tomcat [ Unit ] Description = Apache Tomcat Web Application Container After = syslog.target network.target [ Service ] Type = forking Environment = JAVA_HOME = /home/pi/jdk1.8.0_171 Environment = CATALINA_PID = /home/pi/apache-tomcat-9.0.10/temp/tomcat.pid Environment = CATALINA_HOME = /home/pi/apache-tomcat-9.0.10 Environment = CATALINA_BASE = /home/pi/apache-tomcat-9.0.10 Environment = 'CATALINA_OPTS=-Xms512M -Xmx824M -server -XX:+UseParallelGC' Environment = 'JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom' ExecStart = /home/pi/apache-tomcat-9.0.10/bin/startup.sh ExecStop = /bin/kill -15 $MAINPID User = tomcat Group = tomcat [ Install ] WantedBy = multi-user.target $ sudo systemctl daemon-reload $ sudo systemctl start tomcat $ sudo systemctl enable tomcat Configure Apache Tomcat User $ cd /home/pi/apache-tomcat-9.0.10/conf/ $ sudo nano tomcat-users.xml <role rolename = \"manager-gui\" /> <user username = \"admin\" password = \"admin\" roles = \"manager-gui,admin-gui\" /> $ cd webapps/manager/META-INF/ $ sudo nano context.xml comment: <!-- <Valve className = \"org.apache.catalina.valves.RemoteAddrValve\" allow = \"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /> --> $cd webapps/host-manager/META-INF/ #sudo nano context.xml comment: <!-- <Valve className = \"org.apache.catalina.valves.RemoteAddrValve\" allow = \"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /> --> $ sudo systemctl restart tomcat.service","tags":"树莓派","url":"articles/pi-tomcat/"},{"title":"[环境搭建]  svn 安装配置","text":"SVN 安装 执行如下命令进行安装: $ sudo apt-get -y install subversion 启动 svn 服务: d代表的是daemon 进程 $ svnserve -d $ ps aux | grep svnserve 若出现如下内容： wkr 6537 0.0 0.0 13784 956 ? Ss 16:18 0:00 svnserve -d wkr 7593 0.0 0.0 5784 864 pts/0 S+ 21:57 0:00 grep –color=auto svnserve 表示服务已开启。（注意：一定要有第1行，只有第2行说明服务未启动） 关闭 svn 服务: $ killall svnserve 重启 svn 服务: $ svnserve -d -r /srv 新建一个仓库: $ sudo adduser --system --home /srv/svn --disabled-password --disabled-login --group svn $ sudo svnadmin create /srv/svn $ sudo chown -R svn:svn /srv/svn change user, change group 改变文件对应的用户和用户组 修改仓库配置文件 编辑配置文件: svnserve.conf $ sudo nano /srv/svn/conf/svnserve.conf [ general ] anon-access = none auth-access = write authz-db = authz 修改帐户文件 nano /srv/svn/conf/passwd 和 sudo nano /srv/svn/conf/authz , 此处忽略. 配置svn开机自动启动 新建一个svnserve配置文件在 /et/default/svnserve 文件,内容如下: # svnserve options DAEMON_ARGS=\"--daemon --pid-file /run/svnserve/svnserve.pid --root /srv/svn --log-file /var/log/svn/svnserve.log\" 注意 新建log文件,这些是 /etc/default/svnserve 中的文件的配置涉及的几个文件,如果执行 sudo systemctl restart svnserve.service 失败,会自动删除文件夹 /run/svnserve $ sudo mkdir /run/svnserve $ sudo chown -R svn:svn /run/svnserve/ $ sudo chmod -R 777 /run/svnserve/ $ sudo mkdir /var/log/svn $ sudo chown -R svn:svn /var/log/svn/ $ sudo chmod -R 777 /var/log/svn/ 新建service启动服务文件 $ sudo nano /etc/systemd/system/svnserve.service [ Unit ] Description = Subversion protocol daemon After = syslog.target network.target [ Service ] Type = forking RuntimeDirectory = svnserve PIDFile = /run/svnserve/svnserve.pid EnvironmentFile = /etc/default/svnserve ExecStart = /usr/bin/svnserve $DAEMON_ARGS User = svn Group = svn KillMode = control-group Restart = on-failure [ Install ] WantedBy = multi-user.target 重启机器后出现这个错误:(原因是上面的第一个操作我没有做,就是没有创建一个文件 /etc/default/svnserve ,或者其中涉及到的文件 /var/log/svn , /run/svnserve 没有新建,或者没有配置可写权限对于用户 svn ) pi @ pingbook :~$ systemctl status svnserve . service ● svnserve . service - Subversion protocol daemon Loaded : loaded (/ etc / systemd / system / svnserve . service ; enabled ; vendor preset : enabled ) Active : failed ( Result : resources ) since Sun 2018-07-08 20 : 06 : 56 CST ; 28s ago 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Failed to start Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Unit entered failed state . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Failed with result 'resources' . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Service hold-off time over , scheduling restart . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Stopped Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Start request repeated too quickly . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Failed to start Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Unit entered failed state . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Failed with result 'resources' . checkout一份代码到nginx服务器,保持web同步,注意checkout的目录用户要是svn的用户和组,这样hook才能有权限读写 $ sudo svn co svn://localhost/svn /www/pingbook.top --username \"hr\" $ cd /www/pingbook.top $ sudo chown -R svn:svn * $ sudo chown -R svn:svn /www/pingbook.top $ sudo chmod -R 757 /www/pingbook.top $ sudo chmod -R 757 /www/pingbook.top/.svn # 配置svn数据仓库 $ sudo svn cleanup 如果commit的时候发现 hook 的 post-commit 总是报错: post-commit hook failed (exit code 255) with no output ,需要检查对应的文件的读写权限. 1. 检查对应的 post-commit 的用户组是 svn ,对应的文件有执行权限: sudo chmod g+e /srv/svn/hook/post-commit","tags":"树莓派","url":"articles/pi-svn/"},{"title":"[环境搭建] 配置采用NAT123进行树莓派部署","text":"安装步骤 2018-07-09 更新,下面的方法如果安装失败,尝试官方的安装指南: http://www.mono-project.com/download/stable/#download-lin-raspbian 1. 下载对应的linux版本的nat123安装包: http://www.nat123.com/Pages_2_32.jsp 2. 解压缩到一个目录里面: tar zxvf nat123linux20180627.tar.gz ~~3. 安装 sudo apt-get install -y mono-complete ,如果安装失败,请参见另外的一篇文章设置对应的国内镜像: https://pingbook.top/articles/pi-mirrors/ ~~ 4. 上面的 momo-complete 的安装需要一段时间,大约十分钟左右.~~ $ mono /home/pi/nat123/nat123linux.sh service & 采用如下方式进行安装 mono-complete 参考地址: http://www.mono-project.com/download/stable/#download-lin-raspbian $ sudo apt install apt-transport-https dirmngr $ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF $ echo \"deb https://download.mono-project.com/repo/debian stable-raspbianstretch main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list $ sudo apt update $ sudo apt install mono-complete","tags":"树莓派","url":"articles/pi-nat123/"},{"title":"[树莓派] 树莓派3B安装","text":"树莓派安装 因为感觉空间越来越小了,不能使用现在的需要了,所以决定重新安装系统. 安装完成后，TF卡被分成两个分区： 67MB vfat格式的引导分区（系统启动后被挂载在/boot目录） TF卡剩余空间 ext4格式的磁盘分区 由于Windows下不识别ext4格式的磁盘，在资源管理器中查看TF卡只显示一个67MB大小、名字为boot的盘符。 若想恢复TF卡整个空间为windows可识别的fat32/exfat格式，需要使用低级格式化工具HDD Low Level Format Tool（windows磁盘管理器无法处理ext4格式磁盘）。 安装版本为lite版本 在没有显示屏网线的情况下可以通过如下方式进行远程操作. 1. 下载镜像 2. 新建一个空文件没有后缀名: ssh, 然后放到 /boot 文件夹里面. 这两个文件在启动的时候会自动复制到指定的目录里面. 3. 新建一个文件 wpa_supplicant.conf ,输入以下的内容,按照你的环境进行配置对应的wifi名称和密码: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=CN network={ ssid=\"MiniWifi\" psk=\"L0ngh)171130AVb\" key_mgmt=WPA-PSK } network={ ssid=\"GDS-GUEST\" psk=\"Gr33nD0t!\" } 安装完成后,需要登录到电脑,这个电脑和你的树莓派需要在一个局域网里面. 有很多人统建使用 advanced ip scanner 这个工具, 我也使用了一段时间,开始还好,后面发现有时候扫描不到你的树莓派. 在网上搜索了一阵发现还有同款的一个扫描类的软件 angry ip scanner 之所以选择他是因为他对不同的局域网环境都能正确的扫描到树莓派对应的机器名称和机器ip address. 远程桌面工具,不是VNC 直接运行如下命令安装对应的远程桌面工具: $ sudo apt install -y xrdp","tags":"树莓派","url":"articles/pi-installation/"},{"title":"[Pelican高级] pelican 博客高级配置","text":"前言 继续上一篇的基本配置后,这里我将记录下涉及到的一些高级pelican的使用方法,也是自己摸索的一些网上的经验,还有一些自己自定义的功能. 关键字 Google adsense 百度站长 Google Console Tipue Search fabfile 不蒜子,浏览量统计 添加google和百度的SEO (2018-07-09) 谷歌的收录比较简单,直接登录到这里: https://www.google.com/webmasters ,按照提示添加自己 的网站即可,添加对应的sitemap,robots.txt即可. 百度的可以通过进入百度站长 http://zhanzhang.baidu.com ,方法同上面的谷歌添加网站,验证即可. 为了网站的长期可持续发展,添加一些广告也是没办法的: https://www.google.com/adsense/new/u/0/pub-1893384651266286/home 增加搜索功能(2018-07-09) 使用的插件是: Tipue_Search 自动化部署 看了一下官方的自动化部署相关的文章 fabric/Make , 提到在linux下 你可以很方便的使用 make 命令来操作相关的自动化,它对应的是 makefile ,你在使用 pelican-quickstart 命令的时候会提示你是否需要生成 这个文件. 执行命令 pelican-quickstart 的时候也会生成一个文件 fabfile.py ,这个文件同 makefile 是一样的,只不过一个是用python实现的,一个是基于linux shell 实现的. 在window下打开这个文件,发现里面的文件报了好多错,定位到 from fabric.api import * ,类似 no module found env,local 由于对 fabfile 不太熟悉,到网上找了一圈解决方法,发现缺少对应的包导致报错命令无法执行. 执行下面的命令完成对应的安装操作. pip install pycryptodome pip install Fabric3 # 注意这里是Fabric3,不要使用fabric 百度站长不能收录 按照官网提示,下载了对应的html文件到pelican的目录下面使用附件的形式复制到对应的output目录下面,推荐不要使用 cname 的方式. 例如我下载的html文件是: baidu_verify_TVrRxDNlTJ.html ,完整的配置在 pelican.conf 文件中,如下: STATIC_PATHS = ['static', 'extra/README.md', 'extra/robots.txt', 'extra/CNAME', 'extra/favicon.ico', 'extra/baidu_verify_TVrRxDNlTJ.html', 'extra/google9db45b3da980c919.html'] EXTRA_PATH_METADATA = { 'extra/README.md': {'path': 'README.md'}, 'extra/robots.txt': {'path': 'robots.txt'}, 'extra/CNAME': {'path': 'CNAME'}, 'extra/favicon.ico': {'path': 'favicon.ico'}, 'extra/baidu_verify_TVrRxDNlTJ.html': {'path': 'baidu_verify_TVrRxDNlTJ.html'}, 'extra/google9db45b3da980c919.html': {'path': 'google9db45b3da980c919.html'} } 加入浏览量统计 在谷歌上溜达了一圈,找到了一个博客: http://xiaohanyu.me/about/,随便看了一下作者的博客,看到了他去面试的谷歌和Facebook的面试经历, 感觉挺好玩的,里面提到了他们代码面试的工具: https://coderpad.io . 去玩了一下,感觉挺好玩. 好吧,扯远了….. 言归正文,推荐一个好用简单的统计页面浏览量和网站浏览量的插件. * 工具 不蒜子 ,代码也是只需要简简单单的几号就可以了,把这四行代码放到页面中你想要放的地址: <script async src= \"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\" ></script> <span id= \"busuanzi_container_site_pv\" > 总访问量 <span id= \"busuanzi_value_site_pv\" ></span> 次 </span> , <span id= \"busuanzi_container_site_uv\" > 总访客 <span id= \"busuanzi_value_site_uv\" ></span> 人 </span> <span id= \"busuanzi_container_page_pv\" > , 浏览量: <span id= \"busuanzi_value_page_pv\" ></span></span>","tags":"博客搭建","url":"articles/pelican-advance/"},{"title":"[Pelican初级] pelican 博客搭建","text":"我真是太折腾了,也没能坚持下去,去年陆陆续续用 hexo 写了一段时间的博客,最终没能坚持下去! 这个博客建立算是建立起来了, 我会认真的去写博客,坚持到最后! 关键字 pelican markdown github 搭建步骤 最好的方式莫过于官方文档: 官方入坑道路 . 下面的步骤都是很简单,网上一堆教程,我这里就不多说了,记下这些步骤 // 如果需要使用markdown这个高逼格的语法去写博客,请安装一下的包 # pip install pelican markdown typogrify # mkdir pingbook.top # cd pingbook.top # pelican-quickstart 安装上面的步骤操作下来后,弹出如下的提示让你配置,这些配置都可以以后在 pelicanconf.py 修改,直接默认回车一路下去就好了! pelican-quickstart执行命令后，会提示输入博客的配置项，除了少数几个必填以外，其它都可以选择默认，而且都可以在pelicanconf.py文件中进行更改，所以你可以随意选择。 1. Where do you want to create your new web site?[.] (你想在哪里创建你的网站，默认为当前目录) 2. What will be the title of this web site?(网站的标题是什么) 3. Who will be the author of this web site?(网站的作者是谁) 4. What will be the default language of this web site? [en] (网站的默认语言是),这里我们写'zh'中文 5. Do you want to specify a URL prefix? e.g., http://example.com(Y/n) (是否指定域名),Y 6. What is your URL prefix?(see above example; no trailing slash)(输入域名，不能包含反斜杠'/'),http://moelove.info 7. Do you want to enable article pagination?(是否启用文章分页) 8. Do you want to generate a Makefile to easily manage your website?(是否生成一个Makefile来管理网站(这里我建议生成，因为会比较方便的)) 9. Do you want an auto-reload & simpleHTTP script to assist with theme and site development?(是否想有一个自动加载的小型http脚本用来修改主题和站点开发) 10. Do you want to upload your website using FTP? 11. Do you want to upload your website using SSH? 12. Do you want to upload your website using Dropbox? 13. Do you want to upload your website using S3? 命令使用 由于本人使用的是windows,这里我使用了两个命令: # pelican content # 根据content中的内容，生成静态网站到output目下 # cd output && python -m pelican.server # cd output && python -m SimpleHTTPServer 主题和插件安装 theme安装 下载主题文件,添加配置: THEME = './pelican-themes/gum' 插件安装 下载插件文件,添加如下配置: PLUGIN_PATHS = [u\"pelican-plugins\"] PLUGINS = [u\"sitemap\",u\"gzip_cache\",u\"neighbors\",u\"related_posts\"] SITEMAP = { 'format': 'xml', 'priorities': { 'articles': 0.7, 'indexes': 0.5, 'pages': 0.3 }, 'changefreqs': { 'articles': 'weekly', 'indexes': 'daily', 'pages': 'monthly' } } 字体更改 1.下载字体文件,到网站的静态文件夹内,具体可以参考让wordpress主题绕开对google的依赖.不过此种方法也有些问题.把静态资源放到Github上加载时间也没别之前好多少. 2.把Google的静态公共库替换为国内的公共库.例如我的给替换成360的镜像地址.其实这种方法也有些弊端,例如国外用户访问就会出现加载过慢的问题.但是毕竟我们在'朝内',所以就换成360的资源库吧.操作如下 在对应的主题的css文件中修改对应的google font切换到国内的镜像.例如本周使用的是gum主题,转到对应的css文件 gumby.css ,修改如下: #static/css/目录下css文件中,例如gumby.css @import url ( // fonts . googleapi . com / css ? family = Overlock : 400 , 700 , 900 ); @import url ( // fonts . googleapi . com / css ? family = PT + Mono ); #替换为 @import url ( // fonts . useso . com / css ? family = Overlock : 400 , 700 , 900 ); @import url ( // fonts . useso . com / css ? family = PT + Mono ); 国内其他开公共库: 百度CDN公共库; 新浪云计算CDN公共库; 又拍云JS库CDN服务; 七牛云静态文件CDN; 高级语法 静态图片 新建一个目录在 content 下面,例如 images ,然后在 pelicanconf.py 设置如下: STATIC_PATHS = ['images','downloads'] ,在对应的md中可以这样写语法对应图片: ![测试图片显示]({attach}/static/images/test.png) 部署 部署到github上 新建一个仓库repository,仓库名称和你的github昵称相同,例如你的名称是abc,那么创建的仓库名称是: abc.github.io 也可以创建一个组织organization,在组织下面在创建一个仓库repository,仓库名称和你的组织也可以创建一个组织organization名称相同, 例如你的organization名称是abc,那么创建的仓库名称是: abc.github.io 完成以上的操作后上传对应的源码到github上,这里省略,命令如下: cd output git init git add . git remote add origin 仓库git地址 git push -u origin master","tags":"博客搭建","url":"articles/try-pelican/"},{"title":"[面试] 4. 白盒测试需要关注的知识点","text":"参考博客: https://www.cnblogs.com/molrang/p/6420918.html 自动化测试 考虑的因素 ①、项目的影响（能否帮助项目进度、覆盖率、风险） ②、复杂度（是否容易实现，包括数据和其他环境等） ③、时间（实现自动化需要多少时间） ④、早期需求和代码的稳定性（需求或代码能否证明是在范围内变化的） ⑤、维护工作量（代码能否能长期保持相对稳定） ⑥、覆盖率（自动化测试能否覆盖程序的关键特性和功能） ⑦、资源（是否拥有足够的人力、硬件和数据资源来运行自动化测试） ⑧、执行（负责执行的人员是否有足够的技能和时间去运行） ⑨、自动化测试管理 白盒测试 按照程序内部结构，逻辑驱动测试程序,目的是检测产品内部动作是否按照设计说明书的规范进行，检验程序的每条路径是否都能按照预定要求进行工作 白盒测试方法 ①、静态测试 静态测试是指不运行程序本身，仅通过分析程序文档结构，软件执行过程，检测程序的正确性，主要有变量，接口，递归等。 ②、动态测试 动态方法是指运行程序，检查运行结果与预期结果对比差异，并分析抗压性，健壮性等，这种测试包括三部分：构造测试实例，执行程序，分析程序输出结果。 区别一：静态测试是用于预防的，动态测试是用于矫正的 区别二：多次的静态测试比动态测试要效率和效益高 区别三：静态测试综合测试程序代码 区别四：在相当短的时间里，静态测试的覆盖度能达到100%，而动态测试经常是只能达到50%左右，原因动态测试发现的bug大部分只是在测试实际执行的那部分代码 区别五：动态测试比静态测试更花时间 区别六：静态测试比动态测试更能发现 bug 区别七：静态测试的执行可以在程序编码编译前，动态测试只能在编译后才能执行 区别八：静态测试能发现动态测试所不能发现的一些:\"Syntax error,code that hard to maintain,code that hard to test,code that does not confirm to coding standard, and ANSI violations\" 白盒测试方法 ①、尽量先用自动化工具来进行静态解析 ②、建议先从静态测试开始（静态结构分析、代码走查、静态质量度量），然后进行动态测试（如覆盖率测试） ③、以静态分析结果作为依据，再使用代码检查和动态测试方法对静态分析结果进行进一步确认，提高测试效率及准确性 ④、覆盖率测试是白盒测试的重要手段，在测试报告中可作为量化指标的依据，对于软件的重点模块，应使用多种覆盖率标准衡量代码的覆盖率 包括的有代码检查,SQL语句的测试,","tags":"面试","url":"articles/4-software-testing-white/"},{"title":"[面试] 3. 黑盒测试需要注意的几个关注点","text":"基本理论概念 是软件工程中的一个非常重要的环节，是开发项目整体的一部分。 是有计划有组织的，是伴随软件工程的诞生而诞生的，软件测试不是万能的， 不可能发现全部缺陷，软件测试是有局限性的。 测试的目的 1）验证软件是否满足 软件开发合同 或者项目开发计划，系统/子系统设计文档，软件需求规格说明，软件产品说明等规定的软件质量要求 2）通过测试，发现软件缺陷 3）为软件产品的质量测量和评价提供依据 测试用例的设计规则 基于测试需求的原则 基于测试方法的原则 兼顾 测试充分性 和 效率的原则 测试用例的方法有: a. 等价类: 是在 分析 需求规格说明 基础上，把程序的输入域 划分成 若干个部分，然后再每部分中选取 代表性数据 形成测试用例. * 步骤： a)划分有效等价类，对规格说明 是 有意义 合理的 输入数据 所构成的集合 b)划分无效等价类，对 规格说明 是 无意义 不合理的 输入数据 所构成的集合 c) 为每一个等价类 定义一个唯一的编号 d）为每一个等价类 设计一组测试用例 确保 覆盖相应的等价类 b.边界值分析: 边界值分析法 是针对 边界值 进行测试的 使用 等于 大于 或者小于边界值的数据对程序进行测试的方法 就是边界值分析法。 * 步骤： a）通过分析 规格说明 找出 所有 可能的 边界条件 b) 对每一个边界条件 给出 满足 和 不满足的输入数据 c) 设计相应的 测试用例 c. 错误推测法: 基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。 d. 因果图法 等价类划分法和边界值分析方法都是着重考虑输入条件，但没有考虑输入条件的各种组合、输入条件之间的相互制约关系。这样虽然各种输入条件可能出错的情况已经测试到了，但多个输入条件组合起来可能出错的情况却被忽视了。 如果在测试时必须考虑输入条件的各种组合，则可能的组合数目将是天文数字，因此必须考虑采用一种适合于描述多种条件的组合、相应产生多个动作的形式来进行测试用例的设计，这就需要利用因果图（逻辑模型）。 e. 判定表驱动法 判定表是分析和表达多逻辑条件下执行不同操作的情况的工具。 f. 正交实验法 * 步骤 1 提取功能说明,构造因子–状态表 把影响实验指标的条件称为因子.而影响实验因子的条件叫因子的状态.利用正交实验设计方法来设计测试用例时,首先要根据被测试软件的规格说明书找出影响其功能实现的操作对象和外部因素,把他们当作因子,而把各个因子的取值当作状态.对软件需求规格说明中的功能要求进行划分,把整体的概要性的功能要求进行层层分解与展开,分解成具体的有相对独立性的基本的功能要求.这样就可以把被测试软件中所有的因子都确定下来,并为确定个因子的权值提供参考的依据.确定因子与状态是设计测试用例的关键.因此要求尽可能全面的正确的确定取值,以确保测试用例的设计作到完整与有效。 2 加权筛选,生成因素分析表 对因子与状态的选择可按其重要程度分别加权.可根据各个因子及状态的作用大小,出现频率的大小以及测试的需要,确定权值的大小。 3 利用正交表构造测试数据集 正交表的推导依据Galois理论（这里省略,需要时可查数理统计方面的教材） 1. Dr. Genichi Taguchi 设计的正交表: https://www.york.ac.uk/depts/maths/tables/orthogonal.htm 2. Technical Support ( support.sas.com ) com 提供的 http://support.sas.com/techsup/technote/ts723_Designs.txt 利用正交实验设计方法设计测试用例,比使用等价类划分,边界值分析,因果图等方法有以下优点:节省测试工作工时；可控制生成的测试用例数量；测试用例具有一定的覆盖率。 g. 场景图法 现在的软件几乎都是用事件触发来控制流程的，事件触发时的情景便形成了场景，而同一事件不同的触发顺序和处理结果就形成事件流。 这种在软件设计方面的思想也可以引入到软件测试中，可以比较生动地描绘出事件触发时的情景，有利于测试设计者设计测试用例，同时使测试用例更容易理解和执行。 软件的内部质量 功能性：当软件在指定条件下使用时，软件产品 提供 满足 明确的和隐含的能力，包括适合性，准确性，互操作性，安全保密性，依从性 可靠性：在指定条件下使用时 软件产品维持规定的性能级别的能力；包括，成熟性，容错性，易恢复性，依从性 易用性：在指定条件下使用 软件产品被理解被学习 使用和 吸引用户的能力 包括 易学性 易操作性 吸引性 依从性 效率性：在规定条件下 软件产品执行其功能时使用合适数量和类别资源的能力；包括 资源利用性 和效率依从性 、 维护性：软件产品 可以被修改的能力可能包括 纠正 改进 软件对环境 需求 和功能规格说明变化的适应 包括，易分析性，易改变性，稳定性，易测试性，依从性 可移植性：软件产品 从一种环境迁移到另外一种环境的能力，包括，适应性，易安装性，共存性，易替换性，可移植性的依从性。 兼容性: 什么是兼容性测试?兼容性测试侧重哪些方面? 主要检验的是软件的可移植性，检查软件在不同的硬件平台软件平台上是否可以正常的运行。细分会有：平台的兼容，网络兼容，数据库兼容，数据格式的兼容等。 测试的生命周期 单元测试，集成测试，确认测试(Certify Testing)，系统测试，验收测试, 回归测试(Regression Testing). 单元测试: 软件设计文档 集成测试：软件结构设计文档 配置项测试：需求规格说明书（接口需求规格说明） 系统测试：用户需求（研制合同或系统需求） 验收测试：软件研制合同（用户需求或系统需求） 测试方法 黑盒测试，白盒测试, 静态测试和动态测试，手工测试和动态测试，回归测试，公测 * 白盒 逻辑测试或者基于程序的测试，这种测试 应了解软件程序的内部构造，并且根据内部构造 来设计测试用例。发生在单元测试,集成测试或确认测试. 黑盒测试是功能性测试，一般采用穷举输入测试. * 黑盒 又称功能测试，数据驱动测试，或者基于规格说明的测试，这种测试不必要了解 对象的内部逻辑结构，而是根据需求说明书中的功能来设计测试用例. 白盒测试是结构测试，一般是穷举路径测试，检测内部逻辑驱动结构 * 灰盒 持续的集成测试 冒烟测试 一段时间内 针对某个模块【刚新增的模块 或者刚刚修改完的模块】开展某个专项测试（功能测试）， 回归测试 长时间，针对某个指定的版本【刚新增的模块 以及与他相关的其他模块，进行专项的测试活动】 功能测试 1． 测试需求：测试的规格说明书，主要作用是定义待测试的模块 和 功能模块的测试要点 2． 测试计划：测试过程中的纲领性文件，对测试活动中的测试环境，测试方法，测试时间人员安排。 3． 测试用例：是测试需求的细化，是一群元素的集合，主要包含，用例编号，操作步骤/测试数据，预期结果，实际结果，判定，覆盖需求。 4． 缺陷报告：将软件的实际情况 和 测试用例的预期结果相比较，记录问题报告单。 5． 测试的基本过程：四个过程，测试策划，测试设计，测试执行，测试总结 6． 测试所需要的文档：测试需求，测试计划，测试用例，缺陷报告，测试报告（可能编写） 可能的面试题目 Beta测试与Alpha测试有什么区别? Beta是用户实际使用的测试，没有开发者在场，Alpha测试是公司内部测试，有开发者监控。 什么是桩模块？什么是驱动模块？ 集成测试前要为被测模块编辑一些模拟其下级功能的子模块的替身，以代替被测模块的借口，接受或者传递数据，这些假模块被称为桩模块。 驱动模块一般为主程序，它接收测试数据并将这些数据传递到被测试模块。 什么是扇入和扇出？ 扇入是指该模块被调用的次数，扇入大，说明该模块的复用性好。 扇出是指该模块调用其他模块的个数，扇出大，说明该模块的业务逻辑复杂。 你认为做好测试工作的的关键是什么？ 目的，管理，规范。 简述一下缺陷的生命周期? 提交->确认->分配->修复->验证->关闭 软件的安全性应该从哪几个方面去测试？ 1，用户认证机制， 2，加密机制 3，安全防护策略，安全日志等， 4，数据备份和恢复 5，防病毒系统。 单元测试，集成测试，系统测试的区别？ 测试方法不同：单元测试属于白盒测试，集成测试属于灰盒测试，系统测试属于黑盒测试。 考察范围测试重点不同：单元测试注重单元内部的数据结构，逻辑控制，异常处理。 集成测试注重模块之间的接口及接口之间的数据传递，系统测试注重满足需求。 基准不同：单元测试主要的逻辑覆盖，集成测试主要是接口覆盖，系统测试是测试用例对需求规格的覆盖率。","tags":"面试","url":"articles/3-software-testing-black/"}]}