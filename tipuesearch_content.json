{"pages":[{"title":"Page not found · PingBook Blog\r\n","text":"\n\n\nPage not found · PingBook Blog\r\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n                (adsbygoogle = window.adsbygoogle || []).push({\r\n                    google_ad_client: \"ca-pub-1893384651266286\",\r\n                    enable_page_level_ads: true\r\n                });\r\n            \n\n\n\r\n                window.dataLayer = window.dataLayer || [];\r\n                function gtag(){dataLayer.push(arguments);}\r\n                gtag('js', new Date());\r\n\r\n                gtag('config', 'UA-122219517-1');\r\n            \n\n\n\n\n\n\n\n\r\n                (adsbygoogle = window.adsbygoogle || []).push({});\r\n            \n\n\n\nPingBook Blog import __hello__ import this\n\n\n\n\nHome\nCategory\nArchive\nTags\nAbout\nChanges\n\n\n\n\n\n\n\n\n\n\n\nThat page doesn't exist!\n\n\n\n\nSorry, but the page you are looking for cannot be found. It seems that the page you were trying to reach doesn't exist, or may be it has just moved, or it no longer exists.\nThe best thing to do is to use the search form or start again from the home page.\n\n\n\nSearch\n\n\n\n\n\n\n\n\n\n\r\n                ©\r\n                document.write(new Date().getFullYear())\r\n                PingBook.Inc. Powered by Pelican.\r\n                \n\nSite Views: ,\r\n                    Total Vistors: \n\n\n\n\n\n\n\n\n\n\n\n\r\n    var disqus_shortname = 'pingbook';\r\n    (function () {\r\n        var s = document.createElement('script'); s.async = true;\r\n        s.type = 'text/javascript';\r\n        s.src = 'https://' + disqus_shortname + '.disqus.com/count.js';\r\n        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);\r\n    }());\r\n\n\n\n\r\n    function validateForm(query) {\r\n        return (query.length > 0);\r\n    }\r\n\n\n\n\n","tags":"","url":"https://pingbook.top/404.html"},{"title":"SHOW TIME","text":"My name is Walter Hu , I'm a Software Engineer living in shanghai, China. Achievements Designed and implemented new selenium framework(cucumber, BDD .etc). Best practise for Vuejs develop. Best production design for springboot project. Resume If my appalling attempts to impress with the babbling above did not worked, you may be thrilled by the following soporific information on my professional background: Format Language PDF English ● Chinese LinkedIn English ● Chinese Resumes, CVs and profiles above are heavy on irrelevant details. And that's absolutely intentional. I designed these to form an extensive professional activities database . Not as resume per se . So feel free to pick there data you need to fill in your talent database and please ignore the rest. About this site This place is an evolving notebook where I deposit tiny pieces of knowledge ( knowledgelets ?) I generate in my personal and professional activities. Everything's in English as a way to practice, and to make my knowledge available to the largest audience. It's not my mother tongue and you'll surely find mistakes. If you do, please be kind enough to comment on the blog (or better, send a pull-request ) so I can quickly fix errors. I sometimes write in Chinese to target a French-speaking audience.","tags":"pages","url":"about"},{"title":"Release Notes","text":"2018-07-01 0x01 pelican blog site Add into google and baidu search enginee; Add the tipue search for static site search; Change some css styles and layout; Add google adsense;","tags":"pages","url":"change-log"},{"title":"[环境搭建] tensorflow的基础学习","text":"tensorflow 安装 这里参考的是官方的文档: Installing TensorFlow on Raspbian source 安装编译 $ sudo apt-get install - git $ sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel $ git clone https://github.com/tensorflow/tensorflow $ cd tensorflow $ git checkout master 未完待续 python pip安装 Python,pip环境的搭建这里就不罗嗦了,可以参考我的另外一篇博客: python3安装 新建一个virtual environment(推荐使用 pipenv )用于存放对应的pip的包,执行如下命令: $ sudo mkdir venvBigData $ cd venBigData $ sudo apt install - y libatlas - base - dev # 安装numpy需要依赖的包 $ export PIPENV_VENV_IN_PROJECT = 1 $ pipenv shell $ pipenv install tensorflow $ python # 接下来是命令行验证tensorflow安装正确与否 $ import tensorflow as tf hello = tf . constant ( 'Hello, TensorFlow!' ) sess = tf . Session () print ( sess . run ( hello ))","tags":"machine learning","url":"articles/tensorflow-basic/"},{"title":"[Linux] (持续更新中)一些常用的linux系统的操作命令","text":"关键字 free top 防火墙操作 显示防火墙状态 $ sudo iptables -L 关闭防火墙 $ sudo iptables -F #flush 清空所有的规则 添加到防火墙中 $ sudo iptables -A FIREWALL -p tcp -m tcp –dport 80 –syn -j ACCEPT # -A append # -p protocol # -m match # -d destination # -j jump $ sudo iptables -A FIREWALL -p tcp -m tcp --dport 22 --syn -j ACCEPT # 打开22端口 $ sudo iptables-save > /etc/firewall-rules 性能相关的命令 与 df 不一样的是，du会直接到文件系统内查找所有的文件数据。 # df -lh # 查看磁盘空间 # du -ah --max-depth=1 这个是我想要的结果 a表示显示目录下所有的文件和文件夹（不含子目录），h表示以人类能看懂的方式，max-depth表示目录的深度。 ```` ### 统计文件个数 统计当前文件夹下文件的个数，包括子文件夹里的 `ls -lR|grep \"&#94;-\"|wc -l` 统计文件夹下目录的个数，包括子文件夹里的 `ls -lR|grep \"&#94;d\"|wc -l` 统计当前文件夹下文件的个数 `ls -l |grep \"&#94;-\"|wc -l` 统计当前文件夹下目录的个数 `ls -l |grep \"&#94;d\"|wc -l` 附： 统计输出信息的行数 `wc -l` 将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 &#94;d `grep \"&#94;-\"` ### 切换语言环境为英文 参考文章: https://blog.csdn.net/yygydjkthh/article/details/47694747 $ sudo export LANG =en_US. UTF -8 $ dpkg-reconfigure locales # 点击空格选择en_US_UTF-8,点击空格去掉zh_CN_UTF-8 $ locale -a ### 磁盘管理,加载新的磁盘 参加文档: https://www.fujieace.com/linux/no-partition-is-defined-yet.html 阿里云的帮助文档,注意ext3格式,实际的系统格式是ext4:https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.9.u398NC No partition is defined yet! Could not delete partition 1 > 删除磁盘 `fdisk d`的时候一定要注意清空文件 `/etc/fstab`里面的内容,否则容易出现很大的问题. fdisk -l fdisk /dev/sdb mkfs.ext4 /dev/sdb1 nano /etc/fstab 这里加上对应的需要加载的磁盘的信息 mount /dev/sdb1 \" `","tags":"linux","url":"articles/basic-command/"},{"title":"[环境搭建] MYSQL 的安装配置","text":"安装 执行如下命令进行安装和基本的配置: $ sudo apt-get -y install mysql-server $ sudo mysql_secure_installation 第二条命令将会配置mysql的 root 密码,删除掉 test 数据库,不允许匿名登录等等操作. 按照上面的操作mysql的配置是没有问题的了,但是你会发现,如果你运行如下命令: mysql -u root -p , 这里的root不用输入密码,明明上面的已经设置了密码??? 进行如下的命令进行配置: $ sudo mysql -u root -p $ use mysql ; $ update user set plugin = 'mysql_native_password' where user = 'root' ; $ flush privileges ; $ quit ; 配置 root 密码的更改,可以采用下面的操作步骤: $ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf 增加一行代码: skip-grant-tables 参见 https://www.jb51.net/article/100925.htm $ sudo mysql -u root -p $ use mysql ; $ UPDATE mysql.user SET Password = PASSWORD ( 'YanZhi123!@#)0x&*' ) where USER = 'root' ; $ flush privileges ; 增加用户名和授权远程登录: $ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf 注释掉 bind-address = 127 .0.0.1 $ sudo mysql -u root -p $ use mysql ; $ CREATE USER 'yanzhi' @ '%' IDENTIFIED BY 'yanzhi123!@#' ; $ GRANT ALL PRIVILEGES ON *.* TO 'yanzhi' @ '%' IDENTIFIED BY 'yanzhi123!@#' ; -- 远程连接权限所有的数据库. $ flush privileges ; 创建数据库,支持中文: UTF8 : CREATE DATABASE test2 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci 自动备份数据库,每天备份一次 * 新建文件: sudo nano /usr/sbin/mysqlbackup.sh ,内容如下: 1 2 3 4 5 6 7 8 9 #!/bin/bash # Name:mysql_backup.sh # This is a ShellScript For Auto DB Backup and Delete old Backup # backupdir = /www/backups time = ` date +%Y-%m-%d_%H%M%S ` /usr/bin/mysqldump --routines -u 'test' -p 'test!@#' pingbook | gzip > $backupdir /yanzhi $time .sql.gz # 删除七天前的备份 find $backupdir -name \"*.sql.gz\" -type f -mtime +7 -exec rm {} \\ > /dev/null 2 > & 1 添加可执行权限对应sh文件. $ sudo chmod +x /usr/sbin/mysqlbackup.sh 增加定时任务在 sudo nano /etc/crontab #创建一个mysql备份的操作 2 1 * * * root /usr/sbin/mysqlbackup.sh >> /var/log/crontab/backup.log 2>&1 重启 crontab 以便生效 sudo systemctl restart cron.service mysql startup error https://blog.csdn.net/mr_raptor/article/details/70576117 [ ERROR ] Can't init tc log innodb_empty_free_list_algorithm has been changed to legacy because of small buffer pool size. In order to use backoff, increase buffer pool at least up to 20MB . 解决方法是删除mysql的log文件,因为磁盘满了不能写log了: $ cd /var/lib/mysql $ rm -f ib_logfile* $ rm -f tc.log","tags":"树莓派","url":"articles/pi-mysql/"},{"title":"vuejs中使用的一些重要技巧","text":"style中配置 background-color , background-image 变量 代码如下 <v-btn color= \"primary\" fab dark class= \"checkbtn\" :style= \"{ marginTop: '8%', height: '240px', width: '240px', backgroundColor: backgroundcolor, backgroundRepeat: 'no-repeat', backgroundPosition: 'center', backgroundSize: '180px auto', backgroundImage: 'url(' + backgroundimage + ')'}\" @ click.native= \"submitCheckin\" :disabled= \"AlreadyCheckin\" > {{ checkinContent }} </v-btn> export default { name: 'CheckingIn', data () { return { checkinContent: '', AlreadyCheckin: false, backgroundcolor: 'green', backgroundimage: require('../assets/img/finger.png'), checkinNote: '' } }, foreach 获得 index [].foreach((item,index)=>{ }) 同vue的for循环一致,比如下面的 <template v-for= \"(task,index) in tasks\" > </template>","tags":"vuejs","url":"articles/best-tips/"},{"title":"[环境搭建] 如何完整卸载python2/3 在debain上","text":"卸载 remove python3 $ sudo apt-get remove 'python3.*' 其实这里的python的包是: ` python3.5-minimal ` , ` python3.5-venv ` 安装 install python3.7 因为默认的debian仓库里面是python3.5,所以如果需要安装最新的python,按照如下步骤进行安装, 参考文档: https://unix.stackexchange.com/questions/332641/how-to-install-python-3-6 需要用到的命令如下: 安装依赖包 $ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\ libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\ xz-utils tk-dev libffi-dev $ sudo wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz $ tar xvf Python-3.7.0.tgz // 下面的步骤安装会跑测试来判定机器的性能,从而进行性能的提高 $ ./configure --enable-optimizations --with-ensurepip=install $ make -j8 $ sudo make altinstall $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 50 $ sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 50 安装pip,pipenv并设置全局可用命令 pipenv $ wget https://bootstrap.pypa.io/get-pip.py $ sudo python get-pip.py $ pip install --user pipenv /home/pi/.local/bin $ python -m site --user-base $ sudo nano ~/.profile export PATH = \" $HOME /.local/bin: $PATH \" $ sudo source ~/.profile $ pipenv --update uwsgi 配置详解 问题是我们的服务器后台部署在uwsgi上,今天突然有很大量的用户访问,结果导致了发到 uwsgi 的所有请求都是 Pending 的状态. 概念 emperor翻译为中文的意思其实就是皇帝的意思，那么既然有皇帝，那就肯定有\"臣子\"（vassals），其中\"臣子\"就是指实际运行的一个app实例，在这里就是uwsgi_test.ini配置文件了。 emperor模式开启的命令是： sudo uwsgi –emperor /path/to/vassals/ 其中，vassals文件夹里包含了各个app的配置文件，这个文件夹将会被emperor一直监视，只要有配置文件的修改或新建，app实例就会被重新加载或新建，可以通过软链接将实际项目中的配置文件链接到vassal文件夹目录下. 在文档中，emperor监视的是配置文件目录，但是问题来了，笔者希望每次Git仓库更新一次就重新启动实例，而如果这次更新并没有对配置文件进行修改，实例自然就不会重新启动了。 uwsgi是用c语言写的一个webserver，可以启动多个进程，进程里面可以启动多个线程来服务。进程分为主进程和worker进程，worker里面可以有多个线程。","tags":"树莓派","url":"articles/pi-python3/"},{"title":"[环境搭建] 大数据hadoop,spark,hbase,hive概念","text":"Hadoop、Spark、HBase、Hive 到处都在谈论大数据,感觉自己再不去学习这些最新的技术,自己就要被淘汰了.好吧我也开始学习了. AI = ML + BigData 关键字 hadoop spark hbase hive hdfs hadoop 安装 参考博客: https://www.cnblogs.com/jing1996/p/8038219.html $ sudo wget http://mirrors.shu.edu.cn/apache/hadoop/common/hadoop-3.0.3/hadoop-3.0.3.tar.gz $ tar zxvf hadoop-3.0.3.tar.gz $ cd hadoop-3.0.3/etc/hadoop $ sudo nano hadoop-env.sh 修改其中的 JAVA_HOME路径指向对应的JAVA_HOME路径 $ sudo nano core-site.xml <configuration> <property> <name> fs.defaultFS </name> <value> hdfs://localhost:9000 </value> </property> <property> <name> hadoop.tmp.dir </name> <value> /home/pi/hadoop-3.0.3/tmp </value> <description> namenode上本地的hadoop临时文件夹 </description> </property> </configuration> $ sudo nano hdfs-site.xml <configuration> <property> <name> dfs.replication </name> <value> 1 </value> </property> <property> <name> dfs.namenode.name.dir </name> <value> /home/pi/hadoop-3.0.3/dfs/name </value> <description> namenode上存储hdfs名字空间元数据 </description> </property> <property> <name> dfs.datanode.data.dir </name> <value> /home/pi/hadoop-3.0.3/hdfs/data </value> <description> datanode上数据块的物理存储位置 </description> </property> </configuration> $ sudo nano mapred-site.xml <configuration> <property> <name> mapreduce.framework.name </name> <value> yarn </value> </property> </configuration> $ sudo nano yarn-site.xml <configuration> <property> <name> yarn.nodemanager.aux-services </name> <value> mapreduce_shuffle </value> </property> </configuration> # 配置对应的环境变量 $ sudo nano /etc/profile # 配置hadoop的环境变量 export HADOOP_HOME=/home/pi/hadoop-3.0.3 EXPORT PATH= $PATH : $JAVA_HOME /bin: ${ HADOOP_HOME } /bin: ${ HADOOP_HOME } /sbin: $PATH $ sudo source /etc/profile $ sudo chown -R pi /home/pi/hadoop-3.0.3 修改权限 $ chown -R pi /home/pi/hadoop-3.0.3 基本概念 pass","tags":"bigdata","url":"articles/hadoop-spark-hbase-hive/"},{"title":"[树莓派] 树莓派国内镜像","text":"前因 自己在Github Page搭建了一个博客,但是不能被百度收录.也就是百度搜索不能爬取网站的内容,也就不能被国内搜索到了. 为树莓派更换国内镜像源 (2018-07-07更新: 清华的镜像源已经不能使用: Cannot initiate the connection to mirrors.tuna.tsinghua.edu.cn:80) 可用的官方镜像源: http://www.raspbian.org/RaspbianMirrors 使用管理员权限（经由sudo），编辑/etc/apt/sources.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list 用#注释掉原文件内容，用以下内容取代使用上海大学或者是中科大(https://mirrors.ustc.edu.cn/archive.raspberrypi.org/)的镜像： deb https://mirrors.shu.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi deb-src https://mirrors.shu.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi 使用管理员权限（经由sudo），编辑/etc/apt/sources.list.d/raspi.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list.d/raspi.list 用#注释掉原文件内容，用以下内容取代： deb https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui deb-src https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui 注意： 网址末尾的raspbian重复两次是必须的。因为Raspbian的仓库中除了APT软件源还包含其他代码。APT软件源不在仓库的根目录，而在raspbian/子目录下。 编辑镜像站后，请使用 sudo apt update && sudo apt upgrade -y 命令，更新软件源列表，同时检查您的编辑是否正确。 使用HTTPS可以有效避免国内运营商的缓存劫持，但需要事先安装 apt-transport-https .","tags":"树莓派","url":"articles/pi-mirrors/"},{"title":"[环境搭建] Debian安装编译和安装nginx服务器","text":"Debian安装配置nginx服务器 下载解压缩安装包 $ sudo wget https://nginx.org/download/nginx-1.15.1.tar.gz $ tar zxvf nginx-1.15.1.tar.gz 重新配置nginx的服务器名称servername和对应版本 $ cd nginx-1.15.1/ $ sudo nano src/http/ngx_http_header_filter_module.c $ sudo nano src/core/nginx.h $ sudo nano nginx-1.15.1-openbook.top.tar.gz nginx-1.15.1/ 安装对应的nginx的所有依赖的包, gcc环境, pcre, zlib and openssl $ sudo apt install build-essential -y $ wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz $ tar zxvf pcre-8.41.tar.gz $ wget http://www.zlib.net/zlib-1.2.11.tar.gz $ tar -zxvf zlib-1.2.11.tar.gz $ wget https://www.openssl.org/source/openssl-1.1.0g.tar.gz $ tar zxvf openssl-1.1.0g.tar.gz $ cd openssl-1.1.0g $ ./config -Wl,--enable-new-dtags,-rpath, '$(LIBRPATH)' $ make # 大约五六分钟左右 $ sudo make install $ openssl version -a 安装nginx 参考说明文档: https://www.vultr.com/docs/how-to-compile-nginx-from-source-on-ubuntu-16-04 $ cd nginx-1.15.1 $ ./configure --prefix = /usr/local/nginx \\ --sbin-path = /usr/sbin/nginx \\ --modules-path = /usr/lib/nginx/modules \\ --conf-path = /etc/nginx/nginx.conf \\ --error-log-path = /var/log/nginx/error.log \\ --http-log-path = /var/log/nginx/access.log \\ --pid-path = /run/nginx.pid \\ --lock-path = /var/lock/nginx.lock \\ --user = www-data \\ --group = www-data \\ --http-client-body-temp-path = /var/lib/nginx/body \\ --http-fastcgi-temp-path = /var/lib/nginx/fastcgi \\ --http-proxy-temp-path = /var/lib/nginx/proxy \\ --http-scgi-temp-path = /var/lib/nginx/scgi \\ --http-uwsgi-temp-path = /var/lib/nginx/uwsgi \\ --with-openssl = ../openssl-1.1.0g \\ --with-openssl-opt = enable-ec_nistp_64_gcc_128 \\ --with-openssl-opt = no-nextprotoneg \\ --with-openssl-opt = no-weak-ssl-ciphers \\ --with-openssl-opt = no-ssl3 \\ --with-pcre = ../pcre-8.41 \\ --with-pcre-jit \\ --with-zlib = ../zlib-1.2.11 \\ --with-compat \\ --with-file-aio \\ --with-threads \\ --with-http_addition_module \\ --with-http_auth_request_module \\ --with-http_dav_module \\ --with-http_flv_module \\ --with-http_gunzip_module \\ --with-http_gzip_static_module \\ --with-http_mp4_module \\ --with-http_random_index_module \\ --with-http_realip_module \\ --with-http_slice_module \\ --with-http_ssl_module \\ --with-http_sub_module \\ --with-http_stub_status_module \\ --with-http_v2_module \\ --with-http_secure_link_module \\ --with-mail \\ --with-mail_ssl_module \\ --with-stream \\ --with-stream_realip_module \\ --with-stream_ssl_module \\ --with-stream_ssl_preread_module \\ --with-debug \\ --with-cc-opt = '-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' \\ --with-ld-opt = '-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now' $ make #这个操作需要花费十分钟左右 $ sudo make install $ sudo systemctl start nginx.service && sudo systemctl enable nginx.service 遇到的问题 nginx: [emerg] mkdir() \"/var/lib/nginx/body\" failed Just create directory $ sudo mkdir -p /var/lib/nginx && sudo nginx -t $ sudo nano /lib/systemd/system/nginx.service 输入如下内容 # Stop dance for nginx # ======================= # # ExecStop sends SIGSTOP (graceful stop) to the nginx process. # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control # and sends SIGTERM (fast shutdown) to the main process. # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends # SIGKILL to all the remaining processes in the process group (KillMode=mixed). # # nginx signals reference doc: # http://nginx.org/en/docs/control.html # [Unit] Description=A high performance web server and a reverse proxy server Documentation=man:nginx(8) After=network.target [Service] Type=forking PIDFile=/run/nginx.pid ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;' ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;' ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid TimeoutStopSec=5 KillMode=mixed [Install] WantedBy=multi-user.target 重启nginx服务 sudo systemctl start nginx.service && sudo systemctl enable nginx.service check nginx service is up $ sudo systemctl status nginx.service $ ps aux | grep nginx $ curl -I 127 .0.0.1 重启nginx出现 Directory index of \"/www/pingbook.top/pingbook.top/output/\" is forbidden, 解决方法是在location里面设置index index.html,如下: location / { # 使用alias时，目录名后面一定要加\"/\" alias /www/pingbook.top/pingbook.top/output/; index index.html; try_files $uri $uri/ index.html last; } Https 加密你的网站 参考文档: https://certbot.eff.org/lets-encrypt/debianother-nginx $ sudo wget https://dl.eff.org/certbot-auto $ sudo chmod a+x certbot-auto $ # 获取证书 $ sudo ./certbot-auto certonly --standalone --email alterhu2020@gmail.com -d pingbook.top -d www.pingbook.top 报错如下,很多的依赖没有安装成功: dpkg: error processing package python-zope.component ( --configure ) : dependency problems - leaving unconfigured Setting up libaugeas0 ( 1 .8.0-1+deb9u1 ) ... dpkg: dependency problems prevent configuration of python-mock: python-mock depends on python-funcsigs ( > = 1 ) ; however: Package python-funcsigs is not configured yet. python-mock depends on python-pbr ( > = 1 .3 ) ; however: Package python-pbr is not configured yet. python-mock depends on python-six ( > = 1 .9 ) ; however: Package python-six is not configured yet. dpkg: error processing package python-mock ( --configure ) : dependency problems - leaving unconfigured dpkg: dependency problems prevent configuration of python-requests: python-requests depends on python-urllib3 ( > = 1 .19.1 ) ; however: Package python-urllib3 is not configured yet. python-requests depends on python-chardet ; however: Package python-chardet is not configured yet. python-requests depends on python-urllib3 ( << 1.1 9 .2 ) ; however: Package python-urllib3 is not configured yet. dpkg: error processing package python-requests ( --configure ) : dependency problems - leaving unconfigured dpkg: dependency problems prevent configuration of certbot: certbot depends on python-certbot (= 0 .10.2-1 ) ; however: Package python-certbot is not configured yet. dpkg: error processing package certbot ( --configure ) : dependency problems - leaving unconfigured Processing triggers for libc-bin ( 2 .24-11+deb9u3 ) ... Errors were encountered while processing: python-dnspython python-idna python-parsedatetime python-pyasn1 python-tz python-pkg-resources python-configargparse python-six python-zope.interface python-psutil python-pbr python-enum34 python-cryptography python-virtualenv python-funcsigs python-zope.hookable python-ipaddress python-pyicu python-zope.event python-rfc3339 python-setuptools python-urllib3 python-configobj python-chardet python-acme python-openssl python-certbot python-zope.component python-mock python-requests certbot Sub-process /usr/bin/dpkg returned an error code (1) $ cd /var/cache/apt/ $ cd archives/ $ sudo rm -rf * 所以我想起以前用的一个网友的脚本,不用安装一堆繁杂的包,地址: https://github.com/xdtianyu/scripts/blob/master/lets-encrypt/ README - CN .md \" 1. 在nginx的配置文件里面配置location: \"` # https 配置Let's Encrypt location &#94;~ /.well-known/acme-challenge/ { allow all; default_type \"text/plain\"; root /www; } $ sudo wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.conf $ sudo wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.sh $ sudo chmod +x letsencrypt.sh $ sudo nano letsencrypt.conf $ sudo ./letsencrypt.sh letsencrypt.conf ### 删除已经安装的nginx sudo apt update && sudo apt upgrade -y # update all package index sudo apt-get purge nginx nginx-common # Removes everything. nginx 采用的C语言编写的,需要对应的C编译器( GCC ): sudo apt install build-essential -y \" `","tags":"树莓派","url":"articles/pi-nginx/"},{"title":"[环境搭建] Debian如何安装配置Tomcat9","text":"安装 参考文档: https://www.howtoforge.com/tutorial/ubuntu-apache-tomcat/ 推荐: https://gist.github.com/jniltinho/a7bd30288342a5d352e6#file-install_tomcat-sh-L33 安装JDK和配置环境变量(采用下面的配置环境变量/etc/profile), 注意截止到20180709, oracle没有提供debain的32位系统安装tar包,所以这里使用的是32位的jdk1.8 $ nano ~/.bashrc export JAVA_HOME = /usr/lib/jvm/jdk-8-oracle-arm32-vfp-hflt export PATH = $JAVA_HOME /bin: $PATH $ source ~/.bashrc $ echo $JAVA_HOME 添加组和用户 $ sudo groupadd tomcat $ sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat 下载tomcat9 $ tar zxvf jdk1.8.0_171.tar.gz $ sudo nano /etc/profile JAVA_HOME = /home/pi/jdk1.8.0_171 CLASSPATH = $JAVA_HOME /lib/ PATH = $PATH : $JAVA_HOME /bin export PATH JAVA_HOME CLASSPATH $ source /etc/profile $ java 可能下载的是64位的jdk,但是系统只能运行32位的jdk /bin/javac: cannot execute binary file: Exec format error $ cd /home/pi $ sudo wget http://apache.cs.utah.edu/tomcat/tomcat-9/v9.0.10/bin/apache-tomcat-9.0.10.tar.gz $ tar zxvf apache-tomcat-9.0.10.tar.gz $ cd /home/pi/apache-tomcat-9.0.10/ $ sudo groupadd tomcat $ sudo useradd -M -s /bin/nologin -g tomcat -d /home/pi/apache-tomcat-9.0.10 tomcat $ sudo chgrp -R tomcat conf $ sudo chmod g+rwx conf $ sudo chmod g+r conf/* $ sudo chown -R tomcat webapps/ work/ temp/ logs/ $ sudo chown -R tomcat:tomcat * $ sudo chown -R tomcat:tomcat /home/pi/apache-tomcat-9.0.10 $ sudo chmod -R 757 conf/ $ sudo chmod -R 757 logs/ $ sudo chmod -R 757 webapps/ 配置 tomcat开机启动 $ sudo nano /etc/systemd/system/tomcat.service # Systemd unit file for tomcat [ Unit ] Description = Apache Tomcat Web Application Container After = syslog.target network.target [ Service ] Type = forking Environment = JAVA_HOME = /home/pi/jdk1.8.0_171 Environment = CATALINA_PID = /home/pi/apache-tomcat-9.0.10/temp/tomcat.pid Environment = CATALINA_HOME = /home/pi/apache-tomcat-9.0.10 Environment = CATALINA_BASE = /home/pi/apache-tomcat-9.0.10 Environment = 'CATALINA_OPTS=-Xms512M -Xmx824M -server -XX:+UseParallelGC' Environment = 'JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom' ExecStart = /home/pi/apache-tomcat-9.0.10/bin/startup.sh ExecStop = /bin/kill -15 $MAINPID User = tomcat Group = tomcat [ Install ] WantedBy = multi-user.target $ sudo systemctl daemon-reload $ sudo systemctl start tomcat $ sudo systemctl enable tomcat Configure Apache Tomcat User $ cd /home/pi/apache-tomcat-9.0.10/conf/ $ sudo nano tomcat-users.xml <role rolename = \"manager-gui\" /> <user username = \"admin\" password = \"admin\" roles = \"manager-gui,admin-gui\" /> $ cd webapps/manager/META-INF/ $ sudo nano context.xml comment: <!-- <Valve className = \"org.apache.catalina.valves.RemoteAddrValve\" allow = \"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /> --> $cd webapps/host-manager/META-INF/ #sudo nano context.xml comment: <!-- <Valve className = \"org.apache.catalina.valves.RemoteAddrValve\" allow = \"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /> --> $ sudo systemctl restart tomcat.service","tags":"树莓派","url":"articles/pi-tomcat/"},{"title":"[环境搭建]  svn 安装配置","text":"SVN 安装 执行如下命令进行安装: $ sudo apt-get -y install subversion 启动 svn 服务: d代表的是daemon 进程 $ svnserve -d $ ps aux | grep svnserve 若出现如下内容： wkr 6537 0.0 0.0 13784 956 ? Ss 16:18 0:00 svnserve -d wkr 7593 0.0 0.0 5784 864 pts/0 S+ 21:57 0:00 grep –color=auto svnserve 表示服务已开启。（注意：一定要有第1行，只有第2行说明服务未启动） 关闭 svn 服务: $ killall svnserve 重启 svn 服务: $ svnserve -d -r /srv 新建一个仓库: $ sudo adduser --system --home /srv/svn --disabled-password --disabled-login --group svn $ sudo svnadmin create /srv/svn $ sudo chown -R svn:svn /srv/svn change user, change group 改变文件对应的用户和用户组 修改仓库配置文件 编辑配置文件: svnserve.conf $ sudo nano /srv/svn/conf/svnserve.conf [ general ] anon-access = none auth-access = write authz-db = authz 修改帐户文件 nano /srv/svn/conf/passwd 和 sudo nano /srv/svn/conf/authz , 此处忽略. 配置svn开机自动启动 新建一个svnserve配置文件在 /et/default/svnserve 文件,内容如下: # svnserve options DAEMON_ARGS=\"--daemon --pid-file /run/svnserve/svnserve.pid --root /srv/svn --log-file /var/log/svn/svnserve.log\" 注意 新建log文件,这些是 /etc/default/svnserve 中的文件的配置涉及的几个文件,如果执行 sudo systemctl restart svnserve.service 失败,会自动删除文件夹 /run/svnserve $ sudo mkdir /run/svnserve $ sudo chown -R svn:svn /run/svnserve/ $ sudo chmod -R 777 /run/svnserve/ $ sudo mkdir /var/log/svn $ sudo chown -R svn:svn /var/log/svn/ $ sudo chmod -R 777 /var/log/svn/ 新建service启动服务文件 $ sudo nano /etc/systemd/system/svnserve.service [ Unit ] Description = Subversion protocol daemon After = syslog.target network.target [ Service ] Type = forking RuntimeDirectory = svnserve PIDFile = /run/svnserve/svnserve.pid EnvironmentFile = /etc/default/svnserve ExecStart = /usr/bin/svnserve $DAEMON_ARGS User = svn Group = svn KillMode = control-group Restart = on-failure [ Install ] WantedBy = multi-user.target 重启机器后出现这个错误:(原因是上面的第一个操作我没有做,就是没有创建一个文件 /etc/default/svnserve ,或者其中涉及到的文件 /var/log/svn , /run/svnserve 没有新建,或者没有配置可写权限对于用户 svn ) pi @ pingbook :~$ systemctl status svnserve . service ● svnserve . service - Subversion protocol daemon Loaded : loaded (/ etc / systemd / system / svnserve . service ; enabled ; vendor preset : enabled ) Active : failed ( Result : resources ) since Sun 2018-07-08 20 : 06 : 56 CST ; 28s ago 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Failed to start Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Unit entered failed state . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Failed with result 'resources' . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Service hold-off time over , scheduling restart . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Stopped Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Start request repeated too quickly . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : Failed to start Subversion protocol daemon . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Unit entered failed state . 7月 08 20 : 06 : 56 pingbook systemd [ 1 ] : svnserve . service : Failed with result 'resources' . checkout一份代码到nginx服务器,保持web同步,注意checkout的目录用户要是svn的用户和组,这样hook才能有权限读写 $ sudo svn co svn://localhost/svn /www/pingbook.top --username \"hr\" $ cd /www/pingbook.top $ sudo chown -R svn:svn * $ sudo chown -R svn:svn /www/pingbook.top $ sudo chmod -R 757 /www/pingbook.top $ sudo chmod -R 757 /www/pingbook.top/.svn # 配置svn数据仓库 $ sudo svn cleanup 如果commit的时候发现 hook 的 post-commit 总是报错: post-commit hook failed (exit code 255) with no output ,需要检查对应的文件的读写权限. 1. 检查对应的 post-commit 的用户组是 svn ,对应的文件有执行权限: sudo chmod g+e /srv/svn/hook/post-commit","tags":"树莓派","url":"articles/pi-svn/"},{"title":"[环境搭建] 配置采用NAT123进行树莓派部署","text":"安装步骤 2018-07-09 更新,下面的方法如果安装失败,尝试官方的安装指南: http://www.mono-project.com/download/stable/#download-lin-raspbian 1. 下载对应的linux版本的nat123安装包: http://www.nat123.com/Pages_2_32.jsp 2. 解压缩到一个目录里面: tar zxvf nat123linux20180627.tar.gz ~~3. 安装 sudo apt-get install -y mono-complete ,如果安装失败,请参见另外的一篇文章设置对应的国内镜像: https://pingbook.top/articles/pi-mirrors/ ~~ 4. 上面的 momo-complete 的安装需要一段时间,大约十分钟左右.~~ $ mono /home/pi/nat123/nat123linux.sh service & 采用如下方式进行安装 mono-complete 参考地址: http://www.mono-project.com/download/stable/#download-lin-raspbian $ sudo apt install apt-transport-https dirmngr $ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF $ echo \"deb https://download.mono-project.com/repo/debian stable-raspbianstretch main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list $ sudo apt update $ sudo apt install mono-complete","tags":"树莓派","url":"articles/pi-nat123/"},{"title":"[树莓派] 树莓派3B安装","text":"树莓派安装 因为感觉空间越来越小了,不能使用现在的需要了,所以决定重新安装系统. 安装完成后，TF卡被分成两个分区： 67MB vfat格式的引导分区（系统启动后被挂载在/boot目录） TF卡剩余空间 ext4格式的磁盘分区 由于Windows下不识别ext4格式的磁盘，在资源管理器中查看TF卡只显示一个67MB大小、名字为boot的盘符。 若想恢复TF卡整个空间为windows可识别的fat32/exfat格式，需要使用低级格式化工具HDD Low Level Format Tool（windows磁盘管理器无法处理ext4格式磁盘）。 安装版本为lite版本 在没有显示屏网线的情况下可以通过如下方式进行远程操作. 1. 下载镜像 2. 新建一个空文件没有后缀名: ssh, 然后放到 /boot 文件夹里面. 这两个文件在启动的时候会自动复制到指定的目录里面. 3. 新建一个文件 wpa_supplicant.conf ,输入以下的内容,按照你的环境进行配置对应的wifi名称和密码: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=CN network={ ssid=\"MiniWifi\" psk=\"L0ngh)171130AVb\" key_mgmt=WPA-PSK } network={ ssid=\"GDS-GUEST\" psk=\"Gr33nD0t!\" } 安装完成后,需要登录到电脑,这个电脑和你的树莓派需要在一个局域网里面. 有很多人统建使用 advanced ip scanner 这个工具, 我也使用了一段时间,开始还好,后面发现有时候扫描不到你的树莓派. 在网上搜索了一阵发现还有同款的一个扫描类的软件 angry ip scanner 之所以选择他是因为他对不同的局域网环境都能正确的扫描到树莓派对应的机器名称和机器ip address. 远程桌面工具,不是VNC 直接运行如下命令安装对应的远程桌面工具: $ sudo apt install -y xrdp","tags":"树莓派","url":"articles/pi-installation/"},{"title":"[Pelican高级] pelican 博客高级配置","text":"前言 继续上一篇的基本配置后,这里我将记录下涉及到的一些高级pelican的使用方法,也是自己摸索的一些网上的经验,还有一些自己自定义的功能. 关键字 Google adsense 百度站长 Google Console Tipue Search fabfile 不蒜子,浏览量统计 添加google和百度的SEO (2018-07-09) 谷歌的收录比较简单,直接登录到这里: https://www.google.com/webmasters ,按照提示添加自己 的网站即可,添加对应的sitemap,robots.txt即可. 百度的可以通过进入百度站长 http://zhanzhang.baidu.com ,方法同上面的谷歌添加网站,验证即可. 为了网站的长期可持续发展,添加一些广告也是没办法的: https://www.google.com/adsense/new/u/0/pub-1893384651266286/home 增加搜索功能(2018-07-09) 使用的插件是: Tipue_Search 自动化部署 看了一下官方的自动化部署相关的文章 fabric/Make , 提到在linux下 你可以很方便的使用 make 命令来操作相关的自动化,它对应的是 makefile ,你在使用 pelican-quickstart 命令的时候会提示你是否需要生成 这个文件. 执行命令 pelican-quickstart 的时候也会生成一个文件 fabfile.py ,这个文件同 makefile 是一样的,只不过一个是用python实现的,一个是基于linux shell 实现的. 在window下打开这个文件,发现里面的文件报了好多错,定位到 from fabric.api import * ,类似 no module found env,local 由于对 fabfile 不太熟悉,到网上找了一圈解决方法,发现缺少对应的包导致报错命令无法执行. 执行下面的命令完成对应的安装操作. pip install pycryptodome pip install Fabric3 # 注意这里是Fabric3,不要使用fabric 百度站长不能收录 按照官网提示,下载了对应的html文件到pelican的目录下面使用附件的形式复制到对应的output目录下面,推荐不要使用 cname 的方式. 例如我下载的html文件是: baidu_verify_TVrRxDNlTJ.html ,完整的配置在 pelican.conf 文件中,如下: STATIC_PATHS = ['static', 'extra/README.md', 'extra/robots.txt', 'extra/CNAME', 'extra/favicon.ico', 'extra/baidu_verify_TVrRxDNlTJ.html', 'extra/google9db45b3da980c919.html'] EXTRA_PATH_METADATA = { 'extra/README.md': {'path': 'README.md'}, 'extra/robots.txt': {'path': 'robots.txt'}, 'extra/CNAME': {'path': 'CNAME'}, 'extra/favicon.ico': {'path': 'favicon.ico'}, 'extra/baidu_verify_TVrRxDNlTJ.html': {'path': 'baidu_verify_TVrRxDNlTJ.html'}, 'extra/google9db45b3da980c919.html': {'path': 'google9db45b3da980c919.html'} } 加入浏览量统计 在谷歌上溜达了一圈,找到了一个博客: http://xiaohanyu.me/about/,随便看了一下作者的博客,看到了他去面试的谷歌和Facebook的面试经历, 感觉挺好玩的,里面提到了他们代码面试的工具: https://coderpad.io . 去玩了一下,感觉挺好玩. 好吧,扯远了….. 言归正文,推荐一个好用简单的统计页面浏览量和网站浏览量的插件. * 工具 不蒜子 ,代码也是只需要简简单单的几号就可以了,把这四行代码放到页面中你想要放的地址: <script async src= \"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\" ></script> <span id= \"busuanzi_container_site_pv\" > 总访问量 <span id= \"busuanzi_value_site_pv\" ></span> 次 </span> , <span id= \"busuanzi_container_site_uv\" > 总访客 <span id= \"busuanzi_value_site_uv\" ></span> 人 </span> <span id= \"busuanzi_container_page_pv\" > , 浏览量: <span id= \"busuanzi_value_page_pv\" ></span></span>","tags":"博客搭建","url":"articles/pelican-advance/"},{"title":"[Pelican初级] pelican 博客搭建","text":"我真是太折腾了,也没能坚持下去,去年陆陆续续用 hexo 写了一段时间的博客,最终没能坚持下去! 这个博客建立算是建立起来了, 我会认真的去写博客,坚持到最后! 关键字 pelican markdown github 搭建步骤 最好的方式莫过于官方文档: 官方入坑道路 . 下面的步骤都是很简单,网上一堆教程,我这里就不多说了,记下这些步骤 // 如果需要使用markdown这个高逼格的语法去写博客,请安装一下的包 # pip install pelican markdown typogrify # mkdir pingbook.top # cd pingbook.top # pelican-quickstart 安装上面的步骤操作下来后,弹出如下的提示让你配置,这些配置都可以以后在 pelicanconf.py 修改,直接默认回车一路下去就好了! pelican-quickstart执行命令后，会提示输入博客的配置项，除了少数几个必填以外，其它都可以选择默认，而且都可以在pelicanconf.py文件中进行更改，所以你可以随意选择。 1. Where do you want to create your new web site?[.] (你想在哪里创建你的网站，默认为当前目录) 2. What will be the title of this web site?(网站的标题是什么) 3. Who will be the author of this web site?(网站的作者是谁) 4. What will be the default language of this web site? [en] (网站的默认语言是),这里我们写'zh'中文 5. Do you want to specify a URL prefix? e.g., http://example.com(Y/n) (是否指定域名),Y 6. What is your URL prefix?(see above example; no trailing slash)(输入域名，不能包含反斜杠'/'),http://moelove.info 7. Do you want to enable article pagination?(是否启用文章分页) 8. Do you want to generate a Makefile to easily manage your website?(是否生成一个Makefile来管理网站(这里我建议生成，因为会比较方便的)) 9. Do you want an auto-reload & simpleHTTP script to assist with theme and site development?(是否想有一个自动加载的小型http脚本用来修改主题和站点开发) 10. Do you want to upload your website using FTP? 11. Do you want to upload your website using SSH? 12. Do you want to upload your website using Dropbox? 13. Do you want to upload your website using S3? 命令使用 由于本人使用的是windows,这里我使用了两个命令: # pelican content # 根据content中的内容，生成静态网站到output目下 # cd output && python -m pelican.server # cd output && python -m SimpleHTTPServer 主题和插件安装 theme安装 下载主题文件,添加配置: THEME = './pelican-themes/gum' 插件安装 下载插件文件,添加如下配置: PLUGIN_PATHS = [u\"pelican-plugins\"] PLUGINS = [u\"sitemap\",u\"gzip_cache\",u\"neighbors\",u\"related_posts\"] SITEMAP = { 'format': 'xml', 'priorities': { 'articles': 0.7, 'indexes': 0.5, 'pages': 0.3 }, 'changefreqs': { 'articles': 'weekly', 'indexes': 'daily', 'pages': 'monthly' } } 字体更改 1.下载字体文件,到网站的静态文件夹内,具体可以参考让wordpress主题绕开对google的依赖.不过此种方法也有些问题.把静态资源放到Github上加载时间也没别之前好多少. 2.把Google的静态公共库替换为国内的公共库.例如我的给替换成360的镜像地址.其实这种方法也有些弊端,例如国外用户访问就会出现加载过慢的问题.但是毕竟我们在'朝内',所以就换成360的资源库吧.操作如下 在对应的主题的css文件中修改对应的google font切换到国内的镜像.例如本周使用的是gum主题,转到对应的css文件 gumby.css ,修改如下: #static/css/目录下css文件中,例如gumby.css @import url ( // fonts . googleapi . com / css ? family = Overlock : 400 , 700 , 900 ); @import url ( // fonts . googleapi . com / css ? family = PT + Mono ); #替换为 @import url ( // fonts . useso . com / css ? family = Overlock : 400 , 700 , 900 ); @import url ( // fonts . useso . com / css ? family = PT + Mono ); 国内其他开公共库: 百度CDN公共库; 新浪云计算CDN公共库; 又拍云JS库CDN服务; 七牛云静态文件CDN; 高级语法 静态图片 新建一个目录在 content 下面,例如 images ,然后在 pelicanconf.py 设置如下: STATIC_PATHS = ['images','downloads'] ,在对应的md中可以这样写语法对应图片: ![测试图片显示]({attach}/static/images/test.png) 部署 部署到github上 新建一个仓库repository,仓库名称和你的github昵称相同,例如你的名称是abc,那么创建的仓库名称是: abc.github.io 也可以创建一个组织organization,在组织下面在创建一个仓库repository,仓库名称和你的组织也可以创建一个组织organization名称相同, 例如你的organization名称是abc,那么创建的仓库名称是: abc.github.io 完成以上的操作后上传对应的源码到github上,这里省略,命令如下: cd output git init git add . git remote add origin 仓库git地址 git push -u origin master","tags":"博客搭建","url":"articles/try-pelican/"},{"title":"[面试] 5. 性能测试相关的涉及内容","text":"前言 今天到一家初创型的公司去参加了一轮面试,面试了好久性能测试相关的东西,好多年没有做这个了,突然问起来,感觉好痛苦. 可是也无奈, 因为自己选择了这个行业.还是需要自己重拾这些遗忘的东西,所以我这里就梳理一下自己所知道的重要的检查点. 关键字 TPS (Transaction Per Second) PV (Page View) PR (Page Response)","tags":"面试","url":"articles/5-software-performance-testing/"},{"title":"[面试] 4. 白盒测试需要关注的知识点","text":"参考博客: https://www.cnblogs.com/molrang/p/6420918.html 自动化测试 考虑的因素 ①、项目的影响（能否帮助项目进度、覆盖率、风险） ②、复杂度（是否容易实现，包括数据和其他环境等） ③、时间（实现自动化需要多少时间） ④、早期需求和代码的稳定性（需求或代码能否证明是在范围内变化的） ⑤、维护工作量（代码能否能长期保持相对稳定） ⑥、覆盖率（自动化测试能否覆盖程序的关键特性和功能） ⑦、资源（是否拥有足够的人力、硬件和数据资源来运行自动化测试） ⑧、执行（负责执行的人员是否有足够的技能和时间去运行） ⑨、自动化测试管理 白盒测试 按照程序内部结构，逻辑驱动测试程序,目的是检测产品内部动作是否按照设计说明书的规范进行，检验程序的每条路径是否都能按照预定要求进行工作 白盒测试方法 ①、静态测试 静态测试是指不运行程序本身，仅通过分析程序文档结构，软件执行过程，检测程序的正确性，主要有变量，接口，递归等。 ②、动态测试 动态方法是指运行程序，检查运行结果与预期结果对比差异，并分析抗压性，健壮性等，这种测试包括三部分：构造测试实例，执行程序，分析程序输出结果。 区别一：静态测试是用于预防的，动态测试是用于矫正的 区别二：多次的静态测试比动态测试要效率和效益高 区别三：静态测试综合测试程序代码 区别四：在相当短的时间里，静态测试的覆盖度能达到100%，而动态测试经常是只能达到50%左右，原因动态测试发现的bug大部分只是在测试实际执行的那部分代码 区别五：动态测试比静态测试更花时间 区别六：静态测试比动态测试更能发现 bug 区别七：静态测试的执行可以在程序编码编译前，动态测试只能在编译后才能执行 区别八：静态测试能发现动态测试所不能发现的一些:\"Syntax error,code that hard to maintain,code that hard to test,code that does not confirm to coding standard, and ANSI violations\" 白盒测试方法 ①、尽量先用自动化工具来进行静态解析 ②、建议先从静态测试开始（静态结构分析、代码走查、静态质量度量），然后进行动态测试（如覆盖率测试） ③、以静态分析结果作为依据，再使用代码检查和动态测试方法对静态分析结果进行进一步确认，提高测试效率及准确性 ④、覆盖率测试是白盒测试的重要手段，在测试报告中可作为量化指标的依据，对于软件的重点模块，应使用多种覆盖率标准衡量代码的覆盖率 包括的有代码检查,SQL语句的测试,","tags":"面试","url":"articles/4-software-testing-white/"},{"title":"[面试] 3. 黑盒测试需要注意的几个关注点","text":"基本理论概念 是软件工程中的一个非常重要的环节，是开发项目整体的一部分。 是有计划有组织的，是伴随软件工程的诞生而诞生的，软件测试不是万能的， 不可能发现全部缺陷，软件测试是有局限性的。 测试的目的 1）验证软件是否满足 软件开发合同 或者项目开发计划，系统/子系统设计文档，软件需求规格说明，软件产品说明等规定的软件质量要求 2）通过测试，发现软件缺陷 3）为软件产品的质量测量和评价提供依据 测试用例的设计规则 基于测试需求的原则 基于测试方法的原则 兼顾 测试充分性 和 效率的原则 测试用例的方法有: a. 等价类: 是在 分析 需求规格说明 基础上，把程序的输入域 划分成 若干个部分，然后再每部分中选取 代表性数据 形成测试用例. * 步骤： a)划分有效等价类，对规格说明 是 有意义 合理的 输入数据 所构成的集合 b)划分无效等价类，对 规格说明 是 无意义 不合理的 输入数据 所构成的集合 c) 为每一个等价类 定义一个唯一的编号 d）为每一个等价类 设计一组测试用例 确保 覆盖相应的等价类 b.边界值分析: 边界值分析法 是针对 边界值 进行测试的 使用 等于 大于 或者小于边界值的数据对程序进行测试的方法 就是边界值分析法。 * 步骤： a）通过分析 规格说明 找出 所有 可能的 边界条件 b) 对每一个边界条件 给出 满足 和 不满足的输入数据 c) 设计相应的 测试用例 c. 错误推测法: 基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。 d. 因果图法 等价类划分法和边界值分析方法都是着重考虑输入条件，但没有考虑输入条件的各种组合、输入条件之间的相互制约关系。这样虽然各种输入条件可能出错的情况已经测试到了，但多个输入条件组合起来可能出错的情况却被忽视了。 如果在测试时必须考虑输入条件的各种组合，则可能的组合数目将是天文数字，因此必须考虑采用一种适合于描述多种条件的组合、相应产生多个动作的形式来进行测试用例的设计，这就需要利用因果图（逻辑模型）。 e. 判定表驱动法 判定表是分析和表达多逻辑条件下执行不同操作的情况的工具。 f. 正交实验法 * 步骤 1 提取功能说明,构造因子–状态表 把影响实验指标的条件称为因子.而影响实验因子的条件叫因子的状态.利用正交实验设计方法来设计测试用例时,首先要根据被测试软件的规格说明书找出影响其功能实现的操作对象和外部因素,把他们当作因子,而把各个因子的取值当作状态.对软件需求规格说明中的功能要求进行划分,把整体的概要性的功能要求进行层层分解与展开,分解成具体的有相对独立性的基本的功能要求.这样就可以把被测试软件中所有的因子都确定下来,并为确定个因子的权值提供参考的依据.确定因子与状态是设计测试用例的关键.因此要求尽可能全面的正确的确定取值,以确保测试用例的设计作到完整与有效。 2 加权筛选,生成因素分析表 对因子与状态的选择可按其重要程度分别加权.可根据各个因子及状态的作用大小,出现频率的大小以及测试的需要,确定权值的大小。 3 利用正交表构造测试数据集 正交表的推导依据Galois理论（这里省略,需要时可查数理统计方面的教材） 1. Dr. Genichi Taguchi 设计的正交表: https://www.york.ac.uk/depts/maths/tables/orthogonal.htm 2. Technical Support ( support.sas.com ) com 提供的 http://support.sas.com/techsup/technote/ts723_Designs.txt 利用正交实验设计方法设计测试用例,比使用等价类划分,边界值分析,因果图等方法有以下优点:节省测试工作工时；可控制生成的测试用例数量；测试用例具有一定的覆盖率。 g. 场景图法 现在的软件几乎都是用事件触发来控制流程的，事件触发时的情景便形成了场景，而同一事件不同的触发顺序和处理结果就形成事件流。 这种在软件设计方面的思想也可以引入到软件测试中，可以比较生动地描绘出事件触发时的情景，有利于测试设计者设计测试用例，同时使测试用例更容易理解和执行。 软件的内部质量 功能性：当软件在指定条件下使用时，软件产品 提供 满足 明确的和隐含的能力，包括适合性，准确性，互操作性，安全保密性，依从性 可靠性：在指定条件下使用时 软件产品维持规定的性能级别的能力；包括，成熟性，容错性，易恢复性，依从性 易用性：在指定条件下使用 软件产品被理解被学习 使用和 吸引用户的能力 包括 易学性 易操作性 吸引性 依从性 效率性：在规定条件下 软件产品执行其功能时使用合适数量和类别资源的能力；包括 资源利用性 和效率依从性 、 维护性：软件产品 可以被修改的能力可能包括 纠正 改进 软件对环境 需求 和功能规格说明变化的适应 包括，易分析性，易改变性，稳定性，易测试性，依从性 可移植性：软件产品 从一种环境迁移到另外一种环境的能力，包括，适应性，易安装性，共存性，易替换性，可移植性的依从性。 兼容性: 什么是兼容性测试?兼容性测试侧重哪些方面? 主要检验的是软件的可移植性，检查软件在不同的硬件平台软件平台上是否可以正常的运行。细分会有：平台的兼容，网络兼容，数据库兼容，数据格式的兼容等。 测试的生命周期 单元测试，集成测试，确认测试(Certify Testing)，系统测试，验收测试, 回归测试(Regression Testing). 单元测试: 软件设计文档 集成测试：软件结构设计文档 配置项测试：需求规格说明书（接口需求规格说明） 系统测试：用户需求（研制合同或系统需求） 验收测试：软件研制合同（用户需求或系统需求） 测试方法 黑盒测试，白盒测试, 静态测试和动态测试，手工测试和动态测试，回归测试，公测 * 白盒 逻辑测试或者基于程序的测试，这种测试 应了解软件程序的内部构造，并且根据内部构造 来设计测试用例。发生在单元测试,集成测试或确认测试. 黑盒测试是功能性测试，一般采用穷举输入测试. * 黑盒 又称功能测试，数据驱动测试，或者基于规格说明的测试，这种测试不必要了解 对象的内部逻辑结构，而是根据需求说明书中的功能来设计测试用例. 白盒测试是结构测试，一般是穷举路径测试，检测内部逻辑驱动结构 * 灰盒 持续的集成测试 冒烟测试 一段时间内 针对某个模块【刚新增的模块 或者刚刚修改完的模块】开展某个专项测试（功能测试）， 回归测试 长时间，针对某个指定的版本【刚新增的模块 以及与他相关的其他模块，进行专项的测试活动】 功能测试 1． 测试需求：测试的规格说明书，主要作用是定义待测试的模块 和 功能模块的测试要点 2． 测试计划：测试过程中的纲领性文件，对测试活动中的测试环境，测试方法，测试时间人员安排。 3． 测试用例：是测试需求的细化，是一群元素的集合，主要包含，用例编号，操作步骤/测试数据，预期结果，实际结果，判定，覆盖需求。 4． 缺陷报告：将软件的实际情况 和 测试用例的预期结果相比较，记录问题报告单。 5． 测试的基本过程：四个过程，测试策划，测试设计，测试执行，测试总结 6． 测试所需要的文档：测试需求，测试计划，测试用例，缺陷报告，测试报告（可能编写） 可能的面试题目 Beta测试与Alpha测试有什么区别? Beta是用户实际使用的测试，没有开发者在场，Alpha测试是公司内部测试，有开发者监控。 什么是桩模块？什么是驱动模块？ 集成测试前要为被测模块编辑一些模拟其下级功能的子模块的替身，以代替被测模块的借口，接受或者传递数据，这些假模块被称为桩模块。 驱动模块一般为主程序，它接收测试数据并将这些数据传递到被测试模块。 什么是扇入和扇出？ 扇入是指该模块被调用的次数，扇入大，说明该模块的复用性好。 扇出是指该模块调用其他模块的个数，扇出大，说明该模块的业务逻辑复杂。 你认为做好测试工作的的关键是什么？ 目的，管理，规范。 简述一下缺陷的生命周期? 提交->确认->分配->修复->验证->关闭 软件的安全性应该从哪几个方面去测试？ 1，用户认证机制， 2，加密机制 3，安全防护策略，安全日志等， 4，数据备份和恢复 5，防病毒系统。 单元测试，集成测试，系统测试的区别？ 测试方法不同：单元测试属于白盒测试，集成测试属于灰盒测试，系统测试属于黑盒测试。 考察范围测试重点不同：单元测试注重单元内部的数据结构，逻辑控制，异常处理。 集成测试注重模块之间的接口及接口之间的数据传递，系统测试注重满足需求。 基准不同：单元测试主要的逻辑覆盖，集成测试主要是接口覆盖，系统测试是测试用例对需求规格的覆盖率。","tags":"面试","url":"articles/3-software-testing-black/"},{"title":"[面试] 1. 面向对象的相关概念","text":"这里整理的是针对面向对象的相关问题和面试中可能涉及的问题. 达到目的 面向对象三大特性,封装 (Encapsulation) , 继承 (Inheritance) 和多态 (Polymorphism)","tags":"面试","url":"articles/1-object-oriented-programming/"},{"title":"[面试] 2. 有关list及其方法的使用","text":"解决的问题(Python/Java的list对比学习) 排序 java采用的是 Collections 包中的两个方法: Collections.sort(list) 更复杂点可以是Collection.sort(list, new Comparator<Person>() {}) Collections.reverse(list) or list.sort(Collections.reverseOrder()) python没有array,只有list,直接使用 sort 方法即可,如果是倒序可以用reverse=True指定","tags":"面试","url":"articles/2-list-methods/"}]}