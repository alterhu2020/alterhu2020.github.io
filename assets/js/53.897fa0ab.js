(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{316:function(s,a,e){"use strict";e.r(a);var n=e(6),t=Object(n.a)({},function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"环境配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境配置","aria-hidden":"true"}},[s._v("#")]),s._v(" 环境配置")]),s._v(" "),e("ul",[e("li",[s._v("下载"),e("code",[s._v("node")]),s._v(",并执行命令安装node配置"),e("code",[s._v("PATH")]),s._v("路径:")])]),s._v(" "),e("div",{staticClass:"language-$shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ cat /proc/cpuinfo \nProcessor       : ARMv7 Processor rev 10 (v7l)\nARMv7 (and below) is 32-bit. ARMv8 introduces the 64-bit instruction set.\nIf you want to see whether your system supports 64-bit binaries, check the kernel architecture:\n$ uname -m\n此处树莓派4是ARMv7架构\n\n$ 树莓派: wget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-armv7l.tar.xz\n$ amd64: wget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xz\n$ tar xvf node-v12.14.1-linux-armv7l.tar.xz\n$ tar xvf node-v12.14.1-linux-x64.tar.xz\n$ mv node-v12.14.1-linux-armv7l /opt/\n$ sudo nano /etc/profile\n增加对应的node的PATH路径,例如如下:\nexport path=/opt/node-v12.14.1-linux-armv7l/bin:$PATH\nexport path=/opt/node-v12.14.1-linux-x64/bin:$PATH\n执行如下命令使上面的PATH配置生效\n$ source /etc/profile \n\n执行如下命令确认node环境变量配置成功\n$ node -v\n$ npm -v \n\n设置npm和yarn的镜像为淘宝镜像\n$ npm config set registry https://registry.npm.taobao.org\n")])])]),e("ul",[e("li",[s._v("安装node的包管理器"),e("code",[s._v("yarn")]),s._v("(当然此处也可以不安装,直接使用node内置的"),e("code",[s._v("npm")]),s._v("来管理包):")])]),s._v(" "),e("div",{staticClass:"language-$shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ npm i yarn -g\n$ yarn config set registry https://registry.npm.taobao.org\n")])])]),e("ul",[e("li",[s._v("安装"),e("code",[s._v("pm2")]),s._v("命令用于后台服务静默执行:")])]),s._v(" "),e("div",{staticClass:"language-$shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ npm i pm2 -g\n\n配置pm2开机启动脚本\n$ pm2 startup \n")])])]),e("h2",{attrs:{id:"_1-测试环境运行调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-测试环境运行调试","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 测试环境运行调试")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# install dependencies")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# serve with hot reload at localhost:3000")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" dev\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# build for production and launch server")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" build\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" start\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# generate static project")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" generate\n")])])]),e("h2",{attrs:{id:"_2-生产环境项目部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-生产环境项目部署","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 生产环境项目部署")]),s._v(" "),e("ul",[e("li",[s._v("复制当前所有包文件,解压,然后在当前文件夹下执行命令安装编译工程:")])]),s._v(" "),e("div",{staticClass:"language-$shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ yarn \n$ yarn build\n\n编译程序, 然后配置pm2程序\n$ pm2 start  ecosystem.config.js --watch\n$ pm2 save\n")])])]),e("h2",{attrs:{id:"_3-重新发布-新版发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-重新发布-新版发布","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 重新发布/新版发布")]),s._v(" "),e("div",{staticClass:"language-$shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 首先复制源码目录文件到对应的服务器,然后直接如下命令:\n$ yarn build\n$ pm2 reload name| all\n$ pm2 restart all\n$ pm2 logs\n$ pm2 delete all\n\n")])])]),e("ul",[e("li",[s._v("执行pm2相关命令确认程序启动没有问题:")])]),s._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("$ pm2 list    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有的pm2程序")]),s._v("\n$ pm2 monit   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看pm2的所有程序的监控面板")]),s._v("\n$ pm2 reload\n")])])]),e("p",[s._v("如果上述配置都没有问题,可以访问地址: "),e("code",[s._v("http://127.0.0.0:3000")]),s._v("查看启动程序,然后我们只需要在nginx配置\n将所有请求反转到"),e("code",[s._v("nginx")]),s._v(",参考配置如下:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" # proxy for  project\n location  / {\n          alias   /www/the project folder/;\n          proxy_pass http://127.0.0.1:3000/;\n          \n          include nginxconfig.io/proxy.conf;\n }\n")])])]),e("hr"),s._v(" "),e("h2",{attrs:{id:"安装node-sass-报错"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装node-sass-报错","aria-hidden":"true"}},[s._v("#")]),s._v(" 安装"),e("code",[s._v("node-sass")]),s._v(" 报错")]),s._v(" "),e("p",[s._v("首先要知道的是，安装"),e("code",[s._v("node-sass")]),s._v("时在"),e("code",[s._v("node scripts/install")]),s._v("阶段会从 github.com 上下载一个.node文件，大部分安装不成功的原因都源自这里，因为 GitHub Releases 里的文件都托管在"),e("code",[s._v("s3.amazonaws.com")]),s._v("上面，而这个网址在国内总是_网络不稳定_，所以我们需要通过第三方服务器下载这个文件。（顺带一提，你可以看看"),e("a",{attrs:{href:"https://github.com/sass/node-sass/commit/b8050efbe0effb68b0617d28276c72eef1fb15ef",target:"_blank",rel:"noopener noreferrer"}},[s._v("这个好玩的 commit"),e("OutboundLink")],1),s._v("）")]),s._v(" "),e("ol",[e("li",[s._v("方法一：")])]),s._v(" "),e("p",[s._v("直接翻墙安装；")]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[s._v("方法二：")])]),s._v(" "),e("p",[s._v("2.1 查看当前环境适用的binding.node")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("node -p \"[process.platform, process.arch, process.versions.modules].join('-')\"\n")])])]),e("p",[s._v("2.2  到"),e("a",{attrs:{href:"https://github.com/sass/node-sass/releases",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),e("OutboundLink")],1),s._v("下载对应版本的文件。链接地址: https://github.com/sass/node-sass/releases\n2.3 将下载好的文件放入缓存目录中,查看缓存目录命令：")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("> PS C:\\Users\\Administrator> npm config get cache\nE:\\nodejs\\node_cache\n\n")])])]),e("p",[s._v("2.3.1 通常yarn缓存目录：C:Users\\你的用户名\\AppData\\Local\\Yarn\\Cache\n2.3.2 通常npm缓存目录：C:Users\\你的用户名\\AppData\\Roaming\\npm-cache\\node-sass\n此处我的下载文件目录是："),e("code",[s._v('"E:\\nodejs\\node_cache\\node-sass\\4.13.1\\win32-x64-72_binding.node"')])]),s._v(" "),e("p",[s._v("到这里去根据版本号、系统环境，选择下载 .node 文件，然后安装时，指定变量 sass_binary_path，如：\nhttps://github.com/sass/node-sass/releases/download/v4.13.0/win32-x64-72_binding.node")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm i node-sass --sass_binary_path=D:/win32-x64-72_binding.node\n")])])]),e("p",[s._v("按上面这么做确实没错，而且也是必须，但是当你再次去创建ionic项目时还是会提示同样的错误(如果不报错说明你运气好，那下面就不用看了)，那么原因到底是为什么呢？那是因为你的确安装了sass而且也成功下载了相关文件了，只是你在执行时候可能是因为运气不好或者当前软件没设计好的原因没给你自动添加sass的环境变量，所以这是我们得自己手动添加一下系统的环境变量(怎么添加系统环境变量我这就不提了，因为我认为很多人应该都会的，这里我只提一下要加什么环境变量，大概路径)，例如我的环境变量如下：(这里提醒一下配置的路径最好是根据你的实际情况，因为每个人安装nodejs的方式都不一样)")]),s._v(" "),e("p",[s._v("解决方法设置环境变量：")]),s._v(" "),e("ol",[e("li",[s._v("设置系统变量名称: "),e("code",[s._v("SASS_BINARY_PATH")])]),s._v(" "),e("li",[s._v("系统变量值："),e("code",[s._v("E:\\nodejs\\node_cache\\node-sass\\4.13.1\\win32-x64-72_binding.node")])])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdn.net/20180106162556616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGY5ODEwMTE1MTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"图片"}})])])},[],!1,null,null,null);a.default=t.exports}}]);